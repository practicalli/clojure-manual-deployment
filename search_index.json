{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["20","4.0","4clojur","amp","app","applic","approach","around","attribut","avail","behind","beyond","bob","book","brave","break","build","chang","cheetsheet","clojur","clojure.org","clojure.practical.li","clojurian","code","common","commun","concept","creativ","cross","crossclj","data","detail","develop","discov","discuss","do","doc","document","easi","ecosystem","environ","evalu","everyon","excel","exercis","exist","experi","extend","featur","feedback","feel","fix","fun","function","get","gitub.permiss","go","googl","group","hand","help","hint","imag","includ","instant","interact","intern","interoper","introduct","java","john","jr0cket","jvm","kind","koan","languag","learn","librari","licens","license.bas","lighttabl","london","offici","over","part","persist","power","practic","present","program","project","publish","quick","quickli","quot;pure&quot","rang","ration","referenc","repl","resourc","runtim","safe","sampl","scope","server","servic","sharealik","side","simpl","spacemac","start","state","stateless","stevenson","structur","stylesheet","support","syntax","take","theori","through","tool","uncl","under","us","webapp","wide","work","workshop"],"using-the-workshop/":["alreadi","amp","anyth","ask","basic","chapter","chat","check","clojur","clone","code","conduct","depend","detail","discuss","each","exampl","follow","gitter.im","help","independ","indic","know","look","more","need","new","noth","order","particular","pleas","power","practic","prepar","previou","question","quickli","recommend","relat","requir","room","section","skip","start","technic","topic","type","us","veri","want","welcom","work","workshop"],"using-the-workshop/requirements.html":["0.105.20","1.8","2.6","2.7.x","24.5.x","8","account","actual","ad","amp","awar","beginn","cach","client","clojur","code","command","depend","detail","develop","download","editor","eg","emac","enviorn","environ","etc","exampl","few","folder","follow","fork","git","github","gradl","greater","hint","ie","instal","java","jre","lein","leiningen","librari","lighttabl","line","local","m2/repositori","maven","notic","number","oll","option","pleas","project","pull","recommend","repl","request","requir","runtim","same","section","see","set","small","spacemac","structur","submit","suggest","support","technic","test","tool","up","us","veri","version","window","work","workshop"],"using-the-workshop/code-examples.html":["1","13:33:41","2016","awar","be","bst","call","clojur","clone","code","command","complet","contain","copi","creat","current","differ","directori","discov","each","editor","enjoy","evalu","exampl","example.git","express","favorit","file","follow","git","github","hint","https://github.com/practicalli/clojur","jr0cket","major","match","mi","namespac","new","note","open","out","pleas","project","repositori","sampl","section","start","sun","through","tri","until","updat","us","workbook","workshop"],"development-environments/":["amp","autom","awar","build","clojur","clojurescript","creat","develop","dynam","easiest","editor","encourag","environ","follow","leiningen","lighttabl","manag","page","project","repl","run","set","show","support","templat","tool","up","us","workflow","workshop","written"],"development-environments/java.html":["1.8","6","7","8","altern","although","amp","applic","apt","avail","background","build","bytecod","center","clojur","code","command","compil","comput","current","default","design","develop","dont","download","each","edit","etc","evalu","exampl","express","groovi","happen","host","inject","instal","instantan","java","java&#39;","jre","jrubi","jvm","jython","languag","latest","learn","leiningen","librari","line","machin","mean","neccessari","need","open","openjdk","oracl","packag","platform","pretti","recommend","regardless","repl","requir","result","return","run","runtim","scala","sdk","see","softwar","sudo","test","those","time","tool","top","ubuntu","us","usual","version","via","virtual","whether","window","work","write","written","zulu"],"development-environments/leiningen.html":["2.6.1","64","9","a+x","add","applic","autom","bin","bit","build","chmod","clojur","clojure.test","code","command","creat","defin","depend","deploy","directori","download","en","environ","execut","file","first","follow","hint","includ","ing","instal","interact","intern","jar","java","lein","leiningen","leiningen.org","librari","line","linux","look","macosx","make","manag","openjdk","oper","output","part","path","power","profil","project","pronounc","put","remot","repl","repositori","run","script","server","similar","system","templat","termin","test","tool","unit","us","veri","version","vm","work"],"development-environments/lighttable.html":["2013","add","amp","app","appli","approach","behavior","behaviour","chang","clojur","clojurescript","configur","connect","content","creat","css","ctrl","demo","develop","directori","document","download","editor","end","enter","entitl","express","extract","file","first","follow","get","here","hint","immedi","insid","instal","instruct","javascript","jaxlondon","languag","leiningen","lighttabl","lighttable.com","lighttable.dmg","linux","littl","macosx","onlin","open","packag","path","press","project","python","quick","s","sampl","save","script","section","simpl","slide","sourc","space","start","suggest","suitabl","support","system","sytem","tool","tutori","type","us","user","user.behaviour","usr/loc","want","window","work","workspac","written","zip"],"development-environments/other-tools.html":["advanc","aim","although","amp","articl","atom","autocomplet","background","becom","box","bracket","choic","cider","classic","clojur","code","cojur","colour","common","complet","configur","counterclockwis","current","cursiv","delimit","develop","document","eclips","edit","eg","emac","environ","error","etc","evalu","eventu","featur","find","follow","function","git","good","great","highlight","id","idea","instal","instruct","integr","intelij","intellij","java","keyword","la","languag","layer","leiningen","lighttabl","lightweight","line","long","look","machin","magit","major","mani","minimum","modern","more","much","nailgun","name","navig","netbean","nightcod","out","plugin","protorepl","provid","rainbow","refactor","repl","rich","run","see","seen","setup","sever","simpl","site","snippet","spacemac","standalon","start","structur","support","surpris","symbol","syntax","take","templat","time","tool","ubiquit","understand","unfortun","unmaintain","us","variat","vc","viabl","vim","virtual","write"],"overview/":["12","3","4","acid","activ","ad","adrian","affect","alon","alway","amount","amp","app","appeal","applic","approach","architect","argument","around","atom","avail","avoid","base","batteri","becom","best","big","break","browser","built","bytecod","c","call","centric","chang","client","cljc","clojur","clojurescript","close","closur","cloud","clr","cockcroft","code","common","commun","compil","complex","compon","concurr","consis","cover","cycl","data","databas","deconstruct","design","develop","dojo","domain","done","dynam","each","easi","easier","effect","effici","effort","encourag","engin","environ","etc","evalu","everyth","explor","extens","fast","featur","feedback","file","first","flexibl","fli","focu","formal","fun","function","gener","give","given","googl","have","heavili","help","here","high","highli","hint","host","iceburg","immut","implement","infer","input","internet","interoper","interoperabilti","java","javascript","jrubi","jvm","jython","keep","know","languag","larg","librari","lisp","list","london","look","lot","love","machin","macro","make","manag","mani","map","matter","memori","microsoft","minimis","modern","modifi","modular","month","monthli","mostli","much","mutabl","netflix","new","overview","parallel","part","perform","perpos","persist","planet","possibl","power","pragmat","primit","problem","produc","product","program","programm","project","pure","purpos","quickli","reactiv","reduc","ref","refer","referenti","regular","repl","requir","resourc","result","return","reusabl","ridicul","run","runtim","safe","same","scala","scalabl","scale","seamlessli","select","seper","set","short","side","signifi","simpl","small","smaller","softwar","sophist","space","specif","state","stm","strong","structur","swear","syntax","system","talk","term","thing","thread","through","time","tip","transact","transpar","trivial","trueli","tv","type","typic","under","understand","vector","ventur","veri","via","vibrant","virtual","wait","way","within","without","work","write"],"overview/purpose.html":["analysi","anyth","app","applic","approach","area","bank","big","break","browser","clojur","clojurescript","code","commun","complex","compon","concurr","data","deal","design","devic","devop","down","encourag","etc","exampl","excel","featur","financ","function","gener","great","high","hint","immut","includ","industri","instanc","insur","kind","languag","librari","log","make","massiv","microservic","million","mobil","number","ofclient","parallel","persist","power","problem","process","program","pure","purpos","reactiv","realli","reduc","return","run","scalabl","scienc","servic","side","simplifi","someth","strongli","structur","take","tool","trade","trivial","us","vast","vastli","webapp","well"],"overview/who-uses-clojure.html":["175","2014","5,000","accord","activ","adopt","advertis","agil","amazon","amp","analysi","apach","app","applic","art","ask","atlassian","bank","book","braintre","broad","c","centr","ci","circl","cisco","citigroup","clearli","client","clojur","clojurescript","collabor","compani","consum","core.log","cortana","creat","data","defin","deuch","develop","divers","doesn&#39;t","edit","ereceipt","etc","event","exampl","expedia","expert","facebook","financi","frontend","fund","given","graph","group","hackernew","hadoop","here","hn","hotel","incanta","insur","intellig","job","kafka","languag","langug","level","linkedin","mail","main","mainstream","malwar","manag","mani","map","mastodon","meaning","meta","microsoft","more","much","multipl","netflix","onlin","organ","over","overton","particip","payment","paypal","perform","pig","pipelin","platform","polici","posit","possibl","power","predict","process","product","project","publish","purchas","quick","quil","radar","rebuilt","reduc","report","rival","roomkey.com","rubi","salesforc","scan","server","set","show","site","small","social","sourc","stack","stapl","store","storm","stream","suit","swiftkey","system","team","tech","technolog","test","thoughtwork","thoughwork","thread","threat","tini","trade","type","undisclos","us","user","uswitch","variou","vero","walmart","who&#39;","write","x"],"overview/syntax.html":["1","13","2","21","3","4","42","5","8","abund","add","ambigu","appli","automat","avoid","awar","base","bracket","braket","c","call","centric","characters&quot","clojur","close","comment","data","delimit","demonstr","differ","due","easi","easier","editor","elimin","entir","error","etc","evalu","everyth","everywher","explicitli","fewer","first","fix","form","function","good","have","ie","instead","item","java","langaug","languag","languages&quot","learn","lisp","list","make","mani","match","miss","mix","mixtur","more","mystr","natur","new","notat","notation&quot","oper","peopl","perciev","power","pre","prefix","process","put","quot","quot;clojure&quot","quot;notation&quot","quot;prefix","quot;speci","read","realis","reason","reduc","repres","room","seem","seemingli","significantli","str","stringbuff","stringbuffer(&quot;c","structur","symbol","syntax","trivial","type","uniformli","until","us","valu","veri","write","written","x","x*=i","x+=1","x+=i","x/=i","y"],"overview/design.html":["39;.&#39","4","access","act","ad","allianc","alway","amp","anoth","applic","approach","argument","array","associ","base","behaviour","better","bloat","block","boil","build","built","call","catch","charact","clojur","collabor","collect","combin","common","commonli","compon","configur","construct","core","cruser&quot","data","def","defin","defn","defproject","design","develop","dot","down","droid","easi","easili","empir","enter","evalu","everyth","exampl","exit","extend","extens","falcon&quot","fewer","figher&quot","final","first","fn","focus","follow","form","framework","function","help","hint","hold","host","huge","hundr","immut","imperi","includ","index","inform","insid","interoper","itself","java","jedi","jvm","kenobi&quot","key","keyword","languag","lead","leiningen","librari","lisp","list","look","loop","macro","mainli","make","manipul","map","mean","monitor","more","name","namespac","new","now&quot","ns","occasion","on","optomis","pair","paramet","paramt","part","persist","platform","point","project","provid","quot","quot;c3p0&quot","quot;darth","quot;destroyer&quot","quot;im","quot;intergalact","quot;luk","quot;millenium","quot;obiwan","quot;r2d2&quot","quot;x","random","rebel","recur","recurs","refer","referenti","repres","return","see","self","set","ship","sideous&quot","similar","simplest","sith","skywalker&quot","small","someth","space.nam","special","specif","specificali","starwar","structur","strutur","sugar","syntact","themselv","thing","those","throw","tri","two","type","typic","up","us","vader&quot","valu","var","vector","veri","via","way","wing","within","write"],"overview/repl.html":["1","2","action","addit","appli","applic","argument","base","begin","between","braveclojur","braveclojure.com","c","call","charact","clojur","clojure’","code","common","compact","compil","correspond","cycl","data","defin","definit","describ","develop","differ","down","easi","element","etc","evalu","exampl","fact","fanci","fast","feel","file","first","follow","form","fun","function","give","hint","homoicon","import","includ","inform","keyword","languag","life","lisp","list","look","lookup","loop","lost","macro","make","manipul","map","mean","mere","model","more","newer","next","number","object","on","onc","pars","part","pass","perform","phase","power","print","process","produc","program","provid","quit","read","reader","refer","repl","repres","result","return","rule","section","see","simpli","slow","sourc","special","start","stream","streams/fil","string","structur","structure’","sugar","symbol","syntax","system","take","task","term","text","textual","themselv","top","transform","travers","two","type","up","us","valu","var","vector","veri","way","whose","without"],"overview/all-bytecode-in-the-end.html":["applic","background","be","bug","build","bytecod","code","compil","develop","easili","end","environ","evalu","fix","inject","itter","java","need","phase","repl","run","seper","soon"],"overview/features.html":["39","39;pure&#39","access","acid","actual","addit","affect","ahead","allow","although","alway","amp","anoth","appear","applic","approach","argument","ariti","assumpt","atom","automat","avoid","beginn","behaviour","benefit","boilerpl","boot","bracket","browser","build","built","bytecod","c","call","caus","centric","chang","charact","cheapli","clarifi","class","clean","clojur","clojure.cor","clojureclr","clojurescript","close","code","collect","common","commun","compar","compil","complex","compon","concis","concurr","conflict","connect","consid","consis","consist","constraint","construct","content","context","convieninet","core","correct","cours","crash","creat","cumbersom","data","databas","datastructur","datatyp","default","defer","defin","denot","depth","design","develop","doesnt","domain","done","down","downtim","dynam","easi","easier","effect","eg","element","emphas","enabl","encapsul","encourag","enforc","environ","etc","evalu","evalut","even","everth","everyth","exampl","except","experi","explor","express","extend","extrem","fact","fast","featur","file","first","fixm","follow","form","fp","fuction","full","function","garbag","gener","given","good","groovi","haskel","have","help","here","high","homoicon","host","human","i/o","ideal","immedi","immut","imper","implement","impur","includ","inform","input","interoper","introduc","invok","java","javaclassnam","javamethodnam","javascript","jrubi","jvm","jython","keep","languag","langugag","lead","leaner","librari","lisp","list","littl","live","lock","longer","loop","loos","machin","macro","make","manag","mani","manipul","map","massiv","memori","method","microsoft","mind","minim","model","modern","modul","modular","monad","more","much","multi","multithread","mutabl","mutalbl","net","new","nil","non","notoriusli","offer","on","open","oper","order","origin","otherwis","out","output","over","parallel","parenthesi","parrallel","pars","part","perform","persist","platform","polymorph","possibl","prim","print","problem","process","procss","program","provid","pure","puriti","purpos","quicker","quickli","quit","quot","ratio","re","read","reading,writ","ref","refactor","refer","referenti","rel","relev","reli","repetit","repl","replac","repres","request","requir","rest","result","return","review","ridden","round","run","runtim","safe","safer","safeti","same","scala","scale","script","see","seem","set","share","short","side","similar","simpl","singl","small","sneak","softwar","sourc","space","special","specifi","speed","stand","standard","start","state","stateless","still","stm","structur","sugar","suit","support","surpris","syncronis","syntat","syntax","system","take","term","ters","test","therefor","thing","though","thread","through","time","today","togeth","toolbox","transact","transpar","treat","tri","trivial","trueli","type","unix","unless","up","us","valu","vector","veri","via","virtual","way","well","whilst","within","without","work","write"],"basic-clojure/":["basic","build","clojur","code","command","construct","creat","develop","differ","ensur","enter","enviro","environ","evalu","explor","familiar","follow","help","lein","leiningen","name","new","note","now","okay","playground","prefer","project","readi","repl","run","section","syntax","time","tool","us","work"],"basic-clojure/whats-my-environment.html":["1","10","2","20","3","and/or","avail","bugfix","built","bytecod","charact","check","class","clojur","clojure.lang.namespac","code","compil","compon","contain","core","creat","current","cycl","data","defin","directori","end","enter","environ","evalu","exist","express","featur","file","find","follow","full","fulli","function","hint","includ","increment","inform","int","java","jvm","key","keyboard","keyword","know","languag","last","logic","look","major","map","minor","name","namespac","need","note","now","ns","object","otherwis","out","packag","pair","particular","path","point","pointer","possibl","previou","project","pull","qualifi","quot","quot;beta","quot;ga&quot","quot;java","quot;rc","quot;snapshot&quot","rand","recent","referenti","releas","repl","repres","result","return","run","self","seper","shift","shortcut","similar","start","str","structur","symbol","three","through","time","up","uparrow","us","usual","valid","valu","version","view","way","what","x&quot"],"basic-clojure/reading-project-file.html":["2","actual","argument","around","check","clojur","configur","contain","content","data","element","file","first","follow","function","funtion","inform","list","note","nth","number","output","page","project","project.clj","quot;project.clj&quot","read","realli","result","return","second","select","similar","simpli","slurp","start","string","structur","take","tidi","two","up","url","us","valu","version","want","way","web","within","wrap","zero"],"basic-clojure/threading-syntactic-sugar.html":["0","2","action&quot","add","algorithm","amp","anoth","appli","appropri","argument","backward","backwards&quot","balanc","basic","call","case","chain","classic","clearli","clojur","code","come","comma","con","config","configur","consid","construct","contain","content","contriv","convert","cookbook","creat","current","deal","def","defin","defproject","denot","drop","each","eg","element","elsewher","evalu","evalut","exampl","express","file","first","fit","follow","function","gt","gt;&gt","hash","head","help","here","hint","hold","human","i/o","ignor","in","index","individu","inform","insid","io","is&quot","java","java.io.bufferedread","java.io.fileread","join","key","keyword","larg","last","lazi","let","lisp","list","macro","make","map","match","memori","mind","name","need","new","next","note","now","nth","number","onto","out","output","pair","pass","playground","previou","probabl","project","project.clj","pull","quot","quot;./project.clj&quot","quot;action.&quot","quot;in&quot","quot;is&quot","quot;macro&quot","quot;project.clj&quot","quot;the&quot","quot;thi","quot;this&quot","quot;threading&quot","rare","read","readabilti","realli","refactor","refer","result","resut","return","rewrit","same","see","seen","select","seri","simpl","simpli","slurp","start","str","string","style","successfulli","sugar","syntact","syntax","terser","text","think","third","this&quot","thread","tidi","togeth","treat","turn","two","typic","up","us","usng","valu","veri","version","want","way","whitespac","whole","wrap","write","written"],"basic-clojure/show-me-the-docs.html":["39;clojure.repl","ad","anoth","appli","argument","avail","awar","better","call","clear","clojur","clojure.repl","code","common","con","core.repl","current","definit","defn","develop","doc","document","documentaiton","editor","evalu","express","featur","foobar","funciton","function","functions&quot","good","here","hint","includ","librari","look","map","meaning","namespac","note","ns","part","place","practic","project","provid","quot;i","refer","repl","requir","see","show","sourc","str","string","switch","syntax","three","too&quot","tool","type","unless","us","user","view","without","wrie","write"],"basic-clojure/java-interop.html":["3.141592653589793","amp","approxim","arg","ask","automat","be","behaviour","build","call","case","central","classnam","classname/staticfield","classname/staticmethod","clear","clojars.org","clojur","convert","data","default","depend","destructur","document","earil","easi","environ","etc","exampl","few","file","find","follow","full","function","get","getproperti","groovi","gt","have","hint","host","i&#39;m","i.","import","includ","inform","instanc","instancefield","instancememb","interoper","interoperatil","itself","java","java.lang","java.lang.system","jrubi","jvm","jvm&quot","jython","languag","leiningen","librari","list","low","map","math/pi","maven","meaning","method","more","name","new","next","note","notic","now","object","on","out","pi","project","project.clj","properti","provid","pull","quot","quot;i","quot;java.version&quot","quot;java.vm.name&quot","quot;latest","quot;playground.version&quot","quot;with","quot;you","repositori","return","run","scala","section","seen","show","simpl","str","string","structur","such","syntax","system&#39;","system/getenv","system/getproperti","those","tool","touppercas","up&quot","upper","us","valu","variabl","veri","version","way","without"],"basic-clojure/more-java-fun.html":["0","0.084","0.391","1","1.2","10","100000","1000000","16777216","2","200","20080916","2010","255","2d","3","3.141592653589793","3007.198","308.045","39;(.indexof","39;(.touppercas","39;(javax.sw","39;(math/ab","39;.&#39","39;[clj","39;in","39;java.awt.event.actionlisten","39;javax.swing.joptionpan","3]&quot","4000000","5","57&quot","8601","a=1","ab","abil","abov","abstract","access","accessor","accident","accord","aclon","act","action","actionlisten","actionperform","ad","add","addactionlisten","addit","adorn","agent","aget","aget/aset","aggreg","alength","algorithm","alias","allow","alon","along","alpha","altern","alway","amap","amp","and/or","anonym","anoth","anyth","api","append","appli","applic","arbitrari","area","areduc","arg","argument","arithmet","ariti","arm","array","aset","aspect","assign","assist","asum","asum(float","attach","attr","automat","avail","avoid","b06","b=2","bananas!&quot","bar","base","basi","basic","bean","becom","befor","below","best","bigdec","bigint","bind","bit","bleed","blue","bluebeard&#39;","bodi","boolean","bootstrap","both","bottleneck","bound","box","brov","buffer","built","button","byte","bytecod","call","can&#39;t","canon","canwrit","capabl","captur","case","cast","caus","cerynian","chain","chapter","char","charact","charat","check","choos","chop","class","class/interface(","classnam","classname/staticfield","classname/staticmethod","classpath","cleaner","clearer","clj","clojars.org","clojur","clojure&#39;","clojure.cor","clojure.java.api","clojure.java.api.clojur","clojure.java.io","clojure.java.io/read","clojure.lang.ifn","clojure.org&#39;","clojure.read(&quot;[1","clojure.var(&quot;clojure.core&quot","clojure’","close","closur","code","coerc","coercion","collect","colorspac","comment","common","compil","complet","connect","consid","consist","construct","constructor","consum","contain","content","context","conveni","convert","correct","correspond","count","cours","creat","creation","critic","custom","cynic","dat","data","date","dec","def","default","defin","definit","defn","depend","deref","deref.invoke(printlength","describ","descript","design","destruct","detail","develop","differ","dimension","direct","directli","distribut","divid","doc","document","doesn&#39;t","don&#39;t","doseq","dot","doto","doubl","dynam","e.g","each","easi","easier","easiest","easili","edges&quot","edn","element","empti","enclosingclass$nestedclass","end","enough","ensur","entireti","environ","equival","error","erymanthian","essenti","etc","evalu","event","everyth","exactli","exampl","except","execut","exist","expand","expans","expect","explor","expr","express","extend","extern","f","facil","fact","fals","far","fast","faster","featur","feel","few","fewer","field","fieldnam","figur","file","file&#39;","filesystem","find","first","fixm","flag","float","flush","fn","follow","foo","foo2","for(int","forc","form","format","format/formatt","format/unpars","formatt","formatters&amp","former","found","frame","frame&quot","frequent","fs","fulli","fun","function","further","gather","gen","gener","get","gethour","getnam","getpath","getproperti","give","given","good","great","green","gt","gui","h","hand","hang","have","head","hello","here","here&#39;","high","higher","hind","hint","hope","host","hotspot","http://clojure.org/java_interop","http://java.awt.color/black|java.awt.color/black","hug","hurt","i.","ident","identifi","idiomat","ifn","immedi","implement","implicit","implicitli","import","improv","inc","inc,dec,&lt;,&lt;=,&gt;,&gt","includ","indexof","indic","infer","init","initi","inner","input/output","inputstream","instanc","instancefield","instancefieldnam","instancememb","instancemethodnam","instanti","instead","int","int/long","integ","integer(&quot;123&quot","intent","interact","interest","interfac","intermedi","interop","involv","io","iso","iter","java","java.awt.color","java.awt.color.icc_colorspace@c94b51","java.awt.point","java.io","java.io.bufferedread","java.io.bufferedwrit","java.io.fil","java.io.fileread","java.io.filewrit","java.io.reader.&quot","java.io.stringread","java.io.stringwrit","java.lang","java.lang.math/pi","java.nio.fil","java.util.d","java.util.hashmap","java.util.list","javabean","jbutton","jetti","jframe","job","joda","joptionpane/information_messag","joptionpane/showmessagedialog","jpanel","jvm","key","kill","know","known","languag","latest","latter","learn","leav","left","len","len2","length","length&quot","let","let/loop","let’","librari","likewis","limit","line","lion","list","list&quot","listen","liter","littl","load","local","locat","long","look","lookup","loop","lt","macro","macroexpand","macroexpans","make","mani","manipul","map","map.invoke(inc","match","math","math/pi","me!&quot","mean","member","memfn","messag","messi","metadata","method","methods/funct","minesweep","minim","minor","miss","modif","more","msecs&quot","much","multi","multipli","mutabl","mutat","myint","n","name","namespac","nasti","natur","neccessari","necessari","need","negat","nest","never","nevertheless","new","next","nice","nil","non","normal","note","notic","now","nth","num","number","numer","obj","object","of&#39","on","onc","onward","op","open","oper","operand","optim","option","order","origin","otherwis","out","outer","overflow","overload","overrid","packag","panel","param","paramet","pars","particip","particular","pass","path","peopl","per","perform","perhap","permiss","person","pig","place","plu","plus.invoke(1","point","port","possibl","potenti","prefer","present","presum","primit","printlength","println","probabl","process","produc","program","progress","project","project.clj","properti","protect","provid","proxi","public","put","quick","quit","quot","quot;+&quot","quot;/&quot","quot;/tmp/hercul","quot;/users/rich/dev/clojure/build.xml&quot","quot;1.6.0_07","quot;123","quot;123&quot","quot;[j&quot","quot;a&quot","quot;asdf&quot","quot;attempt","quot;b&quot","quot;bi","quot;click","quot;clojure&quot","quot;deref&quot","quot;elaps","quot;ethel&quot","quot;fred&quot","quot;greeting&quot","quot;hello","quot;inc&quot","quot;jar&quot","quot;java.lang.string&quot","quot;java.vm.version&quot","quot;let&#39;","quot;lucy&quot","quot;map&quot","quot;os.name&quot","quot;print","quot;require&quot","quot;unchecked&quot","quot;y&quot","r","rdr","re","read","read/write/execut","reader","real&quot","realli","rebind","recommend","recur","red","reduc","ref","refer","reflect","regular","reifi","releas","reli","remaind","rememb","repeat","repres","represent","requir","require.invoke(clojure.read(&quot;clojure.set&quot","reserv","resolv","resourc","resource&#39;","respect","rest","restart","result","ret","return","revis","rework","rgb","rid","right","rope","rout","run","runtim","rush","s","safe","same","save","scope","second","section","see","seem","seesaw","semant","separ","seq","seri","server","set","setcontentpan","setsiz","setvis","short","show","shown","silent","similarli","simpl","simplest","singl","slurp","snake","socket","solv","someon","someth","sometim","sophist","sourc","spec","special","specif","speed","spit","src/xml.clj","start","static","staticfield","staticfieldnam","staticmethod","str","string","stringread","stringwrit","struct","subtract","success","such","summari","super","superclass","suppli","support","sure","svn","swap","swing","symbol","synerg","syntax","system","system/getproperti","tag","take","taken","talk","target","techniqu","test","there&#39;","thereupon","thing","thing&quot","think","thread","thrown","time","time.cor","time.format","time/now","tip","todo","togeth","tool","top","tostr","touppercas","track","trail","transpar","treat","tree","tri","true","truncat","turn","tusks&quot","two","type","typic","uncheck","understand","unless","unneed","unpars","unsaf","unsupportedoperationexcept","until","up","upon","uri","url","us","user/foo","user/hint","user=&gt","usual","utc","util","utmost","valid","valu","var","var&#39;","variabl","varieti","vector","veri","version","via","void","want","warn","way","webapp","well","whatev","whether","widget","within","without","won&#39;t","work","workshop","world!&quot","worth","wrapper","write","writer","written","x","xml","xml/element","xml/pars","xs","xs.length","xs[i","y","yield","you&#39;ll","you&#39;r","you&#39;v","yourself"],"basic-clojure/quick-look-at-types.html":["1","1.1","10","2","22/7","3","4","5","b","be","befor","byte","cant","check","class","clojur","clojurescript","code","common","core.typ","differ","discov","dynam","eg","fals","function","go","hint","host","java","javascript","know","languag","librari","list","live","look","lurk","manag","mention","net","nil","note","on","platform","quick","quot;&quot","rang","run","someth","static","str","system","take","time","true","two","type","underneath","us","via","want","without","work"],"basic-clojure/strings.html":["action","actual","api","approach","avoid","between","call","case","chang","clojur","code","common","complex","consol","creat","data","debug","decis","default","design","develop","differ","doc","easi","effect","evalu","express","expression&quot","fast","feedback","form","function","getnam","happen","help","hint","i.","immut","implement","indexof","instead","interop","interpos","java","java.lang.str","join","keep","leav","less","look","make","method","methodnam","money&quot","more","need","nil","note","object","output","possibl","println","properti","quot","quot;$&quot","quot;be&quot","quot;close&quot","quot;developers&quot","quot;devoxx","quot;hackthetow","quot;hello","quot;hello&quot","quot;i&quot","quot;like&quot","quot;show","quot;to&quot","quot;together&quot","quot;welcome&quot","quot;wher","realis","regex","repl","return","return&quot","same","see","sens","side","softwar","someth","space","state","statement","str","string","string&quot","structur","taken","think","togeth","touppercas","uk&quot","understand","us","usual","valu","way","what","word","work","write"],"basic-clojure/numbers-maths.html":["1","1.1","10","12","13","18","2","20","22","22/7","2489","3","34","4","459","5","500","6","66","7","7.0","8","9","99","alway","amp","approxim","argument","b","bar","boolean","built","call","class","classic","clojur","common","compar","constrain","cours","data","dec","decim","default","divid","doubl","effici","equal","evalu","exampl","experi","explor","express","fals","fix","fixm","flexibl","float","foo","forc","form","fraction","function","gt","hash","help","ident","immut","inc","inspect","instead","integ","java&#39;","java.lang.boolean","java.lang.doubl","java.lang.long","java.lang.str","keep","languag","larg","list","liter","logic","lt","maintain","mani","manu","map","math","mathemat","max","mean","min","mod","more","natur","need","nil","notat","note","number","object","on","oper","pi","point","pre","preced","precis","predic","proper","quot","quot;&quot","quot;bar&quot","quot;fish&quot","quot;foo&quot","quot;null&quot","rang","ratio","relat","rem","repeat","repres","result","return","revers","right","same","section","see","set","show","simpl","simpli","specifi","split","str","string","structur","tabl","take","those","tri","true","truethi","truthi","type","typic","unambigu","unlik","us","valu","variabl","variad","vector","veri","want","whole","write","ye","zero"],"basic-clojure/ratios.html":["12","14","16","2","22","22/7","3","4","7","7.0","approxim","becom","calcul","class","clojur","coerc","creat","decim","divid","divis","doubl","eg","ensur","evalu","everyth","exampl","explor","float","further","greater","hold","integ","known","lazi","manag","mathemat","more","need","note","number","on","onc","particular","pi","point","potenti","precis","ratio","requir","result","return","rough","save","see","specif","time","touch","type","until","valu"],"basic-clojure/assigning-names.html":["2","2.54","3","5","amount","arithmet","ask","assign","averag","back","bonu","call","centimet","clojur","convert","def","divid","far","feet","find","follow","fruit","give","hard","height","inch","last","lastli","learnt","line","look","mango","metric/imperi","mod","more","name","near","need","note","number","orang","over","part","peopl","program","quot","refer","remaind","rememb","same","see","separ","simpl","symbol","syntax","take","themselv","tri","two","type","us","valu","veri","way","whole","write","x","y"],"basic-clojure/defining-functions.html":["1","2","2&quot","4","argument","behaviour","break","call","clojur","code","def","defin","definit","defn","divid","down","element","first","fixm","fn","full","function","funtion","give","given","half","here","list","macro","macroexpand","name","number","onc","out","quot;divid","same","show","simpl","simpler","soon","step","syntax","take","thing","think","two","type","us","way","write"],"basic-clojure/namespace.html":["access","ad","add","alia","along","altern","amp","anoth","anywher","applic","approach","avoid","bad","bottom","call","clojur","clojure.java.io","clojure.java.io/read","code","com.stuartsierra.compon","com.stuartsierra/compon","compojur","compon","compos","config","conflict","contain","current","data","datastructur","defin","definit","defn","defproject","depend","descript","description&quot","develop","directli","duct","duct.middleware.error","enabl","end","environ","error","especi","evalu","everyth","exampl","exclud","express","extern","featur","file","filenam","first","framework","fulli","funciton","function","go","great","help","here","hide","hint","includ","io","io/read","java","keep","keyword","kind","lein","leiningen","librari","limit","line","logic","long","longer","manag","mani","merg","merge.cor","meta","min","multipl","na","name","namespac","namespace.cor","need","new","ns","on","org.clojure/clojur","org.clojure/clojurescript","otherwis","part","path","pleas","practic","project","provid","prudent","qualifi","quot;0.1.0","quot;0.3.0&quot","quot;0.4.4&quot","quot;1.0.1&quot","quot;1.4.0&quot","quot;1.7.0&quot","quot;1.7.122&quot","quot;2.0.0&quot","quot;fixm","quot;http://example.com/fixme&quot","quot;project.clj&quot","read","readabl","reader","reduc","refer","rememb","requir","same","scope","section","see","seen","seper","seq","servic","snapshot&quot","specif","statement","still","structur","system","templat","test","test.config","test.main","test.system","thing","time","top","true","typic","unless","unus","up","url","us","usual","version","web","work","wrap","write"],"basic-clojure/control-flow.html":["1","10","2","2&quot","3","39;[clojure.java","4","4&quot","8","above.&quot","achiev","amp","anoth","appli","atom","automat","better","bigger","both","c","case","case&quot","caus","char","charact","clojur","clojure&#39;","close","cntrl","command","common","cond","condit","condp","consid","control","correct","counter","creat","current","cursor","d","dec","def","defn","discov","doc","done","dorun","doseq","effect","etc","etc/passwd","evalu","even","exampl","experi","express","fals","familiar","first","flow","fn","follow","function","funtion","gain","give","greater","gt","here","here&quot","higher","http://stackoverflow.com/questions/1053926/clojur","inc","input","io","io/input","kept","kind","languag","lazi","level","lighttabl","list","loop","low","mani","map","minimum","more","mutabl","name","non","number","oh&quot","on","open","oper","order","otherwis","out","over","overflow","partial","patter","pick","place","po","posit","press","print","println","prn","process","program","quot;(inc","quot;/etc/passwd&quot","quot;3","quot;cond","quot;creat","quot;higher&quot","quot;lower&quot","quot;non","quot;not","quot;thi","quot;uh","quot;yep!&quot","read","recur","repeatedli","repl","requir","result","return","same","search","second","section","see","seq","sequenc","set","side","simpl","someth","stack","state","stream","stream&quot","string","sure...&quot","swap","syntax","system","take","taken","test","thing","time","token","true","typic","unix","us","usernam","valu","vector","way","window","won&#39;t","x","zero"],"data-structures/":["1","2","3","39","39;(1","4","access","add","array","articl","ask","back","base","behaviour","between","built","call","case","categoris","centric","chang","charact","characterist","clojur","collect","common","conceptu","constant","contain","creat","data","dealt","default","defin","depth","differ","discret","distinct","driven","each","element","error","evalu","even","everyth","facil","far","fast","first","follow","four","function","great","group","gt","hash","hint","homoicon","ifn","immut","includ","index","ineffici","infoq","initi","instead","key","languag","link","lisp","list","look","mani","manipul","map","mix","model","more","new","number","on","onc","order","origin","pair","persist","piec","power","practic","process","program","provid","quot","random","read","real","refer","relev","respect","return","run","same","seem","sequenc","sequenti","set","share","similar","stand","string","structur","sugar","syntact","syntax","take","therefor","thought","time","togeth","treat","type","uniform","unqiu","us","valu","variabl","vector","veri","want","way","we&#39;v","whole","work","world"],"data-structures/list.html":["0","0.234","1","1.3","2","22/7","3","3.1415926","39","39;(&quot;cat&quot","39;(1","39;(6","39;(:cat","39;mi","4","5","7","8","8/5","9","access","actual","alway","anoth","argument","barney","call","cat","caus","charact","clojur","code","collect","commnet","common","commonli","con","conj","creat","data","def","defin","definit","directli","discov","dog","duplic","dynam","element","error","evalu","even","everyth","exampl","explor","extens","fail","first","fish","five","fred","function","further","gener","give","includ","index","key","languag","later","line","linear","list","look","lookup","map","mix","more","name","namespac","namespace.cor","namespace.librari","need","new","note","ns","offer","on","out","process","properti","quicker","quot","quot;cat&quot","quot;chips&quot","quot;dog&quot","quot;fish&quot","quot;n&quot","quot;one&quot","quot;rabit&quot","quot;three&quot","quot;two&quot","quot;types&quot","rabit","read","remain","rememb","result","return","sequenti","set","shortcust","shortcut","sometim","special","str","structur","syntax","tell","therefor","thing","time","treat","tri","type","typic","uniqu","unless","up","us","valu","vector","via","want","work"],"data-structures/map.html":["1","2","3","4","42","5","6","7","add","allianc","allow","although","amp","anyth","appli","approach","around","b","balanc","belong","binks&quot","c","call","calls&quot","case","charact","chip","code","collect","common","con","config","convert","creat","cruser&quot","current","data","def","defin","defproject","descructur","destructur","directli","driven","droid","drop","dupic","duplic","easi","easier","element","elsewher","empir","error","evalut","exist","explor","faction","falcon&quot","fans&quot","figher&quot","final","find","first","fish","follow","friday","fried&quot","fullnam","function","further","gener","give","gt","gt;&gt","hash","hold","imperi","includ","indic","individu","inform","jarjar","jedi","kenobi&quot","key","keyword","let","list","littl","luke","macro","made","make","map","minimis","monday","more","name","need","new","note","now","now&quot","number","okay","out","pair","phone","piec","playground","point","project","pull","quit","quot;batt","quot;battered&quot","quot;c3p0&quot","quot;chips&quot","quot;cod&quot","quot;crank","quot;darth","quot;destroyer&quot","quot;fish&quot","quot;fried&quot","quot;im","quot;intergalact","quot;jarjar","quot;key&quot","quot;luk","quot;millenium","quot;obiwan","quot;project.clj&quot","quot;r2d2&quot","quot;target","quot;upset","quot;value&quot","quot;x","rats&quot","read","rebel","refer","repres","return","saturday","ship","sideous&quot","simpli","sith","skill","skywalker&quot","skywarker&quot","slurp","specif","start","starwar","string","structur","successfulli","sunday","swamp","syntax","talk","techniqu","text","themselv","though","thread","throw","thursday","tidi","tuesday","turn","two","up","updat","us","usual","vader","vader&quot","valu","vector","veri","version","want","wednesday","wing","world","wrap"],"data-structures/vector.html":["0","1","10","11/4","15","2","2.4","3","3.1435893","39;(4","4","5","5.0","54.3","56.9","57.1","6","60.2","61.8","63.1","66.4","66.5","68.1","69.2","7","70.2","ad","add","allow","arbitrari","area","array","ask","at","basic","bracket","cat","chang","chips&quot","clojur","collect","common","conj","count","creat","data","day","def","delet","differ","dog","duplic","easi","effect","element","end","exampl","experi","first","fish","friday","from&quot","function","here","high","immut","includ","index","insid","item","join","languag","list","make","mean","more","my&quot","n","name","new","next","note","nth","number","on","oper","out","pi","piec","place","practic","predic","pull","put","question","quot;add","quot;conjugate&quot","quot;fish","quot;fish&quot","quot;oil&quot","quot;potatoes&quot","quot;remov","quot;to","quot;who","rabit","refer","rememb","remov","rest","return","same","separ","sequenti","sever","space","squar","start","str","structur","take","taken","temperatu","temperatur","to&quot","togeth","two","us","vector","verb","written"],"data-structures/set.html":["0","1","2","3","4","5","6","7","8","9","again","b","c","clojur","collect","contain","creat","d","data","defin","directli","duplic","each","element","error","exist","explor","function","happen","hold","key","need","new","notat","note","notic","order","persistend","run","see","set","sort","structur","type","uniqu","unqiu","us","valid","valu"],"using-data-structures/":["0","1","1.6","10","2","203.25","204.50","21.83","21.90","230.66","233.12","29.08","29.12","3","39;(&quot;devoxx","39;(1","39;(3","4","42","5","6","60","7","700","abil","abov","abstract","access","achiev","add","again","allow","although","alway","amp","analog","anoth","anyth","appli","applic","approach","argument","around","array","ask","assign","assoc","associ","attende","auto","avail","avoid","b","back","be","begin","behav","below","bind","binks&quot","blow","bound","built","c","call","calls&quot","cant","case","chang","charact","chri","clojur","clojurey","collect","common","commonli","compani","con","concat","concern","conj","conjoin","contain","content","cours","creat","d","darth","data","datastructur","declar","def","defin","definit","defmacro","design","desir","destructur","detail","dev","develop","devoxx","devoxxfr","devoxxuk","differ","direct","doe&quot","doh&quot","done","dont","dynam","e","each","easi","elel","element","empir","end","especi","essenti","ethel","evalu","even","event","evil","exampl","expect","fals","fans&quot","fett&quot","filter","first","fixm","follow","ford","form","france&quot","fred","function","gener","give","go","gt","hackthetow","hand","help","here","hint","hold","immut","impress","inc","infinit","inform","initi","interact","interfac","introduct","involv","item","itself","jarjar","keep","key","keyword","kind","languag","last","lasttrad","lazi","less","let","limit","lisp","list","littl","live","local","logic","look","lot","luci","luke","m","macro","map","match","mater","mean","memori","metadata","method","mix","moment","more","mutabl","name","name1","name2","name2(conj","namespac","namespace&quot","need","new","next","note","now","nth","number","object","on","onc","open","orient","origin","out","over","pair","paper","paramet","part","pattern","person","phone","piec","point","portfolio","posit","possibl","practic","practis","prefix","privat","product","publicli","pull","quickli","quot;aapl&quot","quot;asdjhhfdas&quot","quot;boba","quot;changed&quot","quot;conference&quot","quot;crank","quot;crm&quot","quot;darth","quot;devoxx","quot;devoxx&quot","quot;frog&quot","quot;hack","quot;hackday&quot","quot;http://hackthetower.co.uk&quot","quot;http://jaxlondon.co.uk&quot","quot;jam","quot;jan","quot;jarjar","quot;lazy&quot","quot;luk","quot;msft&quot","quot;orcl&quot","quot;palpatine&quot","quot;target","quot;thi","quot;upset","rang","rats&quot","re","redefin","redifin","reduc","redund","refer","releas","remain","repl","repres","resolv","rest","result","resultl","return","right","run","same","scope","second","section","see","seem","seen","sensit","seq","sequenc","seri","set","sever","shorter","shown","side","simpl","skill","skywarker&quot","slightli","someth","specif","state","still","stock","str","string","strings2","structr","structur","sugar","suggest","surpris","swamp","symbol","syntax","take","tend","term","thank","therefor","thing","think","though","ticker","togeth","topic","tower&quot","track","treat","tri","trivial","true","type","typic","tyranus&quot","uk&quot","unaffect","unchang","uniqu","unlik","up","updat","url","us","vader&quot","valid","valu","var","vector","via","want","way","whole","without","work","wrap","written","wrong","x","x/a","x1","x2","y/b","y1","y1][x2","y2","z"],"using-data-structures/applying-functions.html":["appli","behaviour","data","element","function","structur"],"using-data-structures/mapping-data-structures.html":["0","1","10","12","126","13","144","15","2","21","238","278","3","32","34","4","440","5","55","6","65","8","801","89","9","allow","anoth","appi","appli","calcul","case","correspond","data","def","defin","each","element","equal","etc","exampl","fibonacci","fibonnacci","first","function","gener","go","gt","here","integ","last","let","look","map","more","multipli","number","on","over","pre","rang","return","same","sequenc","set","size","smaller","smallest","structur","take","time","up","us","valu","want","work"],"modifying-data-structures/":["actual","approach","back","chang","clojur","common","consid","contain","data","design","effici","element","everyth","exist","function","immut","languag","link","list","make","map","modifi","new","secion","see","set","share","structur","though","thought","vector","wait","want","work","ye"],"modifying-data-structures/lists.html":["1","2","3","39;(&quot;and&quot","39;(1","4","5","abov","ad","add","affect","again","ass","assign","befor","chang","con","conj","contain","creat","data","def","defin","definit","detail","differ","doc","each","element","evalu","exist","expect","extra","front","function","give","keep","let","link","list","move","name","new","number","on","origin","point","quot;chips&quot","quot;fish&quot","re","reassign","result","return","see","simpl","structur","that","time","two","unchang","us","vector","want","work"],"modifying-data-structures/maps.html":["1","2","3","4","alphabet","assoc","b","c","d","def","map","soup"],"modifying-data-structures/vectors.html":["vector"],"modifying-data-structures/sets.html":["set"],"defining-behaviour-with-functions/":["basic","behaviour","better","clojur","common","compris","data","datastructur","defe","defin","design","funcitions&quot","function","mani","method","more","on","process","quot;algorithms&quot","quot;it","say","structur","those"],"defining-behaviour-with-functions/syntax.html":["alreadi","assign","def","defin","done","fn","function","give","name","same","seen","syntax","us","valu"],"defining-behaviour-with-functions/calling-functions.html":["1","2","3","amp","argument","argument1","argument2","argument3","arguments&quot","ariti","assign","below","call","clojur","defin","defn","describ","differ","element","exampl","first","fix","function","list","match","more","multi","name","number","on","only&quot","polymorph","quot;i","return","simpl","singl","str","string&quot","take","term","tripl","us","used&quot","variabl"],"defining-behaviour-with-functions/examples.html":["exampl"],"defining-behaviour-with-functions/parameters.html":["paramet"],"defining-behaviour-with-functions/using-functions-over-data-structures.html":["data","function","over","structur","us"],"defining-functions/":["defin","fuction"],"defining-functions/let-local-values.html":["arithmet","better","confirm","fixm","local","prim","type","valu","variabl"],"control-flow/":["control","flow"],"control-flow/if.html":[],"control-flow/cond.html":["cond"],"control-flow/when.html":[],"local-assignement/":["assign","local"],"simple-project/":["annual","approxim","avail","branch","calcul","checkout","clojur","clone","code","code.git","combin","command","commit","complet","creat","daili","develop","devoxx","each","editor","eg","emac","equival","etc","featur","follow","git","github","given","hourli","https://github.com/jr0cket/devoxx","increment","leiningen","lighttabl","list","master","merg","monthli","name","need","new","perminat","prefer","project","rate","repl","repositori","salari","section","see","seper","show","simpl","start","sublimetext","switch","type","unfold","up","us","valu","weekli","wish"],"simple-project/create-project.html":["_","add","alreadi","altern","automat","back","calcul","call","case","chang","clojur","clone","code","command","commit","contain","control","convent","creat","default","directori","editor","even","experi","file","follow","freeli","git","github","go","good","here","hint","idea","init","instead","java","kebab","languag","lein","leing","leiningen","look","m","manag","minu","name","new","note","option","output","prefer","project","project.clj","put","quot;clojur","root","run","runtim","salari","shish","similar","skip","specifi","step","structur","symbol","templat","template&quot","therefor","think","tree","underscor","us","version","view","within"],"simple-project/run-the-repl.html":["1","2","3","6","charact","check","clojur","close","code","command","contain","current","default","directori","enter","environ","etc","evalu","exit","express","follow","gt","hint","key","lein","line","loop","math","namespac","need","note","number","point","press","print","project","prompt","read","repl","repres","result","return","root","run","runtim","simpl","singl","string","symbol","tell","type","user","user=&gt","valu","whole","within","work"],"what-is-functional-programming/":["achiev","address","busi","c","chang","code","complet","complex","compos","composit","data","default","defin","desir","determin","differ","entir","evalu","execut","express","flow","form","function","immut","imper","individu","instruct","java","languag","larger","logic","mathemat","memori","modifi","more","mutabl","nest","next","on","pass","program","quit","repres","result","return","satifi","senc","sequenti","singl","small","smaller","specifi","state","structur","system","task","term","thought","togeth","typic","until","valu","variabl","written"],"thinking-functionally/":["accompani","ask","chat","clojur","cover","entitl","function","get","gitter","john","overview","pleas","practic","present","program","slideshar","stevenson","think","video","youtub"],"thinking-functionally/side-effects.html":["accur","affect","area","be","behaviour","caus","chang","code","complex","creat","current","danger","effect","ensur","execut","far","fulli","function","greater","happen","hidden","iceburg","line","look","order","out","piec","possibl","reason","rest","result","risk","scope","side","situat","someth","specif","state","system","think","two","understand","undeterminist"],"thinking-functionally/pure-functions.html":["1","2","3","30000","34000","39;(5","4","42000","5000","add","affect","allow","anoth","answer","argument","be","bob","both","call","carol","caus","code","collect","complex","consid","def","defin","defn","each","effect","evalu","exampl","explicitli","express","function","global","here","impur","inc","increment","interact","jane","let","line","look","map","more","name","note","number","number1","number2","outsid","part","pass","pay","predict","pull","pure","result","return","salari","side","simpl","someth","specif","staff","still","suggest","system","take","taken","togeth","trivial","two","updat","us","valu","well","without","work","world","write"],"thinking-functionally/impure-functions.html":["1","2","3","39;(1","39;(5","4","5","abov","although","approach","argument","call","case","caus","clear","clojure&quot","collect","comparison","complet","creat","current","date","def","defn","easi","enough","exampl","follow","function","gener","global","import","impur","inc","increment","java.util.d","keep","less","let","librari","make","map","mark","more","name","number","outsid","pass","pure","quot","quot;hack","quot;set","requir","see","seen","side","simpl","str","task","timestamp","understand","undeterminist","us","valu","world"],"thinking-functionally/first-class-functions.html":["1","10","11","2","3","4","40","5","6","7","8","9","add","appli","argument","calcul","call","cant","caus","class","collect","consid","creat","data","error","exclus","express","first","follow","function","gener","given","have","hint","idempot","input","lazi","note","number","output","overal","rang","reduc","result","return","same","second","sequenc","singl","specif","structur","take","total","unfortun","up","us","valu","without","write"],"thinking-functionally/homoiconicity.html":["1","2","3","abov","alway","appear","atom","between","bind","bit","bracket","busi","call","charact","class","clojur","closer","code","colthorp","common","compil","compos","consid","contain","context","core","creat","data","deal","defin","describ","differ","distinguish","don’t","drew","easi","easier","edn","element","enter","essenti","establish","etc","eval","evalu","everyth","exampl","execut","express","extens","fact","first","follow","form","format","four","function","go","hint","homoicon","import","inc","ingredi","integ","interpret","it’","javascript","json","key","keyword","languag","let’","link","lisp","list","liter","logic","look","lot","macro","manipul","map","more","much","muhuk.com","name","normal","notat","number","object","oper","org","particularli","piec","potion","power","produc","program","programm","quit","quot","quot;key&quot","quot;value&quot","re","reader","refer","relationship","repl","repres","return","sequenc","set","signifi","similar","skynet","sound","squar","statement","streams/fil","string","structur","superset","support","symbol","syntax","take","talk","term","think","thought","transfer","transform","two","type","understand","unlik","us","variabl","vector","veri","way","wikipedia","write","written","x"],"thinking-functionally/higher-order-functions.html":["1","10","13","3","7","add","although","alway","argument","calculu","creat","defn","disput","evalu","even","filter","function","higher","lambda","name","note","number","order","possibl","rang","requir","return","state","think","twice","type","us","usual","valu","x"],"thinking-functionally/chaining-functions.html":["1","10","2","3","4","5","abov","amp","becom","bind","brake","break","calcul","call","chain","challeng","clojur","common","complex","develop","discuss","down","each","essenti","evalu","exampl","express","form","function","give","gt","inc","languag","last","lisp","list","map","more","name","next","note","number","occasion","overcom","pars","part","pass","program","quot;a&quot","rang","read","reduc","result","return","te","togeth","valu","work","x"],"thinking-functionally/threading-macros.html":["0","2","action&quot","algorithm","anoth","argument","backward","backwards&quot","basic","call","case","chain","classic","clearli","clojur","clojure.string/low","code","come","comma","construct","content","contriv","convert","creat","denot","each","evalu","evalut","exampl","express","file","final","first","fit","follow","function","gt","gt;&gt","head","hello","help","here","hint","human","ignor","index","individu","insid","is&quot","join","last","let","lisp","list","lower","macro","make","match","mind","new","next","note","nth","onto","out","output","pass","probabl","project.clj","quot","quot;./project.clj&quot","quot;action.&quot","quot;hello","quot;hello&quot","quot;in&quot","quot;is&quot","quot;macro&quot","quot;project.clj&quot","quot;the&quot","quot;thi","quot;this&quot","quot;threading&quot","rare","read","readabilti","realli","refactor","result","resut","return","rewrit","same","seen","select","seri","simpl","simpli","slurp","start","str","string","style","syntax","terser","text","think","third","this&quot","thread","togeth","treat","typic","us","usng","valu","veri","way","whitespac","world&quot","write","written"],"thinking-functionally/example-hitchhikers-guide.html":["9|&#39;]+&quot","algorithm","amp","appropri","approxim","assum","book","buffer","c","calcul","call","case","clojur","clojure.string/low","clojure.string/split","code","collect","common","commonli","concept","connect","consid","content","context","convert","cookbook","copi","count","creat","deal","def","defn","develop","eg","element","emac","english","evalu","exampl","exclud","express","fast","feedback","file","first","frequenc","function","give","gt","gt;&gt","guid","hint","hitchhick","hitchhik","hold","i&quot","i/o","in","individu","io","java","java.io.bufferedread","java.io.fileread","join","keybind","larg","lazi","leav","legal","line","list","lower","macro","main","map","match","memori","misophist","more","note","origin","out","output","p","pair","perfectli","program","pull","quot;,&quot","quot;./hhgttg.txt&quot","quot;[a","quot;common","quot;http://clearwhitelight.org/hitch/hhgttg.txt&quot","quot;http://www.textfixer.com/resources/common","quot;th","re","regular","remain","remov","repl","result","return","revers","see","seper","seq","set","show","slurp","sort","sourc","spacemac","specif","suggest","text","those","thread","understand","url","us","val","valu","veri","whole","word","words.txt&quot","wrap","write","z0","za"],"thinking-functionally/immutable.html":["immut"],"thinking-functionally/copying-collections.html":["1","2","3","4","5","abov","chang","collect","conj","copi","data","discuss","element","equival","funciton","function","immut","inc","increment","map","note","over","return","roughli","run","structur","us","vector"],"thinking-functionally/persistent-data-structures.html":["data","persist","structur"],"thinking-functionally/list-comprehension.html":["0","1","10","2","2)&quot","3","9","add","again","alphabet","amp","appli","b","be","blacklist","c","calcul","capit","charact","clojur","code","collect","combin","comprehens","condit","couldnt","count","creat","differ","distinct","each","easier","english","even","exclud","fals","filter","fn","follow","funciton","function","gener","harder","have","human","iter","kind","langaug","languag","let","letter","list","loop","map","mapcat","match","meet","member","mistakend","model","more","much","multipl","need","nest","note","now","number","o","odd","ommit","order","out","padlock","pars","possibl","predic","prefix","quot;for","rang","read","realli","reason","result","return","same","see","show","someth","str","success","syntax","term","test","ticket","true","tumbler","understand","us","valu","via","within","work","x","ye"],"thinking-functionally/lazy-evaluation.html":["evalu","lazi"],"thinking-functionally/sequences.html":["sequenc"],"thinking-functionally/sequence-abstractions.html":["abstract","sequenc"],"thinking-functionally/functors.html":["1","2","3","4","5","appli","applic","argument","between","categori","collect","commonli","each","eg","element","function","functor","gener","given","homomorph","inc","list","map","mathemat","more","morphism","new","onc","origin","pass","process","put","result","return","simpli","small","string","structur","take","theori","thought","turn","type","unpack","valu","vector","wikipedia"],"thinking-functionally/arity.html":["ariti"],"thinking-functionally/pattern-matching.html":["match","pattern"],"thinking-functionally/polymorphism.html":["ploymorph","polymorph"],"thinking-functionally/recursion.html":["recurs"],"thinking-functionally/recursion-polymorphism.html":["amp","polymorph","recurs"],"thinking-functionally/tail-recursion.html":["recurs","tail"],"thinking-functionally/partial-functions.html":["1","2","3","4","5","6","7","8","9","accept","add","advantag","although","amp","anonym","anoth","appli","applic","arg","argument","ariti","automat","avoid","back","behavior","call","chain","charact","clojur","clojure.lang.arityexcept","collect","common","concepts/sum","context","curri","def","defin","defn","domain","each","element","enabl","equival","evalu","exampl","except","f","feed","fewer","final","first","fix","flexibl","function","g","get","give","gt","haskel","have","help","human","humans}(http://andrewberls.com/blog/post/parti","instead","involv","join","length","let","lot","map","mean","more","multipl","name","need","new","number","number1","number2","on","over","partial","partic","pass","process","put","quot","quot;clojure&quot","quot;hello","quot;hello&quot","quot;helloworld&quot","quot;join","quot;sum","quot;world&quot","reduc","refer","reli","requir","rest","result","return","right","semant","sequenc","similar","singl","size","specif","str","string","strings&quot","sum","suppli","support","take","therefor","together&quot","transform","tri","turn","two","us","valu","variabl","vector","way","wherea","work","world&quot","wrap","write","wrong"],"thinking-functionally/anonymous-functions.html":["anonym","function"],"thinking-functionally/naming.html":["name"],"thinking-functionally/global-definitions.html":["definit","global"],"thinking-functionally/local-bindings.html":["bind","local"],"thinking-functionally/private-functions.html":["function","privat"],"thinking-functionally/managing-state-changes.html":["chang","manag","state"],"libraries/":["librari"],"libraries/clojars.html":["clojar"],"libraries/om.html":["om"],"libraries/edn.html":["edn"],"testing/":["test"],"leiningen/":["autom","build","clojur","common","configur","guid","leiningen","project","section","simpl","task","through","tool","us","veri","work"],"leiningen/create-a-project.html":["add","app","call","clojar","clojur","command","comment","content","creat","directori","easi","fixm","follow","includ","insid","keep","later","lein","leiningen","more","name","namespac","new","note","on","open","practic","project","run","screenshot","show","simpli","sourc","structur","templat","termin","tree","us","usual","window"],"leiningen/run-the-repl.html":["1","2","39;[clojure.tools.namespace.repl","39;your.namespac","add","author","away","both","chang","clojur","clojure&#39;","code","command","connect","current","def","directori","each","editor","enter","environ","evalu","exampl","express","extra","file","fixm","follow","https://github.com/clojure/tools.namespac","insid","lein","let","line","made","namespac","new","out","practic","project","prompt","quot","quot;clojur","quot;hello&quot","quot;john","refresh","reload","repl","run","see","simpl","specifi","stevenson&quot","still","str","throw","time","tri","us","world&quot"],"leiningen/profile.html":["1.3","1.3:1.4","1.4","2.1.0","9229","abov","access","activ","ad","add","addit","affect","against","alias","ancient","anoth","anyth","aot","appli","assum","automat","avail","avoid","base","basic","be","befor","behav","below","benchmark","benefit","beta1&quot","bleed","boost","both","build","captur","case","caus","cdt","certain","chang","checkout","class","classpath","client","clj","clojur","clojure.core/merg","clojure.set/union","code","collect","collis","colon","combin","come","comma","common","compil","complet","composit","concaten","configur","connect","consid","control","conveni","copi","cover","creat","creation","custom","data&quot","databas","de","deactiv","debug","declar","default","defer","defin","defproject","dep","depend","descript","detail","dev","develop","differ","directori","disabl","displac","do","document","done","duplic","dure","dynam","each","edit","eg","emac","enabl","environ","error","essenti","establish","etc","etc/leiningen/profiles.clj","eval","even","exampl","except","exclus","execut","expect","explicit","few","file","filenam","final","fixm","follow","form","framework","fulli","function","further","gener","given","group","hadoop","have","here","higher","highest","hint","ie","inaccur","includ","individu","insid","instead","intend","invis","invoc","isol","it&#39;","itself","jar","jvm","key","later","latter","lead","leak","leaki","lein","lein/profiles.clj","lein/profiles.d","leiningen","leiningen/default","level","librari","lifecycl","likewis","link","list","lists/vector","locat","logic","long","look","lower","lowest","main","make","manag","map","map.&quot","mark","mere","merg","metadata","modifi","more","multipl","myproject","name","namespac","necessari","need","neg","never","offici","on","onc","onward","opt","optim","option","order","org.clojure/clojur","org.clojure/tools.nrepl","org.thnetos/cd","out","over","overrid","overridden","overview","part","path","path&quot","perform","person","pick","place","plugin","pom","port","pprint","pprint&quot","pprint/classes&quot","pprint/src&quot","pprint/target&quot","preced","prep","prepend","present","preserv","prevent","print","probabl","problem","process","product","profil","profile&#39;","profiles.clj","project","project&#39;","project.clj","propag","protocol","provid","put","qa","qa,us","quot;/home/phil/src/leiningen/lein","quot;0.0.5&quot","quot;0.1.4&quot","quot;0.2.4&quot","quot;0.3.3&quot","quot;0.5.0","quot;1.1.1&quot","quot;1.2.1&quot","quot;1.2.6.2&quot","quot;1.3.0&quot","quot;1.3.1&quot","quot;1.4.0","quot;1.4.0&quot","quot;1.4.41&quot","quot;1.5.0","quot;a","quot;ci.compil","quot;ci.target","quot;clean&quot","quot;compile&quot","quot;dummi","quot;expectations&quot","quot;https&quot","quot;launch&quot","quot;lein","quot;pretti","quot;priority&quot","quot;prod1.mycorp.com&quot","quot;qa.mycorp.com&quot","quot;run&quot","quot;stage.mycorp.com&quot","quot;swank","quot;target/%s&quot","read","recommend","recurs","refactor","regular","rememb","remov","repl","replac","replace/displac","represent","requir","resourc","rest","result","root","run","same","scope","see","selector","semant","sens","separ","seper","seri","server","set","share","shouldn&#39;t","show","similar","singl","slamhound","slightli","slime&quot","snapshot&quot","someth","sometim","sourc","specif","specifi","speed","stacktrac","stage","still","strip","such","swank","switch","syntax","system","system/getenv","take","target","task","test","tests/develop","text","that&#39;","thing","things.&quot","those","though","through","time","tool","top","treat","trigger","typic","uberjar","unless","unmerg","upon","us","user","valu","variabl","variou","vector","version","via","want","whatev","wide","within","without","written","you&#39;ll","your"],"leiningen/adding-a-dev-profile.html":["ad","dev","profil"],"leiningen/templates.html":["addit","app","applic","avail","built","clojar","commun","compojur","creat","default","https://clojars.org/search?q=lein","leiningen","librari","luminu","mani","note","publish","search","see","sever","specifi","standalon","templat","us"],"leiningen/create-a-template.html":["ad","add","alreadi","app","articl","base","broken","call","chang","check","clojur","colour","command","creat","creation","current","custom","customis","depend","directori","edit","file","first","fixm","fn","follow","further","gone","hack","hint","insid","instal","instruct","investig","lein","lein/profiles.clj","leiningen","line","look","m2","messag","miss","namespac","new","note","now","ns","number","option","optionscustomis","origin","output","plugin","println","profil","project","project.clj","prompt","quot","quot;0.1.1&quot","quot;=&gt","quot;it","quot;you","repl","reslut","root","run","section","see","similar","snapshot","someth","start","str","templat","time!&quot","under","user","version","welcom","well","wide","wonder","wrong"],"leiningen/plugins.html":["ad","add","amp","ancient","annot","auto","autom","automat","bdd/tdd","build","chang","check","checkal","clojur","code","comment","creat","depend","deploy","display","each","edit","exampl","file","framework","git","github","gitifi","give","heroku","includ","instal","interest","lein","lein/profiles.clj","leiningen","lint","look","mainten","mode","more","name","note","outdat","page","plugin","profil","project","rang","repo","run","speckl","speclj","system","task","test","todo&#39;","tool","us","vector","version","whilst","wide","wish"],"explaining-macros.html":["explain","macro"],"work-in-progress.html":["0","1","1.6","2","2014","3","39;(3","4","abstract","acid","add","affect","again","ahead","allow","alway","amp","api","appear","applic","approach","argument","assum","async","atom","automat","avoid","away","bank","bar","baz","beauti","beginn","benefit","better","between","boilerpl","boot","bound","bracket","build","byte","case","centric","chang","charicterist","cider","clarifi","class","classic","clean","clojur","clojure.cor","clojure.core/nth","clojurescript","close","code","collect","common","commun","compar","compil","complex","compon","concept","concis","concurr","cond","connect","consist","constraint","construct","contain","context","contrast","convert","convieninet","copi","core","correct","correspond","creat","cumbersom","custom","daili","data","databas","datatyp","datom","default","defer","defin","describ","design","destructur","develop","doesnt","domain","downtim","dsl","dynam","eas","easier","ec0196871c40","edn","effici","eleg","element","emac","emphas","encapsul","encourag","enforc","etc","evalu","even","everyth","exactli","exampl","excursion.html","execut","exist","experi","explor","express","extens","extrem","facilit","fast","featur","file","first","fixm","fledg","flexibl","foo","form","format","format/edn","former","fp","full","fun","function","functoin","further","garbag","give","given","groovi","gt","hard","haskel","have","heavili","help","higher","host","http://blog.cognitect.com/blog/2014/10/24/analysi","http://blog.jenkster.com/2013/12/a","http://christophermaier.name/blog/2011/07/07/writ","http://cognitect.com","http://eigenhombre.com/clojure/2014/07/05/emac","http://martintrojer.github.io/clojure/2014/10/02/clojur","http://paper.li/ajlopez/1291580164","http://rrees.me/2014/01/16/clojurescript","http://www.clojuresphere.com","http://www.compoundtheory.com/clojur","http://www.pitheringabout.com/?p=693","http://www.purelyfunctional.tv/cor","https://github.com/cemerick/drawbridg","https://github.com/edn","https://github.com/jamesmacaulay/zelkova","https://github.com/jr0cket/kensa","https://github.com/magomimmo/om","https://github.com/r0man/sablono","https://github.com/swannodette/om/wiki","https://github.com/technomancy/mir","https://github.com/technomancy?tab=repositori","https://jr0cket@github.com/jr0cket/clojureprogramming.git","https://medium.com/@hlship/clojur","https://www.youtube.com/watch?v=lxhww1yqpt0","i&#39;ll","i/o","ideal","immut","imper","implement","impur","includ","incred","input","instead","integr","integratoin","interpret","introduc","invok","isol","item","java","javaclassnam","javamethodnam","javascript","jvm","keep","languag","latter","leaner","librari","lisp","list","littl","live","local","lock","longer","loos","machin","macro","make","manag","mani","manipul","map","massiv","memori","metaprogram","mind","minim","minimis","modern","modul","modular","monad","more","much","multithread","mutabl","mutalbl","mutat","need","nest","new","nil","non","notat","notoriusli","offer","on","oper","order","out","output","over","overhead","own","page","parallel","part","perform","persist","piec","possibl","potenti","power","pred","predic","prim","problem","program","progress","provid","pure","puriti","purpos","python","ratio","read","readabl","reader","reading,writ","redefin","refer","referenti","reli","repeat","repetit","repl","replac","repres","request","requir","resourc","rest","result","return","rise","round","rubi","run","runtim","safeti","same","scala","script","see","sequenti","set","sever","share","similar","simpl","simplifi","slower","small","sneak","softwar","someth","sourc","spec","special","specif","specifi","speed","standard","start","state","stateless","statement","stm","streamlin","structur","such","suit","superset","support","survey","symbol","syncronis","syntact","syntax","system","take","task","templat","therefor","thing","those","though","thread","through","time","today","togeth","tonn","toolbox","transact","transfer","transpar","tri","trick","trivial","trueli","truthi","turn","type","unix","until","up","us","valu","vari","vector","veri","version","via","virtual","walkthrough","way","well","whilst","without","work","write","writen","writer","x","y"],"where-next.html":["4clojur","amp","announc","base","blog","bob","book","brave","browser","cheetsheet","clojur","clojure.org","clojurebridg","clojurian","code","collabor","commun","compojur","cookbook","creat","cross","crossclj","curiculum","design","discov","discuss","doc","document","ecosystem","emac","evalu","exercis","faq","featur","file","get","googl","gorilla","graphic","group","hello","help","heroku","koan","leiningen","lighttabl","list","live","london","meta","music","next","offici","overton","perform","plugin","present","project","ration","referenc","repl","run","sampl","start","synthes","through","tool","toolkit","tutori","uncl","webapp","workshop","world","x/ignit"],"reference/":["refer"],"reference/basic-syntax.html":["0","1","1.2e","1/3","11","123","2","3","39","39;&quot;foo&quot","39;(1","39;(inc","39;(nil","39;123","39;inc","4","47","5","7","absenc","absent","act","action","adject","adverb","anoth","anyth","aphyr","aren’t","back","basi","basic","becom","befor","best","boolean","c","calculu","call","came","case","chunk","claus","clj=&gt","clojur","code","combin","compos","compris","comput","concept","construct","contain","core","differ","distinct","do","dog","doubl","each","element","empti","english","enter","entir","escap","evalu","even","exactli","exist","explicit","express","expression’","fact","fals","final","first","follow","form","found","fourth","friend","grammar","haskel","here–that","hi","hit","hous","idea","inc","increment","inc–short","inform","ink","innermost","instanc","intern","interpret","involv","itself","it’","javascript","key","kind","know","label","lambda","languag","left","let’","lindsay","lisp","list","logic","look","make","mean","michel","mind","modifi","more","mother","multipl","name","need","nest","new","nil","note","noth","noun","number","numer","object","obtain","on","origin","outer","pair","paper","parenthes","part","point","pole","pound","process","program","provoc","quot","quot;foo&quot","quot;hello","quot;hi","quot;hi&quot","reader","refer","rememb","remov","repres","result","return","right","rubi","run","same","second","sentenc","signifi","simpl","simpler","simplest","simpli","singl","someth","special","specif","start","state","statement","still","stood","street","string","structur","subject","substitut","surround","symbol","symbol’","syntax","system","take","talk","text","that’","theoret","there!&quot","there’","thing","think","three","togeth","took","transform","tree","tree–which","tri","true","two","type","unchang","unlik","up","user=&gt","valu","verb","walk","want","way","we’r","whether","without","word","world&quot","write","ye","yield","zero"],"reference/naming.html":["name"],"reference/naming-conventions.html":["anoth","case","clj","clojur","clojure.cor","contain","convent","convert","creat","display","empti","exampl","factori","format","function","gt;html","gt;record","kebab","list","map","md","more","name","new","null","on","parser","posit","predic","record","string","take","time","type","valu","word"],"reference/functions.html":["0","1","1.0","1/2","10","1453","186","2","3","3109","39;&quot","39;add","39;clojure.core/inc","39;inc","39;launch","39;type","39;unchecked_add","39;user/add","39;user/astronaut","39;user/cat","39;user/half","39;user/varg","39bda9b9","4","5","6","8","accept","access","actual","ad","add","addit","address","afn.java:437","ah","aha","align","allow","altern","amp","anoth","answer","anyth","anyway","apart","appli","arg","arglist","argument","ariti","arityexcept","arity–th","arm","around","ask","assembl","associ","assumpt","astronaut","auto","automat","aw","axi","axiom","basic","befor","below","between","bind","bluford&quot","bodi","bottom","bound","break","brittl","broad","burn","burrito","c","call","can’t","care","cast","cat","cats!&quot","cats&quot","cats.&quot","certain","chang","chapter","cheatsheet","check","clariti","class","clj","clojur","clojure.cor","clojure.core$typ","clojure.core/typ","clojure.lang.afn","clojure.lang.afn.throwar","clojure.lang.afunct","clojure.lang.fn","clojure.lang.ifn","clojure.lang.imeta","clojure.lang.iobj","clojure.lang.keyword","clojure.lang.numb","clojure.lang.restfn","clojure.lang.var","clojure/core.clj","clojure’","clojurist","clue","code","column","come","common","compact","compar","compilerexcept","compiling:(no_source_path:0:0","complain","compos","comprehens","comput","confirm","conj","consequ","construct","context","control","cooki","core","correspond","count","craft","creat","danger","decompos","deeper","def","default","defer","defin","definit","defn","delv","depend","describ","design","detail","didn’t","differ","dig","directli","distinct","doc","docstr","document","doesn’t","don&#39;t","done","don’t","doubl","durat","each","earlier","easi","easier","electron","empti","engin","entir","entri","equival","escap","etc","eval","evalu","everyon","everyone–even","everywher","exactli","exist","expand","expect","experi","explain","explor","express","extend","few","file","fill","final","find","first","flow","fn","focu","follow","form","found","friend","full","function","function–i","function’","fundament","further","gate","gener","giant","give","given","global","go","gone","good","great","gt;1","half","hand","handl","happen","hatch","haven’t","help","here","hint","idea","immedi","implement","imposs","inc","includ","incomplet","incorrect","inde","indirect","inform","initi","inlin","inspect","instanc","instead","intermedi","introspect","invoc","invok","isn’t","isol","it.&quot","itself","it’","it’d","i’ll","java","java.io.serializ","java.lang.long","java.lang.object","java.lang.runn","java.lang.runtimeexcept","java.util.compar","java.util.concurrent.cal","javascript","juici","jvm","keep","kind","know","languag","larg","last","later","launch","layer","learn","left","leg","less","let","let’","li","librari","lie","line","lisp","list","logic","long","look","lot","made","make","mandatori","mani","mari","massiv","mayb","mean","meaning","member","memori","meta","metadata","microcod","miss","more","moreov","motiv","much","multipl","mutabl","name","namespac","nari","natur","need","new","newlin","nil","none","none&quot","note","notic","notion","ns","num","number","object","occurr","on","onc","onlin","opaque–i","oper","option","orbit","orbit.&quot","order","organ","otherwis","out","outsid","over","overflow","overrid","paramet","part","particular","particularli","pass","pattern","perform","person","piec","place","plu","point","poppin","possibl","power","previou","problem","proce","program","promot","provid","pure","purpos","pursuit","qualifi","question","quot","quot;1.0&quot","quot;1.2&quot","quot;12","quot;beans&quot","quot;carnitas&quot","quot;cheese&quot","quot;clojure/core.clj&quot","quot;guy","quot;i","quot;joseph","quot;joseph&quot","quot;launch","quot;no_source_path&quot","quot;ok","quot;return","quot;sal","quot;speci","re","read","readi","realli","reason","recombin","recurs","redefin","reduc","reduce1","redund","refer","refus","regist","relationship","reli","remain","remaind","remind","repl","replac","repres","resolv","rest","result","return","review","ride&quot","right","run","safer","same","save","saw","search","second","see","seem","seen","sens","sequenc","seri","set","sever","shape","short","shorthand","silicon","similar","simpler","singl","slurp","smaller","smart","softwar","solv","something)–written","sometim","sort","sound","sourc","space","spacecraft","special","specif","specifi","stage","start","static","stori","str","string","structur","substitut","subtract","suddenli","sum","super","supertyp","support","swath","symbol","system","take","target","task","techniqu","tell","term","that’","themselv","there–or","there’","thin","thing","think","those","though","thought","three","through","throw","thrust","time","together&quot","tool","total","track","transfer","tri","true","turn","twice","two","type","type’","ultim","unabl","unbound","underli","underneath","understand","unexpect","uniqu","univers","unlik","unreal","up","updat","us","user$half","user$varg","user/cat","user/launch","user=&gt","usual","valu","var","varg","variabl","var’","vector","verb","version","want","warn","wasn’t","way","well","well–almost","we’d","we’ll","we’r","we’v","wherea","whole","whose","within","without","work","world","worri","wrap","wrapper","write","write–w","written","wrong","x","y","yet.&quot","you’ll","you’r","zero"],"reference/sequences.html":["0","0.12375594203332863","0.18244875487846746","0.33668691162169784","0.44442397843046755","0.9002678382322784","1","10","100","1000","11","12","13","1335333000","15","17","18","19","1969","2","20","200","25","27","2nd","3","30","35","39","39;(2","39;(3","39;(4","39;(5","39;user/infseq","39;user/numb","3rd","4","40","45","5","50","55","6","60","65","7","70","75","8","80","85","9","90","95","abracadabra","abstract","accept","access","accid","act","action","actual","ad","add","adjust","again","allow","along","alreadi","altern","anoth","anyth","apart","appear","appl","appli","approach","arbitrarili","arcan","argument","around","ask","attempt","aw","away","b","back","backward","base","bat","beauti","begin","behavior","bell","between","bigger","bit","book","both","bottom","bound","branch","break","bring","broke","build","c","call","call–where’","can’t","carri","cars&quot","case","cast","cat","chain","chang","chapter","char","charact","check","choic","chunk","classcastexcept","clearli","clojur","clojure.core/reduc","clojure.lang.numbers.inc","clojure.lang.numbers.op","clojure.lang.persistentvector","clojure.lang.persistentvector.arrayfor","clojure’","close","code","codex","coll","collaps","collect","column","combin","common","complement","complet","complex","complic","comput","con","concat","concret","condit","confirm","conj","connect","consecut","construct","contain","content","correspond","couldn’t","count","crime","crocodil","cut","cycl","c’","datatyp","dec","decid","deep","deepest","deepli","def","default","defer","defin","definit","defn","depend","deriv","dictionari","didn’t","differ","direct","discov","doc","doesn’t","done","don’t","down","drop","each","earli","easier","echo","effects.&quot","elem","element","element–but","emit","empti","end","english","english–but","enough","ensur","entir","erlang&quot","essenti","etc","evalu","even","event","everyth","exampl","execut","expand","exploit","express","extend","extrem","f","fals","faster","fell","few","filter","final","find","finit","first","fix","flatten","flow","fn","fold","follow","forev","form","forward","four","free","frequenc","function","fundament","gave","gener","get","give","given","glue","go","graph","ground","group","gt;&gt","hand","handi","handl","hang","happen","hard","haskell&quot","hasn’t","have","here","hey","hi","hook","http://clojure.org/special_forms#if","huh","idea","imagin","immedi","import","impur","inc","includ","increment","independ","index","indexoutofboundsexcept","indic","induct","infin","infinit","inform","infseq","initi","insert","instanc","instead","integ","interest","interleav","intermedi","interpos","intuit","invoc","isn’t","item","iter","itself","it’","it’d","java.lang.numb","job","join","key","keyword","kind","kiteboards&quot","know","knowledg","known","l","landing&quot","landscap","languag","last","later","lazi","lead","leav","length","let’","level","li","link","lisp","list","list–(rest","littl","long","look","lot","m","macro","mad","make","mani","manuscript","map","mark","match","mathemat","meow","miss","more","move","mrrrow","much","multipl","multipli","mysteri","n","name","need","neg","nest","new","next","nicer","nil","non","normal","noth","notic","now","nth","nullpointerexcept","num","number","numbers.java:110","numbers.java:942","nums)–that’","o","object","odd","oftentim","ok","on","onc","onto","oper","order","orient","otherwis","out","output","over","overlap","pair","palindrome–that","paramet","parameter","pare","part","particular","partit","partner","pass","path","peopl","people–kind","persistentvector.java:107","phrase","piec","pleas","po","point","posit","possibl","pprint","pred","predic","predict","previou","prime","principl","print","problem","process","produc","product","program","put","quick","quit","quot","quot;0","quot;1","quot;1.0&quot","quot;2","quot;abracadabra&quot","quot;acaadabrrab&quot","quot;bell&quot","quot;car&quot","quot;dunn&quot","quot;erlang&quot","quot;floow&quot","quot;haskell&quot","quot;hooks&quot","quot;i&#39;v","quot;kiteboard&quot","quot;lee&quot","quot;li&quot","quot;moon","quot;o&#39;toole&quot","quot;o&quot","quot;return","quot;ruby&quot","quot;s&quot","quot;sarah&quot","quot;sato&quot","quot;train&quot","quot;turing&quot","quot;woolf&quot","quot;y&quot","quot;yo&quot","quot;yoo&quot","quot;yooo&quot","quot;yoooo&quot","quot;zhou&quot","rand","random","rang","reach","read","realiz","realli","reason","recurr","recurs","reduc","reduce–though","reduct","refer","rejoin","rel","relat","relationship","remain","rememb","remov","repeat","repeatedli","rephras","replac","requir","rest","result","return","reveal","revers","rich","riffl","right","right–thi","ruby&quot","run","s","same","save","second","see","seem","seen","select","separ","seq","sequenc","seri","set","shoot","short","shuffl","side","simpli","simplifi","singl","singular","size","skip","sleev","slice","slightli","small","smaller","solut","solv","someth","sort","sound","sourc","spars","speak","special","specif","split","stare","start","state","static","step","stick","stop","str","straightforward","stream","string","structur","stuck","subsequ","success","such","sum","suppli","symmetri","t","tack","take","taken","talk","techniqu","ten","tend","term","test","that’","there&#39;","there’","thing","think","third","those","thought","thousand","three","time","togeth","took","tool","too–they’r","top","trains&quot","transform","treat","tree","tri","trick","true","truthi","turn","twain","two","type","uberfunct","unbound","underli","unreal","until","unwieldi","up","us","user=&gt","usual","val","valid","valu","variou","vector","vehicl","veri","version","w","want","way","well","went","we’d","we’ll","we’r","we’v","wise","without","work","wors","wrap","write","written","x","xs","ye","year","yield","zero","zip","zipper"],"reference/control-flow.html":["control","flow"],"reference/persistent-data-structures.html":["data","persist","structur"],"reference/changing-state.html":["chang","state"],"reference/reader-macros.html":["39","_","allow","anoth","anyon","articl","behaviour","charact","clojur","code","collect","comment","compil","consumpt","default","defin","definit","differ","discard","dispatch","especi","essenc","evalu","express","extend","file","go","hint","ignor","infact","insid","kouphax","languag","list","look","macro","nest","next","nice","out","pars","part","pass","read","reader","refer","result","return","set","someth","specif","start","sugar","syntact","tabl","take","tell","text","thing","think","us","valid","var","weird","wondr"],"reference/core-async.html":["core.async"],"reference/prasmatic-schema.html":["prasmat","schema"],"reference/books.html":["book","clojur"],"lighttable/":["lighttabl"],"lighttable/configure-keyboard-mappings.html":["add","char","configur","editor","editor.delet","editor.kil","editor.lin","emac","k&quot","keybind","keyboard","kill","left","lighttabl","lighttable/user/user.keymap","line","map","need","quot;ctrl","start","suggest","test"],"GLOSSARY.html":["1","2","2,3,4].map","3","4,6,8","40","42","a+b","a,b","aka","amp","appli","applic","argument","argument1","argument2","argument3","arguments&quot","ariti","array","assign","b","behaviour","both","call","categori","chain","chang","comonad","compar","contract","convert","curri","curriedsum","curriedsum(40)(2","defn","delay","determin","differ","each","effect","evalu","evalut","evluat","exectuion","execut","express","f(f(x","f(x","first","fix","function","function(a","function(b","function(n","functor","get","give","greet","greet(&quot;hof&quot","greet.touppercas","gt","guard","hello","henc","higher","hof","idempot","input","invoc","invok","javascript","known","lazi","less","lesser","machan","map","match","math.abs(math.abs(10","math.random","monad","monoid","more","morphism","multi","multipl","n","name","need","number","on","only&quot","order","origin","output","over","paramet","partial","partial(2","polymorph","process","program","pure","puriti","quot;hello","quot;i","quot;yo&quot","rand","randit","randiter.next","random","referenti","replac","return","same","semigroup","setoid","side","simpl","simplest","singl","str","structur","sum","sum.bind(nul","take","transpar","tripl","until","us","used&quot","valu","variabl","while(1&lt;2","without","world","world!&quot","yield","yo"]},"length":125},"tokenStore":{"root":{"0":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0037230081906180195},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.021052631578947368},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.02033271719038817},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.013781512605042017}},".":{"0":{"8":{"4":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"1":{"0":{"5":{"docs":{},".":{"2":{"0":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}},"docs":{}},"docs":{}}},"docs":{}},"2":{"3":{"7":{"5":{"5":{"9":{"4":{"2":{"0":{"3":{"3":{"3":{"2":{"8":{"6":{"3":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"8":{"2":{"4":{"4":{"8":{"7":{"5":{"4":{"8":{"7":{"8":{"4":{"6":{"7":{"4":{"6":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"2":{"3":{"4":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}},"docs":{}},"docs":{}},"3":{"3":{"6":{"6":{"8":{"6":{"9":{"1":{"1":{"6":{"2":{"1":{"6":{"9":{"7":{"8":{"4":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"4":{"4":{"4":{"4":{"2":{"3":{"9":{"7":{"8":{"4":{"3":{"0":{"4":{"6":{"7":{"5":{"5":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"9":{"0":{"0":{"2":{"6":{"7":{"8":{"3":{"8":{"2":{"3":{"2":{"2":{"7":{"8":{"4":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"1":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}},"docs":{}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.025210084033613446},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.015789473684210527},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.050359712230215826},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.023076923076923078},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.03806228373702422},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.009747899159663866}}},"1":{"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02877697841726619},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"/":{"4":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"2":{"3":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"6":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}},"3":{"3":{"5":{"3":{"3":{"3":{"0":{"0":{"0":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},":":{"3":{"3":{"docs":{},":":{"4":{"1":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"4":{"4":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"5":{"3":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"docs":{}},"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}}},"5":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.025210084033613446},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"6":{"7":{"7":{"7":{"2":{"1":{"6":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}}},"7":{"5":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"8":{"6":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"9":{"6":{"9":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.031578947368421054},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.03669724770642202},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.05853658536585366},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.06698564593301436},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.037815126050420166},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.06542056074766354},"using-data-structures/":{"ref":"using-data-structures/","tf":0.02566225165562914},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.06842105263157895},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02092050209205021},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.07913669064748201},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.026865671641791045},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.05190311418685121},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01818181818181818},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.008},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.022181146025878003},"reference/functions.html":{"ref":"reference/functions.html","tf":0.015020219526285385},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.033277310924369745},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},".":{"0":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"1":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"2":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"e":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"3":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}},":":{"1":{"docs":{},".":{"4":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"docs":{}}},"docs":{}}},"4":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}},"6":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"8":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}},"docs":{}},"/":{"2":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}},"3":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"docs":{}}},"2":{"0":{"0":{"8":{"0":{"9":{"1":{"6":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}},"1":{"0":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"3":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}},"4":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"6":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}},"docs":{}},"3":{"docs":{},".":{"2":{"5":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"4":{"docs":{},".":{"5":{"0":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"1":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684}},".":{"8":{"3":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"9":{"0":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"2":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.012195121951219513},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.06481481481481481}},"/":{"7":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}},"docs":{}}},"3":{"0":{"docs":{},".":{"6":{"6":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"3":{"docs":{},".":{"1":{"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"8":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"docs":{}},"4":{"8":{"9":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"docs":{}},"docs":{},".":{"5":{"docs":{},".":{"docs":{},"x":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}},"docs":{}}},"5":{"5":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"7":{"8":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"9":{"docs":{},".":{"0":{"8":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"1":{"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}},"docs":{}}},"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.042105263157894736},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.021834061135371178},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.010554089709762533},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.03669724770642202},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.046341463414634146},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.034482758620689655},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.022653721682847898},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.05263157894736842},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.01680672268907563},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.06542056074766354},"using-data-structures/":{"ref":"using-data-structures/","tf":0.03145695364238411},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.08947368421052632},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.031055900621118012},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02510460251046025},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02877697841726619},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.013745704467353952},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.06228373702422145},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.014545454545454545},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0166358595194085},"reference/functions.html":{"ref":"reference/functions.html","tf":0.01559792027729636},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0373109243697479},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},".":{"1":{"docs":{},".":{"0":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"docs":{}}},"4":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"5":{"4":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}},"docs":{}},"6":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}},".":{"1":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"docs":{}}},"7":{"docs":{},".":{"docs":{},"x":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}},"docs":{}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}},")":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}}}},"n":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},",":{"3":{"docs":{},",":{"4":{"docs":{},"]":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"docs":{}}},"docs":{}}},"3":{"0":{"0":{"0":{"0":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}},"docs":{}},"7":{"docs":{},".":{"1":{"9":{"8":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"8":{"docs":{},".":{"0":{"4":{"5":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"1":{"0":{"9":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"docs":{}},"docs":{}},"2":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"4":{"0":{"0":{"0":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}},"docs":{}},"docs":{}},"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684}}},"5":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"9":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.009569377990430622},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},";":{"1":{"2":{"3":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"docs":{}},"docs":{}},"docs":{},".":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{}},"docs":{}}}},"p":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}},"docs":{}},"docs":{}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}}}}}},"(":{"1":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}},"2":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"3":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"4":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"5":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"6":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}},"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"o":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"w":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"docs":{},"a":{"docs":{},"b":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"o":{"docs":{},"x":{"docs":{},"x":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}}}}}}}}}}}}}}}},":":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"n":{"docs":{},"i":{"docs":{},"l":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"[":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"c":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}}}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},";":{"docs":{},"f":{"docs":{},"o":{"docs":{},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"l":{"docs":{},"a":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"f":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}},"b":{"docs":{},"d":{"docs":{},"a":{"9":{"docs":{},"b":{"9":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"docs":{}}},"docs":{}}}}},"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.021834061135371178},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.03669724770642202},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.03170731707317073},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.016181229773462782},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.04784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.01680672268907563},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.06542056074766354},"using-data-structures/":{"ref":"using-data-structures/","tf":0.024834437086092714},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.05263157894736842},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.031055900621118012},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.03076923076923077},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.04498269896193772},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.02909090909090909},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.018484288354898338},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.03630252100840336},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},".":{"1":{"4":{"1":{"5":{"9":{"2":{"6":{"5":{"3":{"5":{"8":{"9":{"7":{"9":{"3":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"3":{"5":{"8":{"9":{"3":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"]":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"r":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"4":{"0":{"0":{"0":{"0":{"0":{"0":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}},"2":{"0":{"0":{"0":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}},"docs":{}},"docs":{}},"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}},"4":{"0":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"docs":{}},"5":{"9":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"7":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.024390243902439025},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.05263157894736842},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.012605042016806723},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.04672897196261682},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0173841059602649},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.062111801242236024},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.03076923076923077},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.019495798319327733}},".":{"0":{"docs":{"./":{"ref":"./","tf":0.009950248756218905}}},"docs":{}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}},",":{"6":{"docs":{},",":{"8":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{}}},"docs":{}}},"5":{"0":{"0":{"0":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}},"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"4":{"docs":{},".":{"3":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"5":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"6":{"docs":{},".":{"9":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"7":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},".":{"1":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.01707317073170732},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.03361344537815126},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.037383177570093455},"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.031055900621118012},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.06153846153846154},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006932409012131715},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.016134453781512605}},",":{"0":{"0":{"0":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"docs":{}},"docs":{}},"docs":{}},".":{"0":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"6":{"0":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},".":{"2":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"1":{"docs":{},".":{"8":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"3":{"docs":{},".":{"1":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815}}},"docs":{}}},"4":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"5":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"6":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}},".":{"4":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"5":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"8":{"docs":{},".":{"1":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"9":{"docs":{},".":{"2":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.015789473684210527},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.007394957983193277}}},"7":{"0":{"0":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},".":{"2":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"docs":{}}},"5":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.01707317073170732},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.046296296296296294},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.007058823529411765}},".":{"0":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517}}},"docs":{}}},"8":{"0":{"1":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"5":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"6":{"0":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}},"9":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684}}},"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}},"/":{"5":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}},"docs":{}}},"9":{"0":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"2":{"2":{"9":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"docs":{}},"docs":{}},"5":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"9":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005378151260504202}},"|":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"]":{"docs":{},"+":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}}}}}}}},"docs":{}},"docs":{}}}}},"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/recursion-polymorphism.html":{"ref":"thinking-functionally/recursion-polymorphism.html","tf":0.3333333333333333},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01818181818181818},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"where-next.html":{"ref":"where-next.html","tf":0.04065040650406504},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516}}}}}},"a":{"docs":{},"z":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}},"p":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"i":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":5.2},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.03125},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005042016806722689},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"c":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.028846153846153848},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}},"x":{"docs":{},"i":{"docs":{},"m":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"i":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}}},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"r":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"h":{"docs":{},"y":{"docs":{},"r":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}}},"a":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"g":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.01340282948622487},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.025454545454545455},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"1":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}},"2":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}},"3":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.015772870662460567},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.013192612137203167},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004467609828741623},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.13445378151260504},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02510460251046025},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.024054982817869417},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.03125},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.04363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.012709416522241479},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.05791505791505792}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"e":{"docs":{},"a":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0189873417721519},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.058823529411764705},"thinking-functionally/arity.html":{"ref":"thinking-functionally/arity.html","tf":11},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.03088803088803089}}},"h":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091}}}}}},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}},"l":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}},"t":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.009950248756218905}}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"o":{"docs":{},"m":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.005089058524173028},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.03225806451612903}}}}}}},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}},"o":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}},"o":{"docs":{},"w":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"i":{"docs":{},"a":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"g":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.14285714285714285},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}}}}},"n":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}},"a":{"docs":{},"y":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"o":{"docs":{},"n":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}},"o":{"docs":{},"g":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"n":{"docs":{},"y":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"thinking-functionally/anonymous-functions.html":{"ref":"thinking-functionally/anonymous-functions.html","tf":5.5}}}}}},"d":{"docs":{},"/":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}},"o":{"docs":{},"t":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"c":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}}}},"s":{"docs":{},"k":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"s":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}},"o":{"docs":{},"c":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142}},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"u":{"docs":{},"m":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"p":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":5.024193548387097},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"local-assignement/":{"ref":"local-assignement/","tf":5.5},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"s":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"u":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"(":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577}}}}}}}}}},"c":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}},"r":{"docs":{},"d":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005584512285927029},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"o":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"p":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"u":{"docs":{},"r":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}}}},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"i":{"docs":{},"v":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.009478672985781991}}},"o":{"docs":{},"n":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018}}}}}}},"d":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"leiningen/adding-a-dev-profile.html":{"ref":"leiningen/adding-a-dev-profile.html","tf":3.6666666666666665},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"d":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.006622516556291391},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.01764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.03260869565217391},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}},"i":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"v":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"b":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358}}}},"r":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"w":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{},"r":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}},"y":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"m":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}},"a":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955}}}}}}},"+":{"docs":{},"x":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"b":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"i":{"docs":{},"m":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}}},"n":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"4":{"3":{"7":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"/":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"s":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"b":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684}}}}},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"o":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}},"e":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/sequence-abstractions.html":{"ref":"thinking-functionally/sequence-abstractions.html","tf":5.5},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"a":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"=":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{}},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"x":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"o":{"docs":{},"m":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},",":{"docs":{},"b":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"k":{"docs":{},"a":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"b":{"0":{"6":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009105960264900662},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004369747899159664},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.015444015444015444}},"e":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.009950248756218905}}}}},"a":{"docs":{},"v":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"u":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028},"overview/design.html":{"ref":"overview/design.html","tf":0.015772870662460567},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":0.1},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":3.3888888888888884},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"s":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}}}},"a":{"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"c":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"n":{"docs":{},"g":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"b":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.053061224489795916},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/books.html":{"ref":"reference/books.html","tf":5.5}}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0037230081906180195},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"s":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"x":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}},"i":{"docs":{},"l":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"d":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"o":{"docs":{},"m":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"n":{"docs":{},"u":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}}}},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"k":{"docs":{},"e":{"docs":{"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693}},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.07407407407407407},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"w":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"a":{"docs":{},"d":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}},"k":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"n":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"n":{"docs":{},"g":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.058823529411764705}}}}},"g":{"docs":{"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155}}}}}},"s":{"docs":{},"i":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}},"r":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"c":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/":{"ref":"basic-clojure/","tf":5.053571428571429},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":5.007393715341959},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"c":{"docs":{},"k":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571}}}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}}}}}}},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}},"n":{"docs":{},"k":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"s":{"docs":{},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}},"d":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}},"z":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}},"s":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":5.071428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"i":{"docs":{},"n":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/local-bindings.html":{"ref":"thinking-functionally/local-bindings.html","tf":5.5},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00924321201617562}}},"k":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}},"g":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}},"c":{"docs":{},"k":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227}}}},"w":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"g":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"u":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"docs":{}},"docs":{}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495}}}}}}}}}},"=":{"2":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{}},"d":{"docs":{},"d":{"docs":{},"/":{"docs":{},"t":{"docs":{},"d":{"docs":{},"d":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}}}}},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.02631578947368421},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009105960264900662},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.017811704834605598},"overview/features.html":{"ref":"overview/features.html","tf":0.024934383202099737},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"data-structures/":{"ref":"data-structures/","tf":0.017543859649122806},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009933774834437087},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.03636363636363636},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/managing-state-changes.html":{"ref":"thinking-functionally/managing-state-changes.html","tf":3.6666666666666665},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.018666666666666668},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"reference/changing-state.html":{"ref":"reference/changing-state.html","tf":5.5},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"t":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.05048076923076923},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.03125}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":5.023076923076923},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693}}}}}}}},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}}}},"c":{"docs":{},"k":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"a":{"docs":{},"l":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}},"a":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"t":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"o":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}},"i":{"docs":{},"p":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.1044776119402985},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.046296296296296294},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.05194805194805195},"development-environments/":{"ref":"development-environments/","tf":0.10204081632653061},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.06451612903225806},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.05263157894736842},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.07329842931937172},"overview/":{"ref":"overview/","tf":5.043256997455471},"overview/purpose.html":{"ref":"overview/purpose.html","tf":5.0673076923076925},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":5.044776119402985},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.05789473684210526},"overview/design.html":{"ref":"overview/design.html","tf":0.04100946372239748},"overview/repl.html":{"ref":"overview/repl.html","tf":0.06390977443609022},"overview/features.html":{"ref":"overview/features.html","tf":0.04199475065616798},"basic-clojure/":{"ref":"basic-clojure/","tf":5.125},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.048034934497816595},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0158311345646438},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.03076923076923077},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.03015075376884422},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.01154132539091586},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.07339449541284404},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.02843601895734597},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.026829268292682926},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.027777777777777776},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"data-structures/":{"ref":"data-structures/","tf":0.03508771929824561},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.011961722488038277},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.008278145695364239},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.08333333333333333},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/":{"ref":"simple-project/","tf":0.037037037037037035},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.022556390977443608},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.03614457831325301},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.06666666666666667},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.08059701492537313},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.020618556701030927},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.02181818181818182},"leiningen/":{"ref":"leiningen/","tf":0.10526315789473684},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.03866666666666667},"where-next.html":{"ref":"where-next.html","tf":0.12195121951219512},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.015020219526285385},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.052083333333333336},"reference/books.html":{"ref":"reference/books.html","tf":5.5}},"e":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"docs":{}},"docs":{}}}}}},"p":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"/":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"$":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"p":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}}}}}},"f":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},".":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"f":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"f":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385}}}},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"[":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.01639344262295082}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}}}}},"’":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"c":{"docs":{},"l":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}},"docs":{}},"docs":{}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308}}}}}}},"y":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}},"s":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"a":{"docs":{},"r":{"docs":{"libraries/clojars.html":{"ref":"libraries/clojars.html","tf":11},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.058823529411764705}},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}},"s":{"docs":{},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"r":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}},"u":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"u":{"docs":{},"d":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.026200873362445413},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.01340282948622487},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.11009174311926606},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.041463414634146344},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":3.3405275779376495},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577}},"i":{"docs":{},"c":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005956813104988831}},"e":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"t":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"u":{"docs":{},"s":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501}}}}},"j":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}},"=":{"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154}},"l":{"docs":{},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"u":{"docs":{},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.03482587064676617},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.05063291139240506},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":5.103896103896104},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.022900763358778626},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.07142857142857142},"overview/features.html":{"ref":"overview/features.html","tf":0.027559055118110236},"basic-clojure/":{"ref":"basic-clojure/","tf":0.05357142857142857},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.018469656992084433},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.023076923076923078},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"simple-project/":{"ref":"simple-project/","tf":0.027777777777777776},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.03614457831325301},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.08641975308641975},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.03283582089552239},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.020618556701030927},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.02266666666666667},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}},"x":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.02857142857142857},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666}}}}}},"u":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}},"a":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"n":{"docs":{},"d":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.01935483870967742},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/":{"ref":"simple-project/","tf":0.037037037037037035},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.022556390977443608},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.024096385542168676},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}}}}},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}},"i":{"docs":{},"t":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.06040268456375839},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"x":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"i":{"docs":{},"c":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"l":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.01935483870967742},"overview/":{"ref":"overview/","tf":0.015267175572519083},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.07142857142857142},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0037230081906180195},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{},"(":{"docs":{},"n":{"docs":{},"o":{"docs":{},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},":":{"0":{"docs":{},":":{"0":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"o":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"s":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"i":{"docs":{},"t":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}}}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.01990049751243781},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}},"c":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154}}}}}}}},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"e":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":5.010380622837371},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.02422145328719723},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}}},"e":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"d":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}},"n":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.07453416149068323},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.00773109243697479}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}},"u":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}}},"r":{"docs":{},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"i":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"a":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"d":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"control-flow/cond.html":{"ref":"control-flow/cond.html","tf":11},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266}}}}},"i":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"p":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"x":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}},"o":{"docs":{},"l":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":5.009708737864078},"control-flow/":{"ref":"control-flow/","tf":5},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/control-flow.html":{"ref":"reference/control-flow.html","tf":5.5}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"c":{"docs":{},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308}},"u":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"leiningen/":{"ref":"leiningen/","tf":5},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.008530805687203791},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":3.4166666666666665}}}}},"r":{"docs":{},"m":{"docs":{"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"u":{"docs":{},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"p":{"docs":{},"t":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"o":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}}},"o":{"docs":{},"l":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.03225806451612903},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"n":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"t":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":5.044776119402985}}}}}},"j":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}},"p":{"docs":{},"i":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":5.045454545454546},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}},"l":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}},"r":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004705882352941176}},"a":{"docs":{},"b":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"p":{"docs":{},"s":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.07017543859649122},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.01680672268907563},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02092050209205021},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":5.068181818181818},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.07291666666666667},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}},"i":{"docs":{},"s":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.01384083044982699},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"e":{"docs":{},"r":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.02912621359223301}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}},"’":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"c":{"docs":{},"k":{"docs":{},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"r":{"docs":{},"e":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505}}}}},"a":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/core-async.html":{"ref":"reference/core-async.html","tf":11}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}}}},"c":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"o":{"docs":{},"k":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.014035087719298246},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.009615384615384616},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":5.037593984962406},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":5.055555555555555},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":5.064705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}},"i":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.009950248756218905}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}},"f":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"m":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}},"l":{"docs":{},"l":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00781831720029784},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.014354066985645933},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":5.025210084033613},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.006386554621848739},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"–":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"’":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.046296296296296294},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.03076923076923077},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}},"u":{"docs":{"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"c":{"docs":{},"h":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227}}}},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.052083333333333336},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"s":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}}}}},"s":{"docs":{},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.04938271604938271},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"s":{"docs":{},"e":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114}}}}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"n":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"docs":{}},"docs":{}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"t":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547}}},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"p":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"i":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242}}}}},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}}},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"r":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"m":{"docs":{},"e":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.03355704697986577},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}}}}},"i":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":3.355151515151515},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"(":{"4":{"0":{"docs":{},")":{"docs":{},"(":{"2":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{}}}},"docs":{}},"docs":{}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}}},"o":{"docs":{},"r":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"i":{"docs":{},"s":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}}}}}}}},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}},"r":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}},"i":{"docs":{},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"a":{"docs":{},"l":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774}}}}}}}},"r":{"docs":{},"y":{"docs":{},"n":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"s":{"docs":{},"s":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}},"t":{"docs":{},"r":{"docs":{},"l":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028}}}}},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"t":{"docs":{},"i":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}}}},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"n":{"docs":{},"i":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"l":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}},"d":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"’":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"d":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142}},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"a":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.057692307692307696},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.04100946372239748},"overview/repl.html":{"ref":"overview/repl.html","tf":0.041353383458646614},"overview/features.html":{"ref":"overview/features.html","tf":0.031496062992125984},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.012195121951219513},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/":{"ref":"data-structures/","tf":5.066666666666666},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.014354066985645933},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.02100840336134454},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":3.364790286975717},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":0.2},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.03684210526315789},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":3.4969696969696966},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.08333333333333333},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"ref":"defining-behaviour-with-functions/using-functions-over-data-structures.html","tf":2.2},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.050746268656716415},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/persistent-data-structures.html":{"ref":"thinking-functionally/persistent-data-structures.html","tf":3.6666666666666665},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.03333333333333333},"reference/persistent-data-structures.html":{"ref":"reference/persistent-data-structures.html","tf":3.6666666666666665}},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776}}}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0037230081906180195},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.03355704697986577}}},"o":{"docs":{},"m":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"y":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"e":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"v":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.014218009478672985},"leiningen/adding-a-dev-profile.html":{"ref":"leiningen/adding-a-dev-profile.html","tf":3.6666666666666665}},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/":{"ref":"development-environments/","tf":5.061224489795919},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.05235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"i":{"docs":{},"c":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}},"o":{"docs":{},"p":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}},"x":{"docs":{},"x":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}},"f":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"u":{"docs":{},"k":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195}}}}}}}},"p":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608}}}}},"t":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":3.333333333333333},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}},"f":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.04032258064516129},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.02566225165562914},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.07142857142857142},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02092050209205021},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0163265306122449},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.01042654028436019},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"i":{"docs":{},"n":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.022082018927444796},"overview/repl.html":{"ref":"overview/repl.html","tf":0.015037593984962405},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":5.045977011494253},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.009569377990430622},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.05555555555555555},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"defining-functions/":{"ref":"defining-functions/","tf":5.5},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.007582938388625593},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}},"i":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/global-definitions.html":{"ref":"thinking-functionally/global-definitions.html","tf":5.5},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}}}}}},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.012618296529968454},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.04597701149425287},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.05042016806722689},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02510460251046025},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.015444015444015444}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}},"e":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":3.333333333333333}},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":10.006309148264984},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"p":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"u":{"docs":{},"r":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"m":{"docs":{},"o":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}},"e":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}},"v":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"a":{"docs":{},"y":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"i":{"docs":{},"s":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}},"m":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.08333333333333333}}},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"a":{"docs":{},"l":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"e":{"docs":{},"p":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"s":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"l":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}},"y":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}}}}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.007582938388625593},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.045112781954887216},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.05555555555555555},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}},"l":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"i":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218}}},"s":{"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"g":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"o":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"c":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":5.084615384615384},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.025889967637540454},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025},"reference/functions.html":{"ref":"reference/functions.html","tf":0.004043905257076834},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.038461538461538464},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}}},"w":{"docs":{},"n":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"n":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"docs":{}},"docs":{}}},"’":{"docs":{},"t":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"j":{"docs":{},"o":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"docs":{}},"docs":{}}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155}},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"g":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}},"h":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.007874015748031496},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333}}}}}},"u":{"docs":{},"e":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684}}},"c":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.019672131147540985}},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.028037383177570093},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"i":{"docs":{},"c":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"r":{"docs":{},"e":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393}}},"a":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"r":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}},"p":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}},"e":{"docs":{},"w":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}},"s":{"docs":{},"l":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"e":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}},"a":{"docs":{},"s":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"l":{"docs":{},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"c":{"docs":{},"h":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.041666666666666664},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.007058823529411765},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}},"l":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"c":{"0":{"1":{"9":{"6":{"8":{"7":{"1":{"docs":{},"c":{"4":{"0":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"o":{"docs":{},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512}}}}}},"h":{"docs":{},"o":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"n":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856}},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/":{"ref":"development-environments/","tf":5.061224489795919},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":5.008733624454148},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}}}},"j":{"docs":{},"o":{"docs":{},"y":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"$":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":5.035714285714286},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"r":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.007633587786259542},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0326530612244898},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"–":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"u":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":2.0413533834586466},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.014354066985645933},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.04819277108433735},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.02702702702702703},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/lazy-evaluation.html":{"ref":"thinking-functionally/lazy-evaluation.html","tf":5.5},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.014787430683918669},"reference/functions.html":{"ref":"reference/functions.html","tf":0.009820912767186597},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"e":{"docs":{},"r":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"–":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"t":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.014900662251655629},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"u":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}},"i":{"docs":{},"l":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}},"l":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}},"p":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}},"s":{"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"t":{"docs":{},"u":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005956813104988831}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.024096385542168676},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.023076923076923078},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0166358595194085},"reference/functions.html":{"ref":"reference/functions.html","tf":0.016753321779318313},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005042016806722689},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.03125},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}},"’":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}},"i":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"l":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"explaining-macros.html":{"ref":"explaining-macros.html","tf":5.5},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"r":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}},"r":{"docs":{},"a":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}},"c":{"docs":{},"t":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521}}}}},"e":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.0379746835443038},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":5.038961038961039},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905},"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004095309009679821},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.019417475728155338},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"defining-behaviour-with-functions/examples.html":{"ref":"defining-behaviour-with-functions/examples.html","tf":11},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.03347280334728033},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.026845637583892617},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":3.345578231292517},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.04477611940298507},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}},"o":{"docs":{},"r":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}}},"k":{"docs":{},"i":{"docs":{},"l":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.01791044776119403},"libraries/edn.html":{"ref":"libraries/edn.html","tf":11},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.008}}}},"g":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.03125},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263}}}}},"i":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"t":{"docs":{},"c":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"/":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"d":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}},"l":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}},"y":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":5.111111111111111},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}},"s":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}},"e":{"docs":{},"m":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/":{"ref":"data-structures/","tf":0.021052631578947368},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.01674641148325359},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.028037383177570093},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":0.1},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.02631578947368421},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.041666666666666664},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.022521008403361343}},"–":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"l":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"g":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"c":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"s":{"docs":{},"e":{"docs":{},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}},".":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}},"a":{"docs":{},"l":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.012195121951219513},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"c":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.01310924369747899}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":3.3359580052493434},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"e":{"docs":{},"d":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"t":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774}}}},"w":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}},"t":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}},"l":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"x":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}},"l":{"docs":{},"e":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.07042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":3.380503144654088},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.013192612137203167},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005584512285927029},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.022950819672131147},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.015165876777251185},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.023529411764705882},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"docs":{}},"docs":{}}},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.019672131147540985},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.020761245674740483},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}}}}},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.021108179419525065},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004095309009679821},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":3.347721822541966},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.024054982817869417},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.02588235294117647},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"n":{"docs":{},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"l":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"i":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"g":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"s":{"docs":{},"h":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}},"v":{"docs":{},"e":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}}},"b":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.02631578947368421}}}}}},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":3.3337056341523947},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.017811704834605598},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.028846153846153848},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.04416403785488959},"overview/repl.html":{"ref":"overview/repl.html","tf":0.018796992481203006},"overview/features.html":{"ref":"overview/features.html","tf":0.03280839895013123},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.05660377358490566},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.036939313984168866},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.09230769230769231},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.010796723752792257},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.03317535545023697},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.02926829268292683},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":5.080459770114943},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.036065573770491806},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.02912621359223301},"data-structures/":{"ref":"data-structures/","tf":0.02456140350877193},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.03588516746411483},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.01201923076923077},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.046218487394957986},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.012417218543046357},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":5.2},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":5.031578947368421},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.03636363636363636},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":3.444444444444444},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.2631578947368421},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":5.092436974789916},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"ref":"defining-behaviour-with-functions/using-functions-over-data-structures.html","tf":2.2},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":5.126126126126126},"thinking-functionally/":{"ref":"thinking-functionally/","tf":5.2},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.037037037037037035},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":5.092050209205021},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":5.067114093959732},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":3.3764988009592325},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":3.5197740112994347},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":5.030769230769231},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.048109965635738834},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.024489795918367346},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.045454545454545456},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.02422145328719723},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.0625},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":3.391515151515151},"thinking-functionally/anonymous-functions.html":{"ref":"thinking-functionally/anonymous-functions.html","tf":5.5},"thinking-functionally/private-functions.html":{"ref":"thinking-functionally/private-functions.html","tf":5.5},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.021333333333333333},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.07462686567164178},"reference/functions.html":{"ref":"reference/functions.html","tf":10.034084344309647},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.017142857142857144},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.05405405405405406}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}}}}}},"–":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"’":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"(":{"docs":{},"a":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"b":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"n":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}},"o":{"docs":{},"r":{"docs":{"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":10.052083333333334},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}},"i":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776}}}}}}}}}}}}}},"d":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"defining-functions/":{"ref":"defining-functions/","tf":5.5}}}}}}},"l":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"i":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.028846153846153848}}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.024096385542168676},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.023529411764705882},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},"r":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}}},"r":{"docs":{},"k":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}},"m":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00781831720029784},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.014925373134328358},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.023076923076923078},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005199306759098787},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"a":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}},"/":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"&":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"d":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"e":{"docs":{},"v":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"c":{"docs":{},"u":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"s":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227}}}}},"o":{"2":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"t":{"docs":{},"h":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}},"a":{"docs":{},"v":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}}}}},"s":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"c":{"docs":{},"e":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716}}}}}},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}},"i":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.02195121951219512},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}},"n":{"docs":{},"c":{"docs":{},"i":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}},"i":{"docs":{},"l":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.011961722488038277}}}},"q":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"d":{"docs":{},"g":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}},"a":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"o":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005584512285927029},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517}}}},"w":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":5.009708737864078},"control-flow/":{"ref":"control-flow/","tf":5},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/control-flow.html":{"ref":"reference/control-flow.html","tf":5.5}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"m":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"c":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"d":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}}},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{},"i":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.03225806451612903}}}}},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308}}}}}}}},"n":{"docs":{},"d":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004467609828741623},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263}}},"p":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"(":{"docs":{},"f":{"docs":{},"(":{"docs":{},"x":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"x":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"g":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101}}}}}},"i":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.020942408376963352},"simple-project/":{"ref":"simple-project/","tf":0.046296296296296294},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.03759398496240601},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}},".":{"docs":{},"i":{"docs":{},"m":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266}}}}}}}},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}},"v":{"docs":{},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"o":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"o":{"docs":{},"g":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.014925373134328358},"overview/":{"ref":"overview/","tf":0.002544529262086514},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025}}}},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"n":{"docs":{},"e":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.014925373134328358},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"where-next.html":{"ref":"where-next.html","tf":0.032520325203252036},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}},"n":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"o":{"docs":{},"v":{"docs":{},"i":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}},"p":{"docs":{},"h":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"i":{"docs":{},"c":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"r":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}}}}},"e":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.02702702702702703}},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"h":{"docs":{},"o":{"docs":{},"f":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}}}}}}}}},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"i":{"docs":{},"n":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}},"v":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0158311345646438},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.014147431124348473},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.016181229773462782},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"using-data-structures/":{"ref":"using-data-structures/","tf":0.008278145695364239},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.03684210526315789},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.024054982817869417},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.023166023166023165}},";":{"1":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716}}}}}}}}}},"u":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"d":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":3.3374149659863943},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"l":{"docs":{},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"thinking-functionally/global-definitions.html":{"ref":"thinking-functionally/global-definitions.html","tf":5.5},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"u":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.01935483870967742},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"v":{"docs":{},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"c":{"docs":{},"k":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.01764705882352941}},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"w":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}},"h":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"r":{"docs":{},"d":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"r":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}},"l":{"docs":{},"f":{"docs":{"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.034482758620689655},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005199306759098787}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816}}},"l":{"docs":{},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}}},"r":{"docs":{},"e":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"docs":{}},"docs":{}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}},"o":{"docs":{},"k":{"docs":{},"u":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"d":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774}}}}}},"y":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"n":{"docs":{},"c":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"i":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005956813104988831},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.014218009478672985},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"g":{"docs":{},"h":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815}},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":3.3841807909604515},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"s":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}},"d":{"docs":{},"e":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}}}}},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"c":{"docs":{},"h":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}},"k":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":3.3374149659863943}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"r":{"0":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"o":{"docs":{},"x":{"docs":{},"x":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}},"docs":{}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"/":{"docs":{},"z":{"docs":{},"e":{"docs":{},"l":{"docs":{},"k":{"docs":{},"o":{"docs":{},"v":{"docs":{},"a":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"/":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"b":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{},"g":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"m":{"docs":{},"a":{"docs":{},"g":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"/":{"docs":{},"o":{"docs":{},"m":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}},"r":{"0":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"/":{"docs":{},"s":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}},"docs":{}},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},"/":{"docs":{},"m":{"docs":{},"i":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"?":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"=":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"?":{"docs":{},"q":{"docs":{},"=":{"docs":{},"l":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"r":{"0":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"@":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"j":{"docs":{},"r":{"0":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"docs":{}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"@":{"docs":{},"h":{"docs":{},"l":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"u":{"docs":{},"b":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"?":{"docs":{},"v":{"docs":{},"=":{"docs":{},"l":{"docs":{},"x":{"docs":{},"h":{"docs":{},"w":{"docs":{},"w":{"1":{"docs":{},"y":{"docs":{},"q":{"docs":{},"p":{"docs":{},"t":{"0":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"_":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"s":{"docs":{},"#":{"docs":{},"i":{"docs":{},"f":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"/":{"2":{"0":{"1":{"1":{"docs":{},"/":{"0":{"7":{"docs":{},"/":{"0":{"7":{"docs":{},"/":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"|":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"/":{"1":{"0":{"5":{"3":{"9":{"2":{"6":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"/":{"2":{"0":{"1":{"4":{"docs":{},"/":{"1":{"0":{"docs":{},"/":{"2":{"4":{"docs":{},"/":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"e":{"docs":{},"n":{"docs":{},"k":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"2":{"0":{"1":{"3":{"docs":{},"/":{"1":{"2":{"docs":{},"/":{"docs":{},"a":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"h":{"docs":{},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"2":{"0":{"1":{"4":{"docs":{},"/":{"0":{"7":{"docs":{},"/":{"0":{"5":{"docs":{},"/":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"i":{"docs":{},"o":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"2":{"0":{"1":{"4":{"docs":{},"/":{"1":{"0":{"docs":{},"/":{"0":{"2":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"/":{"docs":{},"a":{"docs":{},"j":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"z":{"docs":{},"/":{"1":{"2":{"9":{"1":{"5":{"8":{"0":{"1":{"6":{"4":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"/":{"2":{"0":{"1":{"4":{"docs":{},"/":{"0":{"1":{"docs":{},"/":{"1":{"6":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"a":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"?":{"docs":{},"p":{"docs":{},"=":{"6":{"9":{"3":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"t":{"docs":{},"v":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"l":{"docs":{},"d":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}},"m":{"docs":{},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":10.017910447761194}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666}}}}}}}}},"p":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"u":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517}}}}},"s":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"o":{"docs":{},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"f":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"u":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"e":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}},"s":{"docs":{},"}":{"docs":{},"(":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"w":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"/":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"/":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"h":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}},"i":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"u":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.011811023622047244},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.03636363636363636},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/immutable.html":{"ref":"thinking-functionally/immutable.html","tf":11},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333}}}}},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0037230081906180195},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"l":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"e":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.02702702702702703},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"s":{"docs":{},"s":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"u":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02510460251046025},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":5.026845637583893},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"n":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.016736401673640166},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.014925373134328358},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.038461538461538464},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.13636363636363635},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.02033271719038817},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.01680672268907563}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.03076923076923077},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.020100502512562814},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.029508196721311476},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.04602510460251046},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0166358595194085},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.00773109243697479}}}}}},"d":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},",":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},",":{"docs":{},"&":{"docs":{},"l":{"docs":{},"t":{"docs":{},";":{"docs":{},",":{"docs":{},"&":{"docs":{},"l":{"docs":{},"t":{"docs":{},";":{"docs":{},"=":{"docs":{},",":{"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{},";":{"docs":{},",":{"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.04032258064516129}}},"–":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}},"a":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"c":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.009307520476545048},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}}}}},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.03870967741935484},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.02631578947368421},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.028169014084507043},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"i":{"docs":{},"d":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"u":{"docs":{},"r":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005956813104988831}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}}}},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"e":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"o":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":5.010050251256281}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"v":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"1":{"2":{"3":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"j":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}}},"l":{"docs":{},"i":{"docs":{},"j":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"d":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"t":{"docs":{"./":{"ref":"./","tf":10},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"d":{"docs":{},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"x":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004369747899159664}},"o":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"u":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}},"c":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571}}}}}},"g":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.014423076923076924},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"q":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}},"i":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"i":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}},"/":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"l":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"c":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"i":{"docs":{},"s":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"g":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}}}},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}}}}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"k":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}},"e":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512}},"e":{"docs":{},"a":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}}}}},"i":{"docs":{},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"c":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"r":{"docs":{},"g":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.029411764705882353},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004705882352941176}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.012939001848428836},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571}}}}},"’":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}}}},"docs":{}},"docs":{}}},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"/":{"docs":{},"o":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"g":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"o":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"m":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}},"l":{"docs":{},"l":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"docs":{}},"docs":{}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}},".":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}},"f":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}},"’":{"docs":{},"l":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/java.html":{"ref":"development-environments/java.html","tf":10.083870967741936},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.02617801047120419},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"overview/features.html":{"ref":"overview/features.html","tf":0.009186351706036745},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":5.045226130653266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":3.3478530652767433},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.02843601895734597},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}},"docs":{}},"docs":{}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}},".":{"docs":{},"i":{"docs":{},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},".":{"docs":{},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}},"t":{"docs":{},"r":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"/":{"docs":{},"p":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"a":{"docs":{},"w":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},".":{"docs":{},"i":{"docs":{},"c":{"docs":{},"c":{"docs":{},"_":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"@":{"docs":{},"c":{"9":{"4":{"docs":{},"b":{"5":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"n":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"r":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.007582938388625593}},"j":{"docs":{},"a":{"docs":{},"r":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"x":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}}}}},"n":{"docs":{},"e":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}}}}},"o":{"docs":{},"h":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}},"b":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"i":{"docs":{},"n":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.02181818181818182},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"d":{"docs":{},"a":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"0":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}}}}}}},"docs":{},"e":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}},"u":{"docs":{},"b":{"docs":{},"i":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}},"v":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.020100502512562814},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343}}}}},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}},"l":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}},"t":{"docs":{},"e":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}},"o":{"docs":{},"a":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}},"u":{"docs":{},"p":{"docs":{},"h":{"docs":{},"a":{"docs":{},"x":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}}}},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"e":{"docs":{},"y":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.015772870662460567},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.02403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.012417218543046357},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/design.html":{"ref":"overview/design.html","tf":0.015772870662460567},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.009615384615384616},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":3.3749999999999996}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}}},"e":{"docs":{},"p":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"n":{"docs":{},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}},"p":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}},"b":{"docs":{},"a":{"docs":{},"b":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716}}}}}},"a":{"docs":{},"f":{"docs":{},"k":{"docs":{},"a":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}}}},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.014925373134328358},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.020356234096692113},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.02631578947368421},"overview/features.html":{"ref":"overview/features.html","tf":0.013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.017543859649122806},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.036036036036036036},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.013333333333333334},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.011090573012939002},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"e":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}}}}},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}},"a":{"docs":{},"g":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}}},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"r":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"r":{"docs":{},"g":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"e":{"docs":{},"r":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009}}}}}},"s":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004705882352941176}},"l":{"docs":{},"i":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954}}}}}}}},"z":{"docs":{},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/lazy-evaluation.html":{"ref":"thinking-functionally/lazy-evaluation.html","tf":5.5},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}},"t":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}}}},"d":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"k":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"i":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"i":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.03508771929824561},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.011374407582938388},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.052941176470588235},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.07608695652173914}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/":{"ref":"development-environments/","tf":0.061224489795918366},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":10.06140350877193},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.031413612565445025},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.03007518796992481},"leiningen/":{"ref":"leiningen/","tf":5.157894736842105},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.058823529411764705},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.043478260869565216},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806}}}}}},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}},"g":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}},"d":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"’":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.04498269896193772}}}}}},"f":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}},"n":{"2":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"r":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"g":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}},"a":{"docs":{},"l":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.027777777777777776},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.023076923076923078},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.02512562814070352},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.019672131147540985},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"libraries/":{"ref":"libraries/","tf":11},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.01990049751243781}},"e":{"docs":{},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/":{"ref":"development-environments/","tf":0.08163265306122448},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":10.098591549295774},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025},"lighttable/":{"ref":"lighttable/","tf":11},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}},"d":{"docs":{},"m":{"docs":{},"g":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}},"/":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"/":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.08333333333333333}},"a":{"docs":{},"r":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}},"u":{"docs":{},"x":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}},"k":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}}},"t":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}},"d":{"docs":{},"s":{"docs":{},"a":{"docs":{},"y":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015}}}}},"s":{"docs":{},"p":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.009186351706036745},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.009333333333333334},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.02631578947368421},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.015037593984962405},"overview/features.html":{"ref":"overview/features.html","tf":0.015748031496062992},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.010554089709762533},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.028070175438596492},"data-structures/list.html":{"ref":"data-structures/list.html","tf":10.119617224880383},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.022350993377483443},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":10.15527950310559},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.023880597014925373},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.046153846153846156},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":5.013840830449827},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.04436229205175601},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.008067226890756302},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}}},"e":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"s":{"docs":{},"/":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}},"–":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"f":{"docs":{},"e":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"v":{"docs":{},"e":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025}}}},"k":{"docs":{},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"g":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"o":{"docs":{},"k":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":3.351681957186544},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"u":{"docs":{},"p":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}}}},"p":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":2.0037593984962405},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004095309009679821},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":5.2727272727272725},"local-assignement/":{"ref":"local-assignement/","tf":5.5},"thinking-functionally/local-bindings.html":{"ref":"thinking-functionally/local-bindings.html","tf":5.5},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"k":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"v":{"docs":{},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}},"g":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}},"i":{"docs":{},"c":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"s":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}},"w":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}},"e":{"docs":{},"r":{"docs":{"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"s":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"a":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805}}},"u":{"docs":{},"r":{"docs":{},"k":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505}}}},"k":{"docs":{},"e":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.03125},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}},"c":{"docs":{},"i":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}}}},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353}}}}}}}},"o":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"e":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"ref":"defining-behaviour-with-functions/using-functions-over-data-structures.html","tf":2.2},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"overview/":{"ref":"overview/","tf":5.002544529262087},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":5}}}}}},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"a":{"docs":{},"p":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.007582938388625593},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}},"a":{"docs":{},"l":{"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":3.3841807909604515},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"a":{"docs":{},"c":{"docs":{},"l":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}},"n":{"docs":{},"g":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774}}}}},"g":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}},"a":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393}},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"/":{"docs":{},"c":{"docs":{},"d":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009933774834437087},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816}},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}}}}}}}}},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}}}},"e":{"docs":{},"n":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.035211267605633804},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888}},"j":{"docs":{},"d":{"docs":{},"k":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.025806451612903226},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}}}}},"r":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004095309009679821},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}}}}},"a":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"–":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"u":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.010554089709762533},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}}},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.043478260869565216},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.05555555555555555},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006932409012131715},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005714285714285714},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.025210084033613446},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}}}}}}},"c":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"t":{"docs":{},"o":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"b":{"docs":{},"j":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.018957345971563982},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{},"y":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"h":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}},"d":{"docs":{},"d":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}}}},"m":{"docs":{"libraries/om.html":{"ref":"libraries/om.html","tf":11}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}},"w":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"p":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"i":{"docs":{},"c":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"l":{"docs":{},"i":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"i":{"docs":{},"p":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"a":{"docs":{},"l":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":3.373333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.015444015444015444}},"(":{"2":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{}}}},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}}},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}},"e":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/parameters.html":{"ref":"defining-behaviour-with-functions/parameters.html","tf":11},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}},"s":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"e":{"docs":{},"r":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}}}}},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}}}}}},"g":{"docs":{},"e":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}},"t":{"docs":{},"h":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.02631578947368421},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.021834061135371178},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.008530805687203791},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pattern-matching.html":{"ref":"thinking-functionally/pattern-matching.html","tf":5.5},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"y":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"p":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"i":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.006050420168067227}}}},"s":{"docs":{},"s":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0158311345646438},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.016736401673640166},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.024054982817869417},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"thinking-functionally/persistent-data-structures.html":{"ref":"thinking-functionally/persistent-data-structures.html","tf":3.6666666666666665},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/persistent-data-structures.html":{"ref":"reference/persistent-data-structures.html","tf":3.6666666666666665}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364}}},"t":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"0":{"7":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.011589403973509934},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"c":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"–":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}},"o":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.01384083044982699},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"i":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"thinking-functionally/polymorphism.html":{"ref":"thinking-functionally/polymorphism.html","tf":10},"thinking-functionally/recursion-polymorphism.html":{"ref":"thinking-functionally/recursion-polymorphism.html","tf":5.333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"e":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.004043905257076834},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"r":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}}},"r":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"f":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}},"m":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.05555555555555555},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}},"s":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"g":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"reference/prasmatic-schema.html":{"ref":"reference/prasmatic-schema.html","tf":5.5}}}}}}},"e":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}},"r":{"docs":{},"v":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"s":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338}}},"u":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"p":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"a":{"docs":{},"r":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}}},"d":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.010666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"i":{"docs":{},"c":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.01384083044982699},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996}}}},"i":{"docs":{},"s":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.027777777777777776}}}}}},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"overview/repl.html":{"ref":"overview/repl.html","tf":0.018796992481203006},"overview/features.html":{"ref":"overview/features.html","tf":0.011811023622047244},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":5.09009009009009},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.1},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.012},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/functions.html":{"ref":"reference/functions.html","tf":0.008665511265164644},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"m":{"docs":{"overview/":{"ref":"overview/","tf":0.007633587786259542},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":5.001333333333333}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.04081632653061224},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":3.389937106918239},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.018469656992084433},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.014423076923076924},"simple-project/":{"ref":"simple-project/","tf":5.055555555555555},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":5.075187969924812},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.024096385542168676},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":5.111111111111111},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.027488151658767772},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.047058823529411764},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}},"docs":{}},"docs":{}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":5.099526066350711},"leiningen/adding-a-dev-profile.html":{"ref":"leiningen/adding-a-dev-profile.html","tf":3.6666666666666665},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608}},"e":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}},"docs":{}},"docs":{}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"l":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.007582938388625593},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816}}}},"o":{"docs":{},"c":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}}},"c":{"docs":{},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"s":{"docs":{},"s":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}}},"s":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}},"t":{"docs":{},"i":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}},"a":{"docs":{},"g":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"x":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.03614457831325301},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.047058823529411764}}}},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"i":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"i":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.01526433358153388}}}},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"n":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":2.0037593984962405},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.018957345971563982},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}},"c":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967},"thinking-functionally/private-functions.html":{"ref":"thinking-functionally/private-functions.html","tf":5.5}}}}}},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}},"n":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353}}}},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"l":{"docs":{},"i":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"l":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"r":{"docs":{},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.007874015748031496},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":5.02928870292887},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"s":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"a":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101}}}}}}},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"y":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}},"c":{"docs":{},"e":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}},"u":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.020942408376963352},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.01764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":10.076086956521738},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}}}}}}}}}}},"o":{"docs":{},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"thinking-functionally/polymorphism.html":{"ref":"thinking-functionally/polymorphism.html","tf":1}}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"i":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815}},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"p":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}}},"c":{"docs":{},"k":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"e":{"docs":{},"c":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.037037037037037035},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":3.3425076452599387},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"e":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.03430079155672823},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.04265402843601896},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.019138755980861243},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.040268456375838924},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.048109965635738834},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.02909090909090909},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.014787430683918669},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}},";":{"0":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},".":{"0":{"docs":{},".":{"5":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"1":{"docs":{},".":{"0":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}},"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}}}},"4":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"2":{"docs":{},".":{"4":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"3":{"docs":{},".":{"0":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"3":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"4":{"docs":{},".":{"4":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"docs":{}}},"5":{"docs":{},".":{"0":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"docs":{}}},"docs":{}}},"1":{"2":{"3":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},".":{"0":{"docs":{},".":{"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"docs":{}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"1":{"docs":{},".":{"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"2":{"docs":{},".":{"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"6":{"docs":{},".":{"2":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"docs":{}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"3":{"docs":{},".":{"0":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}}},"4":{"docs":{},".":{"0":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"4":{"1":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"docs":{}},"docs":{}}},"5":{"docs":{},".":{"0":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"docs":{}}},"6":{"docs":{},".":{"0":{"docs":{},"_":{"0":{"7":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"docs":{}},"docs":{}}},"docs":{}}},"7":{"docs":{},".":{"0":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"1":{"2":{"2":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}}},"2":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},".":{"0":{"docs":{},".":{"0":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"docs":{}}},"docs":{}}},"3":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}},"docs":{},"p":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464}}}}}}}}}}}}}}},"d":{"1":{"docs":{},".":{"docs":{},"m":{"docs":{},"y":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}}}}}}}}}}}},"docs":{}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},".":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"e":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}}}},"c":{"3":{"docs":{},"p":{"0":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}},"docs":{}}},"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273}}}}}}},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114}}},"j":{"docs":{},"u":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}}},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"m":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}}}}}}},"r":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}}},"i":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"i":{"docs":{},"l":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"l":{"docs":{"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}}}}}}},"n":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}},"_":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}},"e":{"docs":{},"t":{"docs":{"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308}}}},"u":{"docs":{},"m":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"m":{"docs":{},"y":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"a":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"r":{"docs":{},"a":{"docs":{},"h":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.009615384615384616},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}}}}}}},"o":{"docs":{},"x":{"docs":{},"x":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}}}}}},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218}}}}}},"o":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"m":{"docs":{},"i":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"n":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}},"i":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.019305019305019305}},"m":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}},"c":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}},"#":{"3":{"9":{"docs":{},";":{"docs":{},"v":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"docs":{}},"docs":{}}},"t":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}},"l":{"docs":{},"u":{"docs":{},"k":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"c":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}},"z":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"docs":{}},"docs":{}}}},"i":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}}}}}}},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"i":{"docs":{},"u":{"docs":{},"m":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}}},"p":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"s":{"docs":{},"f":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"w":{"docs":{},"a":{"docs":{},"n":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}},"k":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}}},"docs":{}},"docs":{}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"r":{"2":{"docs":{},"d":{"2":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}},"docs":{}}},"docs":{},"c":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"b":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}},"x":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}},"b":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}},"a":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805}}}}}}}},"t":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"a":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"g":{"docs":{},"a":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}},"u":{"docs":{},"y":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}},".":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}}}}}}}},"m":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"j":{"docs":{},"a":{"docs":{},"r":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"m":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}},"h":{"docs":{},"n":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}},".":{"docs":{},"/":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}}}}}}}}}}},"h":{"docs":{},"h":{"docs":{},"g":{"docs":{},"t":{"docs":{},"t":{"docs":{},"g":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}}}}}}}}}}}}}},"a":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}}}}},"a":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385}}}}}}},"s":{"docs":{},"d":{"docs":{},"f":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"j":{"docs":{},"h":{"docs":{},"h":{"docs":{},"f":{"docs":{},"d":{"docs":{},"a":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"d":{"docs":{},"d":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}},"a":{"docs":{},"p":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776}}}}}}}}}}}}}}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}}}}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311}}}}}}}}}}},"o":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}},"/":{"docs":{},"%":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}},"e":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}},"o":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"f":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}},"e":{"docs":{},"p":{"docs":{},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114}}}}}}}}}}},"+":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"/":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"t":{"docs":{},"m":{"docs":{},"p":{"docs":{},"/":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"/":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},".":{"docs":{},"x":{"docs":{},"m":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"/":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"/":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"/":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"/":{"docs":{},"l":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"j":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"a":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}},"r":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.009615384615384616}}}}}}}}}},"o":{"docs":{},"g":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0215311004784689},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}}}}}}}}},"x":{"docs":{},"m":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}},"o":{"docs":{},"o":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.014634146341463415},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}},"r":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"w":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.014218009478672985},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"m":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},".":{"docs":{},"u":{"docs":{},"k":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"x":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},".":{"docs":{},"u":{"docs":{},"k":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"/":{"docs":{},"h":{"docs":{},"h":{"docs":{},"g":{"docs":{},"t":{"docs":{},"t":{"docs":{},"g":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"w":{"docs":{},"w":{"docs":{},".":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}},"i":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501}},"g":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}}},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}},"h":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}},"$":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}}}}}}},",":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}}}}},"q":{"docs":{},"a":{"docs":{},".":{"docs":{},"m":{"docs":{},"y":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}}}}}}}},"=":{"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"z":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"a":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},",":{"docs":{},"u":{"docs":{},"s":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.021052631578947368},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.07194244604316546},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.046153846153846156},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.04152249134948097},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005042016806722689}}},"d":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"o":{"docs":{},"m":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}},"i":{"docs":{},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":10.027777777777779},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}},"e":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}},"i":{"docs":{},"n":{"docs":{},"b":{"docs":{},"o":{"docs":{},"w":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}},"r":{"docs":{},"e":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}},"e":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"f":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.01639344262295082},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/":{"ref":"reference/","tf":11},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}},"t":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325}}}}}},"u":{"docs":{},"s":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"p":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/":{"ref":"development-environments/","tf":0.04081632653061224},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/repl.html":{"ref":"overview/repl.html","tf":2.018796992481203},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.07142857142857142},"overview/features.html":{"ref":"overview/features.html","tf":0.007874015748031496},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.03056768558951965},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":5.108433734939759},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":5.078651685393258},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.041176470588235294},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}},"a":{"docs":{},"c":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"e":{"docs":{},"/":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}}},"o":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517}}}}}}}},"r":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}},"h":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.005089058524173028},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"e":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"docs":{}},"docs":{}}}}}}},"l":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.02702702702702703},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.015384615384615385},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.01718213058419244},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.014545454545454545},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.013333333333333334},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"l":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.006622516556291391},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"r":{"docs":{},"d":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.05970149253731343}}}}},"u":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114}},"s":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"thinking-functionally/recursion.html":{"ref":"thinking-functionally/recursion.html","tf":11},"thinking-functionally/recursion-polymorphism.html":{"ref":"thinking-functionally/recursion-polymorphism.html","tf":5.333333333333333},"thinking-functionally/tail-recursion.html":{"ref":"thinking-functionally/tail-recursion.html","tf":5.5},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101}}},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{},"t":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}}}}}}}},"e":{"docs":{},"v":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}},"a":{"docs":{},"s":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.0449438202247191}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":5.018518518518518},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.03278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"j":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"g":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"e":{"docs":{},"x":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.010554089709762533},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.006701414743112435},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.018957345971563982},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.006622516556291391},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.03614457831325301},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.023076923076923078},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006354708261120739},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0067226890756302525},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.015444015444015444}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}}}},"m":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}},"o":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"v":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}},"h":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"l":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}},"l":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.019230769230769232},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"i":{"docs":{},"s":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}},"z":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}},"d":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":2.026315789473684},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":3.4182389937106916},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.021108179419525065},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.019672131147540985},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.024054982817869417},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"e":{"docs":{},"r":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.02631578947368421},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":5.072916666666667}}}},"i":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}},"l":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"/":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}}}}}}}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"u":{"docs":{},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.050359712230215826},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.03076923076923077},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.007394957983193277}},"e":{"1":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"docs":{},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"n":{"docs":{},"d":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}},"u":{"docs":{},"s":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"e":{"docs":{},"l":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}},"a":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"u":{"docs":{},"n":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.03870967741935484},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.03508771929824561},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.07142857142857142},"overview/features.html":{"ref":"overview/features.html","tf":0.013123359580052493},"basic-clojure/":{"ref":"basic-clojure/","tf":0.05357142857142857},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":5.036144578313253},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":5.033707865168539},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.008530805687203791},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.021739130434782608},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"b":{"docs":{},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}},"l":{"docs":{},"e":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203}}}},"s":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"o":{"docs":{},"o":{"docs":{},"m":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}}}},"t":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"g":{"docs":{},"h":{"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}},"l":{"docs":{},"i":{"docs":{"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728}}}}}}},"p":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"s":{"docs":{},"k":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}},"e":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"d":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}},"g":{"docs":{},"b":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"s":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"a":{"docs":{},"f":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"t":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025}}}},"e":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}},"v":{"docs":{},"e":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.037037037037037035},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.016736401673640166}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009}}}}}},"y":{"docs":{"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776}}},"w":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963}}}}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"b":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}},"e":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.03508771929824561},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888}}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}},"h":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{"reference/prasmatic-schema.html":{"ref":"reference/prasmatic-schema.html","tf":5.5}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996}}}},"i":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.0379746835443038},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.02158273381294964},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818}}}}}},"e":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"m":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}},"s":{"docs":{},"a":{"docs":{},"w":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/":{"ref":"development-environments/","tf":0.04081632653061224},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/set.html":{"ref":"data-structures/set.html","tf":10.121495327102803},"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/sets.html":{"ref":"modifying-data-structures/sets.html","tf":11},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.012322274881516588},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"u":{"docs":{},"p":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"v":{"docs":{},"i":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"a":{"docs":{},"m":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"o":{"docs":{},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}},"f":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"a":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"i":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}},"q":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.03684210526315789},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/sequences.html":{"ref":"thinking-functionally/sequences.html","tf":11},"thinking-functionally/sequence-abstractions.html":{"ref":"thinking-functionally/sequence-abstractions.html","tf":5.5},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":10.02453781512605}}},"t":{"docs":{},"i":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"n":{"docs":{},"s":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"i":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"c":{"docs":{"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.014787430683918669}}}}}}}},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.009950248756218905}}}}}}}},"p":{"docs":{},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"o":{"docs":{},"w":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":5.015384615384615},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"r":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}},"s":{"docs":{},"t":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}},"e":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"docs":{}},"docs":{}}}}}}},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"i":{"docs":{},"p":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462}}},"f":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}},"s":{"docs":{},"h":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":5.148148148148148},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"simple-project/":{"ref":"simple-project/","tf":5.018518518518518},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"i":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"f":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"r":{"docs":{"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"l":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"t":{"docs":{},"e":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"h":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678}}}}}},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"z":{"docs":{},"e":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.015706806282722512},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}}},"c":{"docs":{},"r":{"docs":{},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}}}}}},"r":{"docs":{},"s":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"e":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"i":{"docs":{},"f":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.012322274881516588},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}}}}},"a":{"docs":{},"l":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004095309009679821},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}}}},"k":{"docs":{},"l":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}},"l":{"docs":{},"j":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}},"e":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"a":{"docs":{},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.010554089709762533},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.04326923076923077}}}}},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/":{"ref":"overview/","tf":0.017811704834605598},"overview/features.html":{"ref":"overview/features.html","tf":0.011811023622047244},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/managing-state-changes.html":{"ref":"thinking-functionally/managing-state-changes.html","tf":3.6666666666666665},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.013333333333333334},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588},"reference/changing-state.html":{"ref":"reference/changing-state.html","tf":5.5}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}},"i":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353}}}}},"r":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004}}}}}}},"c":{"docs":{},"k":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"p":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"f":{"docs":{},"f":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.012552301255230125}}}},"g":{"docs":{},"e":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775}}}}}}}}}}}}},"p":{"docs":{"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}}}},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.023746701846965697},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.04265402843601896},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.058823529411764705},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.03436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.019305019305019305}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.025236593059936908},"overview/repl.html":{"ref":"overview/repl.html","tf":0.03759398496240601},"overview/features.html":{"ref":"overview/features.html","tf":0.01837270341207349},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/":{"ref":"data-structures/","tf":5.03859649122807},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.009569377990430622},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.012605042016806723},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":3.3540286975717435},"using-data-structures/applying-functions.html":{"ref":"using-data-structures/applying-functions.html","tf":0.2},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.031578947368421054},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":3.4606060606060605},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.08333333333333333},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"ref":"defining-behaviour-with-functions/using-functions-over-data-structures.html","tf":2.2},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.03880597014925373},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/persistent-data-structures.html":{"ref":"thinking-functionally/persistent-data-structures.html","tf":3.6666666666666665},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.010666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"reference/persistent-data-structures.html":{"ref":"reference/persistent-data-structures.html","tf":3.6666666666666665},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"’":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}}}},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}},"l":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}}},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"s":{"docs":{},"/":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"e":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.04716981132075472},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.03430079155672823},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.023076923076923078},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":10.104265402843602},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0074503311258278145},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.048109965635738834},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.025454545454545455},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},";":{"docs":{},"c":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815}}}}}}},"s":{"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364}}}}}}}}}},"p":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"a":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}}}},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976}},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004975124378109453}}}}}}}}}},"m":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"c":{"docs":{},"k":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}}}},"o":{"docs":{},"d":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"p":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"c":{"docs":{},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"u":{"docs":{},"c":{"docs":{},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.020942408376963352},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"l":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"b":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}}}}}},"a":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":3.3359718557607736},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}},"n":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}},"d":{"docs":{},"o":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"l":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"i":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}}},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"y":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}},"h":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"m":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.02909090909090909},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"x":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/syntax.html":{"ref":"overview/syntax.html","tf":10.010526315789473},"overview/repl.html":{"ref":"overview/repl.html","tf":0.018796992481203006},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.04597701149425287},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":10.052631578947368},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":5.00184842883549}}},"c":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":3.333333333333333},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}},"h":{"docs":{},"e":{"docs":{},"s":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.009186351706036745},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.008},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}},"docs":{}},"docs":{}}},"/":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"v":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.010050251256281407},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"l":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/repl.html":{"ref":"overview/repl.html","tf":0.015037593984962405},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.010424422933730455},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.022556390977443608},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.020895522388059702},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.02033271719038817},"reference/functions.html":{"ref":"reference/functions.html","tf":0.016175621028307337}},"’":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"l":{"docs":{},"l":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.021634615384615384},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954}}}}},"y":{"docs":{},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}}}},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}},"s":{"docs":{},"t":{"docs":{"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842}}}}}}},"r":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"d":{"docs":{},"k":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.06923076923076923},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00462160600808781},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"p":{"docs":{"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":0.14285714285714285}}},"n":{"docs":{},"d":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},"–":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"o":{"docs":{},"n":{"docs":{"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218}}}},"l":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"u":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"r":{"docs":{},"t":{"docs":{"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.04672897196261682},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"m":{"docs":{},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}},"c":{"docs":{},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"w":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}},"e":{"docs":{},"r":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"u":{"docs":{},"r":{"docs":{},"p":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.08490566037735849},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.021108179419525065},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.01718213058419244},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0326530612244898},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"a":{"docs":{},"m":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"v":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982}}}}}}}}}}}}}},"w":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"n":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}}}},"a":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}},"m":{"docs":{},"p":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"n":{"docs":{},"k":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"t":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"r":{"docs":{},"c":{"docs":{},"/":{"docs":{},"x":{"docs":{},"m":{"docs":{},"l":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"j":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"v":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.058823529411764705},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006932409012131715},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.011764705882352941},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.015444015444015444}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"l":{"docs":{},"k":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"s":{"docs":{},"k":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.02702702702702703},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.0738255033557047},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.01042654028436019},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}},"b":{"docs":{},"l":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"i":{"docs":{},"l":{"docs":{"thinking-functionally/tail-recursion.html":{"ref":"thinking-functionally/tail-recursion.html","tf":5.5}}}},"c":{"docs":{},"k":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"h":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666}}},"e":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"m":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"v":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"docs":{}},"docs":{}}},"u":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501}}}}}}}},"’":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}}},"–":{"docs":{},"o":{"docs":{},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"w":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":3.3570800351802985},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":5.030927835051546},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667}}},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"e":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}},"t":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}},"g":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"s":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}},"k":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/":{"ref":"thinking-functionally/","tf":5.1},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"r":{"docs":{},"d":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}},"t":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"docs":{}},"docs":{}}},"’":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/":{"ref":"development-environments/","tf":0.04081632653061224},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.017543859649122806},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":10.026178010471204},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"k":{"docs":{},"i":{"docs":{},"t":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}}}}},"k":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"y":{"docs":{},"’":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"p":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"i":{"docs":{},"c":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}},"docs":{}},"docs":{}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.010309278350515464},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263}},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}},"c":{"docs":{},"h":{"docs":{"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"n":{"docs":{},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"e":{"docs":{"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693}},"c":{"docs":{},"h":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}},"n":{"docs":{},"i":{"docs":{},"c":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.02531645569620253},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":5}}},"q":{"docs":{},"u":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358}}}}}}}}},"s":{"docs":{},"t":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.027777777777777776},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.02631578947368421},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"testing/":{"ref":"testing/","tf":11},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.012322274881516588},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.041666666666666664},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":10.205882352941176},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":5.0588235294117645},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"e":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}},"r":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}}}}},"r":{"docs":{},"m":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.018796992481203006},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}},"i":{"docs":{},"n":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888}}}}},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}},"e":{"docs":{},"r":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}},"a":{"docs":{},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"x":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.011278195488721804},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.009242144177449169},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}}}}},"l":{"docs":{},"l":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"d":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.012285927029039464},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":3.4434250764525993},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.014634146341463415},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.027777777777777776},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.004966887417218543},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.023108030040439053},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"’":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"i":{"docs":{},"c":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.00946372239747634},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.036036036036036036},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"u":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"v":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"p":{"docs":{},"l":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"c":{"docs":{},"k":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}}}}},"e":{"docs":{},"r":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"d":{"docs":{},"e":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}}}},"c":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"n":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.046341463414634146},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.011090573012939002},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"–":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.010796723752792257},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.015789473684210527},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.02247191011235955},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154}}}}}}},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}}}}}}}},"p":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"n":{"docs":{},"i":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"d":{"docs":{},"i":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954}}},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"where-next.html":{"ref":"where-next.html","tf":0.016260162601626018}}}}}},"r":{"docs":{},"n":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}}},"s":{"docs":{},"k":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.08996539792387544}}}}}}}},"v":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}},"w":{"docs":{},"o":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004705882352941176}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.05084745762711865},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"overview/":{"ref":"overview/","tf":0.002544529262086514},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.024691358024691357},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}}}},"n":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"l":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"thinking-functionally/side-effects.html":{"ref":"thinking-functionally/side-effects.html","tf":0.012345679012345678},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"i":{"docs":{},"t":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}},"l":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}},"x":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"q":{"docs":{},"u":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547}}}}}},"l":{"docs":{},"d":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"g":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}},"i":{"docs":{},"k":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"n":{"docs":{},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"c":{"docs":{},"k":{"docs":{"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666}}}}}},"s":{"docs":{},"a":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}},"b":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"u":{"docs":{},"s":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}},"q":{"docs":{},"i":{"docs":{},"u":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364}}}}},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"w":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}},"s":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"using-the-workshop/":{"ref":"using-the-workshop/","tf":5.012658227848101},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.01935483870967742},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.020942408376963352},"overview/purpose.html":{"ref":"overview/purpose.html","tf":5.028846153846154},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":5.024875621890548},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.015789473684210527},"overview/design.html":{"ref":"overview/design.html","tf":0.028391167192429023},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.02099737532808399},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.04221635883905013},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.03076923076923077},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.04020100502512563},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.01600893521965748},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.01834862385321101},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.04739336492890995},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.01707317073170732},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.034482758620689655},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.036065573770491806},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.022653721682847898},"data-structures/":{"ref":"data-structures/","tf":0.014035087719298246},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.03110047846889952},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.026442307692307692},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.01680672268907563},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.018691588785046728},"using-data-structures/":{"ref":"using-data-structures/","tf":3.3540286975717435},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.021052631578947368},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.024844720496894408},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"ref":"defining-behaviour-with-functions/using-functions-over-data-structures.html","tf":2.2},"simple-project/":{"ref":"simple-project/","tf":0.037037037037037035},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.045112781954887216},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.041237113402061855},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.044897959183673466},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.01730103806228374},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.014545454545454545},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.022748815165876776},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.03260869565217391},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.024},"reference/functions.html":{"ref":"reference/functions.html","tf":0.010398613518197574},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.009747899159663866},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.03125},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"e":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.028169014084507043},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.01990521327014218},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}}}}}}}},"/":{"docs":{},"f":{"docs":{},"o":{"docs":{},"o":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288}}}}},"l":{"docs":{},"a":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"=":{"docs":{},"&":{"docs":{},"g":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.024096385542168676},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.025878003696857672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0317735413056037},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.03058823529411765}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"$":{"docs":{},"h":{"docs":{},"a":{"docs":{},"l":{"docs":{},"f":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}},"d":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}},"r":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"n":{"docs":{},"g":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}},"p":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/":{"ref":"development-environments/","tf":0.04081632653061224},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}},"o":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597}}}}},"b":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"u":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.01935483870967742}}}}}},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}},"e":{"docs":{},"r":{"docs":{},"j":{"docs":{},"a":{"docs":{},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}},"r":{"docs":{},"l":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0163265306122449}}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"t":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}},"i":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}},"k":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"w":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{},"b":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.009950248756218905},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}}}}},"l":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"–":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"v":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615}}}}},"docs":{}},"docs":{}}},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}}},"e":{"docs":{},"k":{"docs":{},"l":{"docs":{},"i":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}},"’":{"docs":{},"r":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"l":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.004043905257076834},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}}}},"v":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101}}}},"n":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"i":{"docs":{},"r":{"docs":{},"d":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.02112676056338028},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888}}}}},"g":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.005249343832020997},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0037914691943127963},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}}}}},"s":{"docs":{},"h":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}},"e":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.014925373134328358},"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.007177033492822967},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.03636363636363636},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/":{"ref":"leiningen/","tf":0.10526315789473684},"work-in-progress.html":{"ref":"work-in-progress.html","tf":5.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002689075630252101}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.014925373134328358},"using-the-workshop/":{"ref":"using-the-workshop/","tf":5.1265822784810124},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976},"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761}}}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.025974025974025976}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612}}}}}}},"l":{"docs":{},"d":{"docs":{"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.0041841004184100415},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}}}}},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"d":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0653061224489796},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}},"s":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"s":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"n":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}}},"docs":{}},"docs":{}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}}}},"r":{"docs":{"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.012422360248447204},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0036974789915966387}}}},"i":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818}}}},"y":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0034662045060658577},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263}}},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905}}}}}},"k":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}},"r":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"s":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}},"e":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0073937153419593345},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"n":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}},"–":{"docs":{},"w":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"e":{"docs":{"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693}}}},"a":{"docs":{},"p":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}},"h":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"o":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}},"docs":{}},"docs":{}}},"s":{"docs":{},"e":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"l":{"docs":{},"e":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}}}},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"e":{"docs":{},"(":{"1":{"docs":{},"&":{"docs":{},"l":{"docs":{},"t":{"docs":{},";":{"2":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{}}}}}},"docs":{}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488}}}}}}}}},"a":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":5.004366812227074},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}},"e":{"docs":{},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"m":{"2":{"docs":{"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259}}}}}}}}}}}}}},"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.006622516556291391},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.014925373134328358},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.012618296529968454},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":3.3359580052493434},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":3.336684040704889},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0041390728476821195},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006932409012131715},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004369747899159664},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"o":{"docs":{},"v":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"m":{"docs":{"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}},"d":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}},"e":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}},"r":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"l":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495}}}},"i":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":3.351515151515151},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}},"u":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"a":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666}}}}}}},"n":{"docs":{},"t":{"docs":{},"h":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259}}}}}},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227}}}}}},"a":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}},"e":{"docs":{},"y":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"s":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}},"v":{"docs":{},"e":{"docs":{"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}},"i":{"docs":{},"v":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.018518518518518517},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704}}}}},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/pattern-matching.html":{"ref":"thinking-functionally/pattern-matching.html","tf":5.5},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":5.009756097560976},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338}},"/":{"docs":{},"p":{"docs":{},"i":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.012195121951219513},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.010416666666666666},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}},".":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"(":{"1":{"0":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}},"docs":{}},"docs":{}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{"development-environments/":{"ref":"development-environments/","tf":0.02040816326530612},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.009186351706036745},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.009259259259259259},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"thinking-functionally/managing-state-changes.html":{"ref":"thinking-functionally/managing-state-changes.html","tf":3.6666666666666665},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333}}}},"i":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.009950248756218905},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.08333333333333333},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"p":{"docs":{},"u":{"docs":{},"l":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"u":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}},"g":{"docs":{},"o":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.024193548387096774}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}},"a":{"docs":{},"n":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}},"o":{"docs":{},"s":{"docs":{},"x":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.014084507042253521}}}}},"r":{"docs":{},"o":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/design.html":{"ref":"overview/design.html","tf":0.015772870662460567},"overview/repl.html":{"ref":"overview/repl.html","tf":0.015037593984962405},"overview/features.html":{"ref":"overview/features.html","tf":0.007874015748031496},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.021108179419525065},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005584512285927029},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":5.030927835051546},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.012244897959183673},"explaining-macros.html":{"ref":"explaining-macros.html","tf":5.5},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.012},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":5.104166666666667}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.011494252873563218}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.009186351706036745},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0026061057334326137},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.009615384615384616},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.013422818791946308},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.009333333333333334},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}}}},"p":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/design.html":{"ref":"overview/design.html","tf":0.03470031545741325},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.021834061135371178},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.018469656992084433},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0029784065524944155},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":10.057692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.014072847682119206},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":5.0473684210526315},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/maps.html":{"ref":"modifying-data-structures/maps.html","tf":10.071428571428571},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02510460251046025},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.038461538461538464},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.0163265306122449},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.06818181818181818},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.020761245674740483},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.041666666666666664},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.04477611940298507},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.010084033613445379},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":3.3749999999999996},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"v":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"e":{"docs":{},"r":{"docs":{"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517}}}}}},"i":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"n":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}}},"l":{"docs":{},"i":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}}}},"e":{"docs":{},"n":{"docs":{"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304}}}}}}},"l":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}},"x":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024}}},"d":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}},"r":{"docs":{},"k":{"docs":{"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.006711409395973154},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"y":{"docs":{},"b":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"i":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988}},"n":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}},"i":{"docs":{},"m":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"u":{"docs":{},"m":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557}}}},"i":{"docs":{},"s":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}},"o":{"docs":{},"r":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.013100436681222707},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"e":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"u":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203}}}},"c":{"docs":{},"r":{"docs":{},"o":{"docs":{},"s":{"docs":{},"o":{"docs":{},"f":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}}},"s":{"docs":{},"s":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"o":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225}}}}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}}}}}}},"x":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.004784688995215311},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.012939001848428836},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006932409012131715}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"overview/":{"ref":"overview/","tf":0.007633587786259542},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.007073715562174236},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}},"f":{"docs":{},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}},"t":{"docs":{},"a":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.006557377049180328},"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"reference/functions.html":{"ref":"reference/functions.html","tf":0.005199306759098787}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.014147431124348473},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.009478672985781991},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"defining-behaviour-with-functions/":{"ref":"defining-behaviour-with-functions/","tf":0.027777777777777776}},"s":{"docs":{},"/":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996}}}}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"/":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}},"g":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.006635071090047393}},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}}}}}}}}},"!":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941}}}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505}}}}}}},"e":{"docs":{},"t":{"docs":{"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475}}}},"o":{"docs":{},"w":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0013445378151260505}}}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.009708737864077669},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"l":{"docs":{},"b":{"docs":{},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"p":{"docs":{},"l":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.01639344262295082},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.002843601895734597},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.005263157894736842},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}}},"h":{"docs":{},"u":{"docs":{},"k":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.024390243902439025}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"s":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078}}}}}}}}}}},"d":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}}},"r":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}},"n":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0022338049143708115},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0033613445378151263},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"overview/all-bytecode-in-the-end.html":{"ref":"overview/all-bytecode-in-the-end.html","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.004839910647803425},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0030252100840336134},"lighttable/configure-keyboard-mappings.html":{"ref":"lighttable/configure-keyboard-mappings.html","tf":0.041666666666666664},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.011583011583011582}}}},"w":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.003937007874015748},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0033507073715562173},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/":{"ref":"data-structures/","tf":0.017543859649122806},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.01680672268907563},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.005794701986754967},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.05454545454545454},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.024844720496894408},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.022556390977443608},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.06944444444444445},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.011235955056179775},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.047058823529411764},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"e":{"docs":{},"r":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}}}}}}},"t":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505}},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.010471204188481676}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"x":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}}}}}},"x":{"docs":{},"t":{"docs":{"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.013192612137203167},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.012605042016806723},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.020618556701030927},"where-next.html":{"ref":"where-next.html","tf":10.008130081300813},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}}}},"g":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"a":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"s":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.004},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.005545286506469501},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0036968576709796672},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"i":{"docs":{},"c":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"o":{"docs":{},"n":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"e":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"basic-clojure/":{"ref":"basic-clojure/","tf":0.03571428571428571},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0052122114668652275},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.014218009478672985},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.018518518518518517},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.012605042016806723},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.014388489208633094},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.013888888888888888},"leiningen/templates.html":{"ref":"leiningen/templates.html","tf":0.029411764705882353},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}},"a":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.021052631578947368},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"u":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}}}}},"w":{"docs":{"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.006920415224913495},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.002352941176470588}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154}}}}}}}},"n":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"e":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"u":{"docs":{},"n":{"docs":{"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}}},"u":{"docs":{},"m":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0017331022530329288},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004369747899159664}},"b":{"docs":{},"e":{"docs":{},"r":{"1":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.016736401673640166},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273}}},"2":{"docs":{"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.016736401673640166},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273}}},"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616},"overview/repl.html":{"ref":"overview/repl.html","tf":0.007518796992481203},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":5.019512195121951},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.046296296296296294},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.03225806451612903},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.10344827586206896},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009105960264900662},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.010526315789473684},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.018633540372670808},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.03361344537815126},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.12133891213389121},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.020134228187919462},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.03597122302158273},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.005970149253731343},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.03460207612456748},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01818181818181818},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.025878003696857672},"reference/functions.html":{"ref":"reference/functions.html","tf":0.006354708261120739},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.01680672268907563},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.019305019305019305}},"s":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"1":{"0":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}},"docs":{}},"docs":{}},"9":{"4":{"2":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336}}}},"s":{"docs":{},")":{"docs":{},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{},"’":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.014925373134328358}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}}}}}}}}}}}}},"a":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164}},"m":{"docs":{},"e":{"1":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.008278145695364239}}},"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0033112582781456954}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"j":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}}}}},"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/":{"ref":"basic-clojure/","tf":0.017857142857142856},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.002638522427440633},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00967982129560685},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":5.032258064516129},"basic-clojure/defining-functions.html":{"ref":"basic-clojure/defining-functions.html","tf":0.022988505747126436},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.019672131147540985},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.023178807947019868},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.037267080745341616},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.10526315789473684},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.008403361344537815},"simple-project/":{"ref":"simple-project/","tf":0.018518518518518517},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.03759398496240601},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.008368200836820083},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.026845637583892617},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.011940298507462687},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.01694915254237288},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.007692307692307693},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"thinking-functionally/naming.html":{"ref":"thinking-functionally/naming.html","tf":11},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.05555555555555555},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.005687203791469194},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/naming.html":{"ref":"reference/naming.html","tf":11},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":5.104477611940299},"reference/functions.html":{"ref":"reference/functions.html","tf":0.008087810514153668},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{"using-the-workshop/code-examples.html":{"ref":"using-the-workshop/code-examples.html","tf":0.012987012987012988},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.017467248908296942},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.03076923076923077},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":10.059016393442622},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"leiningen/create-a-project.html":{"ref":"leiningen/create-a-project.html","tf":0.027777777777777776},"leiningen/run-the-repl.html":{"ref":"leiningen/run-the-repl.html","tf":0.033707865168539325},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.0058823529411764705},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.009836065573770493},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}},"l":{"docs":{},"i":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554}}}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}}}}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"g":{"docs":{},"u":{"docs":{},"n":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}},"v":{"docs":{},"i":{"docs":{},"g":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}},"r":{"docs":{},"i":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}}}}},"l":{"docs":{"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.004739336492890996},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.012939001848428836},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0020168067226890756}}},"c":{"docs":{},"e":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"s":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.007692307692307693},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.013114754098360656},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.011764705882352941},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}},"t":{"docs":{},"h":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.02830188679245283},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.008403361344537815},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.013745704467353952},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004033613445378151}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"using-the-workshop/":{"ref":"using-the-workshop/","tf":0.012658227848101266},"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.009259259259259259},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"overview/":{"ref":"overview/","tf":0.010178117048346057},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.010526315789473684},"overview/design.html":{"ref":"overview/design.html","tf":0.006309148264984227},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.010498687664041995},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.01507537688442211},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.007317073170731708},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.008064516129032258},"data-structures/":{"ref":"data-structures/","tf":0.007017543859649123},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.002403846153846154},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.0029850746268656717},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.003436426116838488},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245},"leiningen/":{"ref":"leiningen/","tf":0.05263157894736842},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.006666666666666667},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"using-the-workshop/requirements.html":{"ref":"using-the-workshop/requirements.html","tf":0.06481481481481481},"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.025806451612903226},"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.021834061135371178},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.0079155672823219},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.03015075376884422},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/namespace.html":{"ref":"basic-clojure/namespace.html","tf":0.003278688524590164},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/create-a-template.html":{"ref":"leiningen/create-a-template.html","tf":0.01764705882352941},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}},"o":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453}}},"b":{"docs":{"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":0.004201680672268907},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.012939001848428836},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0028885037550548816}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514},"overview/design.html":{"ref":"overview/design.html","tf":0.022082018927444796},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.003236245954692557},"data-structures/":{"ref":"data-structures/","tf":0.010526315789473684},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.004807692307692308},"data-structures/vector.html":{"ref":"data-structures/vector.html","tf":10.079831932773109},"using-data-structures/":{"ref":"using-data-structures/","tf":0.009105960264900662},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"modifying-data-structures/lists.html":{"ref":"modifying-data-structures/lists.html","tf":0.006211180124223602},"modifying-data-structures/vectors.html":{"ref":"modifying-data-structures/vectors.html","tf":11},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.01791044776119403},"thinking-functionally/copying-collections.html":{"ref":"thinking-functionally/copying-collections.html","tf":0.022727272727272728},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.020833333333333332},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.0036363636363636364},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0018957345971563982},"leiningen/plugins.html":{"ref":"leiningen/plugins.html","tf":0.010869565217391304},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.004043905257076834},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.004369747899159664}}}}}},"n":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}}}}}}},"i":{"docs":{},"a":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"overview/":{"ref":"overview/","tf":0.01272264631043257},"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/features.html":{"ref":"overview/features.html","tf":0.0026246719160104987},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/quick-look-at-types.html":{"ref":"basic-clojure/quick-look-at-types.html","tf":0.009174311926605505},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"b":{"docs":{},"l":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}}}},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.012903225806451613},"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838},"overview/":{"ref":"overview/","tf":0.005089058524173028},"overview/features.html":{"ref":"overview/features.html","tf":0.0013123359580052493},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}}}}}}},"m":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"overview/":{"ref":"overview/","tf":0.002544529262086514}}}}}}},"e":{"docs":{},"w":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/show-me-the-docs.html":{"ref":"basic-clojure/show-me-the-docs.html","tf":0.015384615384615385},"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.015037593984962405}}}},"d":{"docs":{},"e":{"docs":{},"o":{"docs":{"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}}}},"m":{"docs":{"development-environments/leiningen.html":{"ref":"development-environments/leiningen.html","tf":0.008771929824561403}}},"a":{"docs":{},"r":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477},"reference/functions.html":{"ref":"reference/functions.html","tf":0.00924321201617562},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.020833333333333332}},"i":{"docs":{"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0013333333333333333}},"a":{"docs":{},"t":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}},"b":{"docs":{},"l":{"docs":{"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805},"data-structures/":{"ref":"data-structures/","tf":0.0035087719298245615},"defining-behaviour-with-functions/calling-functions.html":{"ref":"defining-behaviour-with-functions/calling-functions.html","tf":0.01680672268907563},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":0.09090909090909091},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.018018018018018018},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.008955223880597015},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.01090909090909091},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}}}},"d":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.004878048780487805}}}},"o":{"docs":{},"u":{"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}},"docs":{}},"docs":{}}},"g":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.002310803004043905}}},"’":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"s":{"docs":{},"t":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}},"l":{"docs":{},"i":{"docs":{"overview/purpose.html":{"ref":"overview/purpose.html","tf":0.009615384615384616}}}}}},"l":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},"u":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"overview/design.html":{"ref":"overview/design.html","tf":0.012618296529968454},"overview/repl.html":{"ref":"overview/repl.html","tf":0.0037593984962406013},"overview/features.html":{"ref":"overview/features.html","tf":0.006561679790026247},"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.039301310043668124},"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.018867924528301886},"basic-clojure/threading-syntactic-sugar.html":{"ref":"basic-clojure/threading-syntactic-sugar.html","tf":0.005277044854881266},"basic-clojure/java-interop.html":{"ref":"basic-clojure/java-interop.html","tf":0.005025125628140704},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.005956813104988831},"basic-clojure/strings.html":{"ref":"basic-clojure/strings.html","tf":0.02843601895734597},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.00975609756097561},"basic-clojure/ratios.html":{"ref":"basic-clojure/ratios.html","tf":0.046296296296296294},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.04032258064516129},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.016181229773462782},"data-structures/":{"ref":"data-structures/","tf":0.02456140350877193},"data-structures/list.html":{"ref":"data-structures/list.html","tf":0.0023923444976076554},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.016826923076923076},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.028037383177570093},"using-data-structures/":{"ref":"using-data-structures/","tf":0.02152317880794702},"using-data-structures/mapping-data-structures.html":{"ref":"using-data-structures/mapping-data-structures.html","tf":0.015789473684210527},"defining-behaviour-with-functions/syntax.html":{"ref":"defining-behaviour-with-functions/syntax.html","tf":0.05263157894736842},"defining-functions/let-local-values.html":{"ref":"defining-functions/let-local-values.html","tf":5.090909090909091},"simple-project/":{"ref":"simple-project/","tf":0.009259259259259259},"simple-project/run-the-repl.html":{"ref":"simple-project/run-the-repl.html","tf":0.012048192771084338},"what-is-functional-programming/":{"ref":"what-is-functional-programming/","tf":0.009009009009009009},"thinking-functionally/pure-functions.html":{"ref":"thinking-functionally/pure-functions.html","tf":0.02092050209205021},"thinking-functionally/impure-functions.html":{"ref":"thinking-functionally/impure-functions.html","tf":0.03355704697986577},"thinking-functionally/first-class-functions.html":{"ref":"thinking-functionally/first-class-functions.html","tf":0.007194244604316547},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.046153846153846156},"thinking-functionally/threading-macros.html":{"ref":"thinking-functionally/threading-macros.html","tf":0.006872852233676976},"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.004081632653061225},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.010380622837370242},"thinking-functionally/functors.html":{"ref":"thinking-functionally/functors.html","tf":0.041666666666666664},"thinking-functionally/partial-functions.html":{"ref":"thinking-functionally/partial-functions.html","tf":0.007272727272727273},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.004739336492890996},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.0026666666666666666},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.011090573012939002},"reference/naming-conventions.html":{"ref":"reference/naming-conventions.html","tf":0.029850746268656716},"reference/functions.html":{"ref":"reference/functions.html","tf":0.013287117273252455},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005714285714285714},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.019305019305019305}}},"i":{"docs":{},"d":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.004366812227074236},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194},"data-structures/set.html":{"ref":"data-structures/set.html","tf":0.009345794392523364},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.014423076923076924}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"overview/design.html":{"ref":"overview/design.html","tf":0.0031545741324921135},"data-structures/map.html":{"ref":"data-structures/map.html","tf":0.007211538461538462},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716}}}}}}}}}}},"c":{"docs":{"development-environments/other-tools.html":{"ref":"development-environments/other-tools.html","tf":0.005235602094240838}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}}}}},"z":{"0":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}},"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}},"u":{"docs":{},"l":{"docs":{},"u":{"docs":{"development-environments/java.html":{"ref":"development-environments/java.html","tf":0.0064516129032258064}}}}},"i":{"docs":{},"p":{"docs":{"development-environments/lighttable.html":{"ref":"development-environments/lighttable.html","tf":0.007042253521126761},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}}}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{"basic-clojure/reading-project-file.html":{"ref":"basic-clojure/reading-project-file.html","tf":0.009433962264150943},"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.006472491909385114},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.012939001848428836},"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0010084033613445378}}}}},"a":{"docs":{"thinking-functionally/example-hitchhikers-guide.html":{"ref":"thinking-functionally/example-hitchhikers-guide.html","tf":0.00816326530612245}}}},"x":{"1":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}},"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{"overview/who-uses-clojure.html":{"ref":"overview/who-uses-clojure.html","tf":0.004975124378109453},"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.015789473684210527},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0018615040953090098},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"basic-clojure/control-flow.html":{"ref":"basic-clojure/control-flow.html","tf":0.012944983818770227},"using-data-structures/":{"ref":"using-data-structures/","tf":0.0024834437086092716},"thinking-functionally/homoiconicity.html":{"ref":"thinking-functionally/homoiconicity.html","tf":0.03582089552238806},"thinking-functionally/higher-order-functions.html":{"ref":"thinking-functionally/higher-order-functions.html","tf":0.03389830508474576},"thinking-functionally/chaining-functions.html":{"ref":"thinking-functionally/chaining-functions.html","tf":0.06153846153846154},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.020761245674740483},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.027151935297515885},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.005042016806722689}},"*":{"docs":{},"=":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}},"+":{"docs":{},"=":{"1":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}},"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}}},"/":{"docs":{},"=":{"docs":{},"i":{"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842}}}},"a":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"where-next.html":{"ref":"where-next.html","tf":0.008130081300813009}}}}}}}},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"basic-clojure/whats-my-environment.html":{"ref":"basic-clojure/whats-my-environment.html","tf":0.008733624454148471}}}}}}},"m":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}},"/":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"s":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0014892032762472078},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}}}}},"[":{"docs":{},"i":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}}},"y":{"1":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}},"]":{"docs":{},"[":{"docs":{},"x":{"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0008278145695364238}}},"docs":{}}}}},"2":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}},"docs":{"overview/syntax.html":{"ref":"overview/syntax.html","tf":0.005263157894736842},"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"basic-clojure/assigning-names.html":{"ref":"basic-clojure/assigning-names.html","tf":0.016129032258064516},"work-in-progress.html":{"ref":"work-in-progress.html","tf":0.005333333333333333},"reference/functions.html":{"ref":"reference/functions.html","tf":0.007510109763142692}},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0016806722689075631},"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.003861003861003861}}}}}},"o":{"docs":{"GLOSSARY.html":{"ref":"GLOSSARY.html","tf":0.007722007722007722}},"u":{"docs":{},"&":{"docs":{},"#":{"3":{"9":{"docs":{},";":{"docs":{},"l":{"docs":{},"l":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039},"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}}}},"r":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0011169024571854058}}},"v":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.00037230081906180194}}}}},"docs":{}},"docs":{}}},"r":{"docs":{"leiningen/profile.html":{"ref":"leiningen/profile.html","tf":0.0009478672985781991}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"basic-clojure/more-java-fun.html":{"ref":"basic-clojure/more-java-fun.html","tf":0.0007446016381236039}}}}}}},"t":{"docs":{},"u":{"docs":{},"b":{"docs":{"thinking-functionally/":{"ref":"thinking-functionally/","tf":0.03333333333333333}}}}},"’":{"docs":{},"l":{"docs":{},"l":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0011554015020219526}}}},"r":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}},"e":{"docs":{"basic-clojure/numbers-maths.html":{"ref":"basic-clojure/numbers-maths.html","tf":0.0024390243902439024},"modifying-data-structures/":{"ref":"modifying-data-structures/","tf":0.01818181818181818},"thinking-functionally/list-comprehension.html":{"ref":"thinking-functionally/list-comprehension.html","tf":0.0034602076124567475},"reference/basic-syntax.html":{"ref":"reference/basic-syntax.html","tf":0.0018484288354898336},"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0006722689075630252}},"t":{"docs":{},".":{"docs":{},"&":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{"reference/functions.html":{"ref":"reference/functions.html","tf":0.0005777007510109763}}}}}}}}},"a":{"docs":{},"r":{"docs":{"reference/sequences.html":{"ref":"reference/sequences.html","tf":0.0003361344537815126}}}}},"/":{"docs":{},"b":{"docs":{"using-data-structures/":{"ref":"using-data-structures/","tf":0.0016556291390728477}}}}},"_":{"docs":{"simple-project/create-project.html":{"ref":"simple-project/create-project.html","tf":0.007518796992481203},"reference/reader-macros.html":{"ref":"reference/reader-macros.html","tf":0.010416666666666666}}}},"length":9713},"corpusTokens":["0","0.084","0.105.20","0.12375594203332863","0.18244875487846746","0.234","0.33668691162169784","0.391","0.44442397843046755","0.9002678382322784","1","1.0","1.1","1.2","1.2e","1.3","1.3:1.4","1.4","1.6","1.8","1/2","1/3","10","100","1000","100000","1000000","11","11/4","12","123","126","13","1335333000","13:33:41","14","144","1453","15","16","16777216","17","175","18","186","19","1969","2","2&quot","2)&quot","2,3,4].map","2.1.0","2.4","2.54","2.6","2.6.1","2.7.x","20","200","20080916","2010","2013","2014","2016","203.25","204.50","21","21.83","21.90","22","22/7","230.66","233.12","238","24.5.x","2489","25","255","27","278","29.08","29.12","2d","2nd","3","3.1415926","3.141592653589793","3.1435893","30","30000","3007.198","308.045","3109","32","34","34000","35","39","39;&quot","39;&quot;foo&quot","39;(&quot;and&quot","39;(&quot;cat&quot","39;(&quot;devoxx","39;(.indexof","39;(.touppercas","39;(1","39;(2","39;(3","39;(4","39;(5","39;(6","39;(:cat","39;(inc","39;(javax.sw","39;(math/ab","39;(nil","39;.&#39","39;123","39;[clj","39;[clojure.java","39;[clojure.tools.namespace.repl","39;add","39;clojure.core/inc","39;clojure.repl","39;in","39;inc","39;java.awt.event.actionlisten","39;javax.swing.joptionpan","39;launch","39;mi","39;pure&#39","39;type","39;unchecked_add","39;user/add","39;user/astronaut","39;user/cat","39;user/half","39;user/infseq","39;user/numb","39;user/varg","39;your.namespac","39bda9b9","3]&quot","3rd","4","4&quot","4,6,8","4.0","40","4000000","42","42000","440","45","459","47","4clojur","5","5,000","5.0","50","500","5000","54.3","55","56.9","57&quot","57.1","6","60","60.2","61.8","63.1","64","65","66","66.4","66.5","68.1","69.2","7","7.0","70","70.2","700","75","8","8/5","80","801","85","8601","89","9","90","9229","95","99","9|&#39;]+&quot","_","a+b","a+x","a,b","a=1","ab","abil","abov","above.&quot","abracadabra","absenc","absent","abstract","abund","accept","access","accessor","accid","accident","accompani","accord","account","accur","achiev","acid","aclon","act","action","action&quot","actionlisten","actionperform","activ","actual","ad","add","addactionlisten","addit","address","adject","adjust","adopt","adorn","adrian","advanc","advantag","adverb","advertis","affect","afn.java:437","again","against","agent","aget","aget/aset","aggreg","agil","ah","aha","ahead","aim","aka","alength","algorithm","alia","alias","align","allianc","allow","alon","along","alpha","alphabet","alreadi","altern","although","alway","amap","amazon","ambigu","amount","amp","analog","analysi","ancient","and/or","annot","announc","annual","anonym","anoth","answer","anyon","anyth","anyway","anywher","aot","apach","apart","aphyr","api","app","appeal","appear","append","appi","appl","appli","applic","approach","appropri","approxim","apt","arbitrari","arbitrarili","arcan","architect","area","areduc","aren’t","arg","arglist","argument","argument1","argument2","argument3","arguments&quot","arithmet","ariti","arityexcept","arity–th","arm","around","array","art","articl","aset","ask","aspect","ass","assembl","assign","assist","assoc","associ","assum","assumpt","astronaut","asum","asum(float","async","at","atlassian","atom","attach","attempt","attende","attr","attribut","author","auto","autocomplet","autom","automat","avail","averag","avoid","aw","awar","away","axi","axiom","b","b06","b=2","back","background","backward","backwards&quot","bad","balanc","bananas!&quot","bank","bar","barney","base","basi","basic","bat","batteri","baz","bdd/tdd","be","bean","beauti","becom","befor","begin","beginn","behav","behavior","behaviour","behind","bell","belong","below","benchmark","benefit","best","beta1&quot","better","between","beyond","big","bigdec","bigger","bigint","bin","bind","binks&quot","bit","blacklist","bleed","bloat","block","blog","blow","blue","bluebeard&#39;","bluford&quot","bob","bodi","boil","boilerpl","bonu","book","boolean","boost","boot","bootstrap","both","bottleneck","bottom","bound","box","bracket","braintre","brake","braket","branch","brave","braveclojur","braveclojure.com","break","bring","brittl","broad","broke","broken","brov","browser","bst","buffer","bug","bugfix","build","built","burn","burrito","busi","button","byte","bytecod","c","cach","calcul","calculu","call","calls&quot","call–where’","came","can&#39;t","canon","cant","canwrit","can’t","capabl","capit","captur","care","carol","carri","cars&quot","case","case&quot","cast","cat","catch","categori","categoris","cats!&quot","cats&quot","cats.&quot","caus","cdt","center","centimet","centr","central","centric","certain","cerynian","chain","challeng","chang","chapter","char","charact","characterist","characters&quot","charat","charicterist","chat","cheapli","cheatsheet","check","checkal","checkout","cheetsheet","chip","chips&quot","chmod","choic","choos","chop","chri","chunk","ci","cider","circl","cisco","citigroup","clarifi","clariti","class","class/interface(","classcastexcept","classic","classnam","classname/staticfield","classname/staticmethod","classpath","claus","clean","cleaner","clear","clearer","clearli","client","clj","clj=&gt","cljc","clojar","clojars.org","clojur","clojure&#39;","clojure&quot","clojure.cor","clojure.core$typ","clojure.core/merg","clojure.core/nth","clojure.core/reduc","clojure.core/typ","clojure.java.api","clojure.java.api.clojur","clojure.java.io","clojure.java.io/read","clojure.lang.afn","clojure.lang.afn.throwar","clojure.lang.afunct","clojure.lang.arityexcept","clojure.lang.fn","clojure.lang.ifn","clojure.lang.imeta","clojure.lang.iobj","clojure.lang.keyword","clojure.lang.namespac","clojure.lang.numb","clojure.lang.numbers.inc","clojure.lang.numbers.op","clojure.lang.persistentvector","clojure.lang.persistentvector.arrayfor","clojure.lang.restfn","clojure.lang.var","clojure.org","clojure.org&#39;","clojure.practical.li","clojure.read(&quot;[1","clojure.repl","clojure.set/union","clojure.string/low","clojure.string/split","clojure.test","clojure.var(&quot;clojure.core&quot","clojure/core.clj","clojurebridg","clojureclr","clojurescript","clojurey","clojure’","clojurian","clojurist","clone","close","closer","closur","cloud","clr","clue","cntrl","cockcroft","code","code.git","codex","coerc","coercion","cojur","coll","collabor","collaps","collect","collis","colon","colorspac","colour","colthorp","column","com.stuartsierra.compon","com.stuartsierra/compon","combin","come","comma","command","comment","commit","commnet","common","commonli","commun","comonad","compact","compani","compar","comparison","compil","compilerexcept","compiling:(no_source_path:0:0","complain","complement","complet","complex","complic","compojur","compon","compos","composit","comprehens","compris","comput","con","concat","concaten","concept","concepts/sum","conceptu","concern","concis","concret","concurr","cond","condit","condp","conduct","config","configur","confirm","conflict","conj","conjoin","connect","consecut","consequ","consid","consis","consist","consol","constant","constrain","constraint","construct","constructor","consum","consumpt","contain","content","context","contract","contrast","contriv","control","conveni","convent","convert","convieninet","cookbook","cooki","copi","core","core.async","core.log","core.repl","core.typ","correct","correspond","cortana","couldnt","couldn’t","count","counter","counterclockwis","cours","cover","craft","crash","creat","creation","creativ","crime","critic","crocodil","cross","crossclj","cruser&quot","css","ctrl","cumbersom","curiculum","current","curri","curriedsum","curriedsum(40)(2","cursiv","cursor","custom","customis","cut","cycl","cynic","c’","d","daili","danger","darth","dat","data","data&quot","databas","datastructur","datatyp","date","datom","day","de","deactiv","deal","dealt","debug","dec","decid","decim","decis","declar","decompos","deconstruct","deep","deeper","deepest","deepli","def","default","defe","defer","defin","definit","defmacro","defn","defproject","delay","delet","delimit","delv","demo","demonstr","denot","dep","depend","deploy","depth","deref","deref.invoke(printlength","deriv","describ","descript","description&quot","descructur","design","desir","destruct","destructur","detail","determin","deuch","dev","develop","devic","devop","devoxx","devoxxfr","devoxxuk","dictionari","didn’t","differ","dig","dimension","direct","directli","directori","disabl","discard","discov","discret","discuss","dispatch","displac","display","disput","distinct","distinguish","distribut","divers","divid","divis","do","doc","docstr","document","documentaiton","doe&quot","doesn&#39;t","doesnt","doesn’t","dog","doh&quot","dojo","domain","don&#39;t","done","dont","don’t","dorun","doseq","dot","doto","doubl","down","download","downtim","drew","driven","droid","drop","dsl","duct","duct.middleware.error","due","dupic","duplic","durat","dure","dynam","e","e.g","each","earil","earli","earlier","eas","easi","easier","easiest","easili","ec0196871c40","echo","eclips","ecosystem","edges&quot","edit","editor","editor.delet","editor.kil","editor.lin","edn","effect","effects.&quot","effici","effort","eg","electron","eleg","elel","elem","element","element–but","elimin","elsewher","emac","emit","emphas","empir","empti","en","enabl","encapsul","enclosingclass$nestedclass","encourag","end","enforc","engin","english","english–but","enjoy","enough","ensur","enter","entir","entireti","entitl","entri","enviorn","enviro","environ","equal","equival","ereceipt","erlang&quot","error","erymanthian","escap","especi","essenc","essenti","establish","etc","etc/leiningen/profiles.clj","etc/passwd","ethel","eval","evalu","evalut","even","event","eventu","everth","everyon","everyone–even","everyth","everywher","evil","evluat","exactli","exampl","example.git","excel","except","exclud","exclus","excursion.html","exectuion","execut","exercis","exist","exit","expand","expans","expect","expedia","experi","expert","explain","explicit","explicitli","exploit","explor","expr","express","expression&quot","expression’","extend","extens","extern","extra","extract","extrem","f","f(f(x","f(x","facebook","facil","facilit","fact","faction","factori","fail","falcon&quot","fals","familiar","fanci","fans&quot","faq","far","fast","faster","favorit","featur","feed","feedback","feel","feet","fell","fett&quot","few","fewer","fibonacci","fibonnacci","field","fieldnam","figher&quot","figur","file","file&#39;","filenam","filesystem","fill","filter","final","financ","financi","find","finit","first","fish","fit","five","fix","fixm","flag","flatten","fledg","flexibl","fli","float","flow","flush","fn","focu","focus","fold","folder","follow","foo","foo2","foobar","for(int","forc","ford","forev","fork","form","formal","format","format/edn","format/formatt","format/unpars","formatt","formatters&amp","former","forward","found","four","fourth","fp","fraction","frame","frame&quot","framework","france&quot","fred","free","freeli","frequenc","frequent","friday","fried&quot","friend","from&quot","front","frontend","fruit","fs","fuction","full","fulli","fullnam","fun","funcitions&quot","funciton","function","function(a","function(b","function(n","functions&quot","function–i","function’","functoin","functor","fund","fundament","funtion","further","g","gain","garbag","gate","gather","gave","gen","gener","get","gethour","getnam","getpath","getproperti","giant","git","github","gitifi","gitter","gitter.im","gitub.permiss","give","given","global","glue","go","gone","good","googl","gorilla","gradl","grammar","graph","graphic","great","greater","green","greet","greet(&quot;hof&quot","greet.touppercas","groovi","ground","group","gt","gt;&gt","gt;1","gt;html","gt;record","guard","gui","guid","h","hack","hackernew","hackthetow","hadoop","half","hand","handi","handl","hang","happen","hard","harder","hash","haskel","haskell&quot","hasn’t","hatch","have","haven’t","head","heavili","height","hello","help","henc","here","here&#39;","here&quot","here–that","heroku","hey","hi","hidden","hide","high","higher","highest","highli","highlight","hind","hint","hit","hitchhick","hitchhik","hn","hof","hold","homoicon","homomorph","hook","hope","host","hotel","hotspot","hourli","hous","http://blog.cognitect.com/blog/2014/10/24/analysi","http://blog.jenkster.com/2013/12/a","http://christophermaier.name/blog/2011/07/07/writ","http://clojure.org/java_interop","http://clojure.org/special_forms#if","http://cognitect.com","http://eigenhombre.com/clojure/2014/07/05/emac","http://java.awt.color/black|java.awt.color/black","http://martintrojer.github.io/clojure/2014/10/02/clojur","http://paper.li/ajlopez/1291580164","http://rrees.me/2014/01/16/clojurescript","http://stackoverflow.com/questions/1053926/clojur","http://www.clojuresphere.com","http://www.compoundtheory.com/clojur","http://www.pitheringabout.com/?p=693","http://www.purelyfunctional.tv/cor","https://clojars.org/search?q=lein","https://github.com/cemerick/drawbridg","https://github.com/clojure/tools.namespac","https://github.com/edn","https://github.com/jamesmacaulay/zelkova","https://github.com/jr0cket/devoxx","https://github.com/jr0cket/kensa","https://github.com/magomimmo/om","https://github.com/practicalli/clojur","https://github.com/r0man/sablono","https://github.com/swannodette/om/wiki","https://github.com/technomancy/mir","https://github.com/technomancy?tab=repositori","https://jr0cket@github.com/jr0cket/clojureprogramming.git","https://medium.com/@hlship/clojur","https://www.youtube.com/watch?v=lxhww1yqpt0","hug","huge","huh","human","humans}(http://andrewberls.com/blog/post/parti","hundr","hurt","i&#39;ll","i&#39;m","i&quot","i.","i/o","iceburg","id","idea","ideal","idempot","ident","identifi","idiomat","ie","ifn","ignor","imag","imagin","immedi","immut","imper","imperi","implement","implicit","implicitli","import","imposs","impress","improv","impur","in","inaccur","inc","inc,dec,&lt;,&lt;=,&gt;,&gt","incanta","inch","includ","incomplet","incorrect","incred","increment","inc–short","inde","independ","index","indexof","indexoutofboundsexcept","indic","indirect","individu","induct","industri","ineffici","infact","infer","infin","infinit","infoq","inform","infseq","ing","ingredi","init","initi","inject","ink","inlin","inner","innermost","input","input/output","inputstream","insert","insid","inspect","instal","instanc","instancefield","instancefieldnam","instancememb","instancemethodnam","instant","instantan","instanti","instead","instruct","insur","int","int/long","integ","integer(&quot;123&quot","integr","integratoin","intelij","intellig","intellij","intend","intent","interact","interest","interfac","interleav","intermedi","intern","internet","interop","interoper","interoperabilti","interoperatil","interpos","interpret","introduc","introduct","introspect","intuit","investig","invis","invoc","invok","involv","io","io/input","io/read","is&quot","isn’t","iso","isol","it&#39;","it.&quot","item","iter","itself","itter","it’","it’d","i’ll","jane","jar","jarjar","java","java&#39;","java.awt.color","java.awt.color.icc_colorspace@c94b51","java.awt.point","java.io","java.io.bufferedread","java.io.bufferedwrit","java.io.fil","java.io.fileread","java.io.filewrit","java.io.reader.&quot","java.io.serializ","java.io.stringread","java.io.stringwrit","java.lang","java.lang.boolean","java.lang.doubl","java.lang.long","java.lang.math/pi","java.lang.numb","java.lang.object","java.lang.runn","java.lang.runtimeexcept","java.lang.str","java.lang.system","java.nio.fil","java.util.compar","java.util.concurrent.cal","java.util.d","java.util.hashmap","java.util.list","javabean","javaclassnam","javamethodnam","javascript","jaxlondon","jbutton","jedi","jetti","jframe","job","joda","john","join","joptionpane/information_messag","joptionpane/showmessagedialog","jpanel","jr0cket","jre","jrubi","json","juici","jvm","jvm&quot","jython","k&quot","kafka","kebab","keep","kenobi&quot","kept","key","keybind","keyboard","keyword","kill","kind","kiteboards&quot","know","knowledg","known","koan","kouphax","l","la","label","lambda","landing&quot","landscap","langaug","languag","languages&quot","langug","langugag","larg","larger","last","lastli","lasttrad","later","latest","latter","launch","layer","lazi","lead","leak","leaki","leaner","learn","learnt","leav","left","leg","legal","lein","lein/profiles.clj","lein/profiles.d","leing","leiningen","leiningen.org","leiningen/default","len","len2","length","length&quot","less","lesser","let","let/loop","letter","let’","level","li","librari","licens","license.bas","lie","life","lifecycl","lighttabl","lighttable.com","lighttable.dmg","lighttable/user/user.keymap","lightweight","likewis","limit","lindsay","line","linear","link","linkedin","lint","linux","lion","lisp","list","list&quot","listen","lists/vector","list–(rest","liter","littl","live","load","local","locat","lock","log","logic","london","long","longer","look","lookup","loop","loos","lost","lot","love","low","lower","lowest","lt","luci","luke","luminu","lurk","m","m2","m2/repositori","machan","machin","macosx","macro","macroexpand","macroexpans","mad","made","magit","mail","main","mainli","mainstream","maintain","mainten","major","make","malwar","manag","mandatori","mango","mani","manipul","manu","manuscript","map","map.&quot","map.invoke(inc","mapcat","mari","mark","massiv","master","mastodon","match","mater","math","math.abs(math.abs(10","math.random","math/pi","mathemat","matter","maven","max","mayb","md","me!&quot","mean","meaning","meet","member","memfn","memori","mention","meow","mere","merg","merge.cor","messag","messi","meta","metadata","metaprogram","method","methodnam","methods/funct","metric/imperi","mi","michel","microcod","microservic","microsoft","million","min","mind","minesweep","minim","minimis","minimum","minor","minu","misophist","miss","mistakend","mix","mixtur","mobil","mod","mode","model","modern","modif","modifi","modul","modular","moment","monad","monday","money&quot","monitor","monoid","month","monthli","more","moreov","morphism","mostli","mother","motiv","move","mrrrow","msecs&quot","much","muhuk.com","multi","multipl","multipli","multithread","music","mutabl","mutalbl","mutat","my&quot","myint","myproject","mysteri","mystr","n","na","nailgun","name","name1","name2","name2(conj","namespac","namespace&quot","namespace.cor","namespace.librari","nari","nasti","natur","navig","near","neccessari","necessari","need","neg","negat","nest","net","netbean","netflix","never","nevertheless","new","newer","newlin","next","nice","nicer","nightcod","nil","non","none","none&quot","normal","notat","notation&quot","note","noth","notic","notion","notoriusli","noun","now","now&quot","ns","nth","null","nullpointerexcept","num","number","number1","number2","numbers.java:110","numbers.java:942","numer","nums)–that’","o","obj","object","obtain","occasion","occurr","odd","of&#39","ofclient","offer","offici","oftentim","oh&quot","ok","okay","oll","om","ommit","on","onc","onlin","only&quot","onto","onward","op","opaque–i","open","openjdk","oper","operand","opt","optim","option","optionscustomis","optomis","oracl","orang","orbit","orbit.&quot","order","org","org.clojure/clojur","org.clojure/clojurescript","org.clojure/tools.nrepl","org.thnetos/cd","organ","orient","origin","otherwis","out","outdat","outer","output","outsid","over","overal","overcom","overflow","overhead","overlap","overload","overrid","overridden","overton","overview","own","p","packag","padlock","page","pair","palindrome–that","panel","paper","parallel","param","paramet","parameter","paramt","pare","parenthes","parenthesi","parrallel","pars","parser","part","partial","partial(2","partic","particip","particular","particularli","partit","partner","pass","path","path&quot","patter","pattern","pay","payment","paypal","peopl","people–kind","per","perciev","perfectli","perform","perhap","perminat","permiss","perpos","persist","persistend","persistentvector.java:107","person","phase","phone","phrase","pi","pick","piec","pig","pipelin","place","planet","platform","playground","pleas","ploymorph","plu","plugin","plus.invoke(1","po","point","pointer","pole","polici","polymorph","pom","poppin","port","portfolio","posit","possibl","potenti","potion","pound","power","pprint","pprint&quot","pprint/classes&quot","pprint/src&quot","pprint/target&quot","practic","practis","pragmat","prasmat","pre","preced","precis","pred","predic","predict","prefer","prefix","prep","prepar","prepend","present","preserv","press","presum","pretti","prevent","previou","prim","prime","primit","principl","print","printlength","println","privat","prn","probabl","problem","proce","process","procss","produc","product","profil","profile&#39;","profiles.clj","program","programm","progress","project","project&#39;","project.clj","promot","prompt","pronounc","propag","proper","properti","protect","protocol","protorepl","provid","provoc","proxi","prudent","public","publicli","publish","pull","purchas","pure","puriti","purpos","pursuit","put","python","qa","qa,us","qualifi","question","quick","quicker","quickli","quil","quit","quot","quot;$&quot","quot;&quot","quot;(inc","quot;+&quot","quot;,&quot","quot;./hhgttg.txt&quot","quot;./project.clj&quot","quot;/&quot","quot;/etc/passwd&quot","quot;/home/phil/src/leiningen/lein","quot;/tmp/hercul","quot;/users/rich/dev/clojure/build.xml&quot","quot;0","quot;0.0.5&quot","quot;0.1.0","quot;0.1.1&quot","quot;0.1.4&quot","quot;0.2.4&quot","quot;0.3.0&quot","quot;0.3.3&quot","quot;0.4.4&quot","quot;0.5.0","quot;1","quot;1.0&quot","quot;1.0.1&quot","quot;1.1.1&quot","quot;1.2&quot","quot;1.2.1&quot","quot;1.2.6.2&quot","quot;1.3.0&quot","quot;1.3.1&quot","quot;1.4.0","quot;1.4.0&quot","quot;1.4.41&quot","quot;1.5.0","quot;1.6.0_07","quot;1.7.0&quot","quot;1.7.122&quot","quot;12","quot;123","quot;123&quot","quot;2","quot;2.0.0&quot","quot;3","quot;=&gt","quot;[a","quot;[j&quot","quot;a","quot;a&quot","quot;aapl&quot","quot;abracadabra&quot","quot;acaadabrrab&quot","quot;action.&quot","quot;add","quot;algorithms&quot","quot;asdf&quot","quot;asdjhhfdas&quot","quot;attempt","quot;b&quot","quot;bar&quot","quot;batt","quot;battered&quot","quot;be&quot","quot;beans&quot","quot;bell&quot","quot;beta","quot;bi","quot;boba","quot;c3p0&quot","quot;car&quot","quot;carnitas&quot","quot;cat&quot","quot;changed&quot","quot;cheese&quot","quot;chips&quot","quot;ci.compil","quot;ci.target","quot;clean&quot","quot;click","quot;clojur","quot;clojure&quot","quot;clojure/core.clj&quot","quot;close&quot","quot;cod&quot","quot;common","quot;compile&quot","quot;cond","quot;conference&quot","quot;conjugate&quot","quot;crank","quot;creat","quot;crm&quot","quot;ctrl","quot;darth","quot;deref&quot","quot;destroyer&quot","quot;developers&quot","quot;devoxx","quot;devoxx&quot","quot;divid","quot;dog&quot","quot;dummi","quot;dunn&quot","quot;elaps","quot;erlang&quot","quot;ethel&quot","quot;expectations&quot","quot;fish","quot;fish&quot","quot;fixm","quot;floow&quot","quot;foo&quot","quot;for","quot;fred&quot","quot;fried&quot","quot;frog&quot","quot;ga&quot","quot;greeting&quot","quot;guy","quot;hack","quot;hackday&quot","quot;hackthetow","quot;haskell&quot","quot;hello","quot;hello&quot","quot;helloworld&quot","quot;hi","quot;hi&quot","quot;higher&quot","quot;hooks&quot","quot;http://clearwhitelight.org/hitch/hhgttg.txt&quot","quot;http://example.com/fixme&quot","quot;http://hackthetower.co.uk&quot","quot;http://jaxlondon.co.uk&quot","quot;http://www.textfixer.com/resources/common","quot;https&quot","quot;i","quot;i&#39;v","quot;i&quot","quot;im","quot;in&quot","quot;inc&quot","quot;intergalact","quot;is&quot","quot;it","quot;jam","quot;jan","quot;jar&quot","quot;jarjar","quot;java","quot;java.lang.string&quot","quot;java.version&quot","quot;java.vm.name&quot","quot;java.vm.version&quot","quot;john","quot;join","quot;joseph","quot;joseph&quot","quot;key&quot","quot;kiteboard&quot","quot;latest","quot;launch","quot;launch&quot","quot;lazy&quot","quot;lee&quot","quot;lein","quot;let&#39;","quot;li&quot","quot;like&quot","quot;lower&quot","quot;lucy&quot","quot;luk","quot;macro&quot","quot;map&quot","quot;millenium","quot;moon","quot;msft&quot","quot;n&quot","quot;no_source_path&quot","quot;non","quot;not","quot;notation&quot","quot;null&quot","quot;o&#39;toole&quot","quot;o&quot","quot;obiwan","quot;oil&quot","quot;ok","quot;one&quot","quot;orcl&quot","quot;os.name&quot","quot;palpatine&quot","quot;playground.version&quot","quot;potatoes&quot","quot;prefix","quot;pretti","quot;print","quot;priority&quot","quot;prod1.mycorp.com&quot","quot;project.clj&quot","quot;pure&quot","quot;qa.mycorp.com&quot","quot;r2d2&quot","quot;rabit&quot","quot;rc","quot;remov","quot;require&quot","quot;return","quot;ruby&quot","quot;run&quot","quot;s&quot","quot;sal","quot;sarah&quot","quot;sato&quot","quot;set","quot;show","quot;snapshot&quot","quot;speci","quot;stage.mycorp.com&quot","quot;sum","quot;swank","quot;target","quot;target/%s&quot","quot;th","quot;the&quot","quot;thi","quot;this&quot","quot;threading&quot","quot;three&quot","quot;to","quot;to&quot","quot;together&quot","quot;train&quot","quot;turing&quot","quot;two&quot","quot;types&quot","quot;uh","quot;unchecked&quot","quot;upset","quot;value&quot","quot;welcome&quot","quot;wher","quot;who","quot;with","quot;woolf&quot","quot;world&quot","quot;x","quot;y&quot","quot;yep!&quot","quot;yo&quot","quot;yoo&quot","quot;yooo&quot","quot;yoooo&quot","quot;you","quot;zhou&quot","r","rabit","radar","rainbow","rand","randit","randiter.next","random","rang","rare","rate","ratio","ration","rats&quot","rdr","re","reach","reactiv","read","read/write/execut","readabilti","readabl","reader","readi","reading,writ","real","real&quot","realis","realiz","realli","reason","reassign","rebel","rebind","rebuilt","recent","recombin","recommend","record","recur","recurr","recurs","red","redefin","redifin","reduc","reduce1","reduce–though","reduct","redund","ref","refactor","refer","referenc","referenti","reflect","refresh","refus","regardless","regex","regist","regular","reifi","rejoin","rel","relat","relationship","releas","relev","reli","reload","rem","remain","remaind","rememb","remind","remot","remov","repeat","repeatedli","repetit","rephras","repl","replac","replace/displac","repo","report","repositori","repres","represent","request","requir","require.invoke(clojure.read(&quot;clojure.set&quot","reserv","reslut","resolv","resourc","resource&#39;","respect","rest","restart","result","resultl","resut","ret","return","return&quot","reusabl","reveal","revers","review","revis","rework","rewrit","rgb","rich","rid","ridden","ride&quot","ridicul","riffl","right","right–thi","rise","risk","rival","room","roomkey.com","root","rope","rough","roughli","round","rout","rubi","ruby&quot","rule","run","runtim","rush","s","safe","safer","safeti","salari","salesforc","same","sampl","satifi","saturday","save","saw","say","scala","scalabl","scale","scan","schema","scienc","scope","screenshot","script","sdk","seamlessli","search","secion","second","section","see","seem","seemingli","seen","seesaw","select","selector","self","semant","semigroup","senc","sens","sensit","sentenc","separ","seper","seq","sequenc","sequenti","seri","server","servic","set","setcontentpan","setoid","setsiz","setup","setvis","sever","shape","share","sharealik","shift","ship","shish","shoot","short","shortcust","shortcut","shorter","shorthand","shouldn&#39;t","show","shown","shuffl","side","sideous&quot","signifi","significantli","silent","silicon","similar","similarli","simpl","simpler","simplest","simpli","simplifi","singl","singular","site","sith","situat","size","skill","skip","skynet","skywalker&quot","skywarker&quot","slamhound","sleev","slice","slide","slideshar","slightli","slime&quot","slow","slower","slurp","small","smaller","smallest","smart","snake","snapshot","snapshot&quot","sneak","snippet","social","socket","softwar","solut","solv","someon","someth","something)–written","sometim","soon","sophist","sort","sound","soup","sourc","space","space.nam","spacecraft","spacemac","spars","speak","spec","special","specif","specifi","specificali","speckl","speclj","speed","spit","split","squar","src/xml.clj","stack","stacktrac","staff","stage","stand","standalon","standard","stapl","stare","start","starwar","state","stateless","statement","static","staticfield","staticfieldnam","staticmethod","step","stevenson","stevenson&quot","stick","still","stm","stock","stood","stop","store","stori","storm","str","straightforward","stream","stream&quot","streamlin","streams/fil","street","string","string&quot","stringbuff","stringbuffer(&quot;c","stringread","strings&quot","strings2","stringwrit","strip","strong","strongli","struct","structr","structur","structure’","strutur","stuck","style","stylesheet","subject","sublimetext","submit","subsequ","substitut","subtract","success","successfulli","such","suddenli","sudo","sugar","suggest","suit","suitabl","sum","sum.bind(nul","summari","sun","sunday","super","superclass","superset","supertyp","suppli","support","sure","sure...&quot","surpris","surround","survey","svn","swamp","swank","swap","swath","swear","swiftkey","swing","switch","symbol","symbol’","symmetri","syncronis","synerg","syntact","syntat","syntax","synthes","system","system&#39;","system/getenv","system/getproperti","sytem","t","tabl","tack","tag","tail","take","taken","talk","target","task","te","team","tech","technic","techniqu","technolog","tell","temperatu","temperatur","templat","template&quot","ten","tend","term","termin","ters","terser","test","test.config","test.main","test.system","tests/develop","text","textual","thank","that","that&#39;","that’","themselv","theoret","theori","there!&quot","there&#39;","therefor","thereupon","there–or","there’","thin","thing","thing&quot","things.&quot","think","third","this&quot","those","though","thought","thoughtwork","thoughwork","thousand","thread","threat","three","through","throw","thrown","thrust","thursday","ticker","ticket","tidi","time","time!&quot","time.cor","time.format","time/now","timestamp","tini","tip","to&quot","today","todo","todo&#39;","togeth","together&quot","token","tonn","too&quot","took","tool","toolbox","toolkit","too–they’r","top","topic","tostr","total","touch","touppercas","tower&quot","track","trade","trail","trains&quot","transact","transfer","transform","transpar","travers","treat","tree","tree–which","tri","trick","trigger","tripl","trivial","true","trueli","truethi","truncat","truthi","tuesday","tumbler","turn","tusks&quot","tutori","tv","twain","twice","two","type","type’","typic","tyranus&quot","uberfunct","uberjar","ubiquit","ubuntu","uk&quot","ultim","unabl","unaffect","unambigu","unbound","unchang","uncheck","uncl","under","underli","underneath","underscor","understand","undeterminist","undisclos","unexpect","unfold","unfortun","uniform","uniformli","uniqu","unit","univers","unix","unless","unlik","unmaintain","unmerg","unneed","unpack","unpars","unqiu","unreal","unsaf","unsupportedoperationexcept","until","unus","unwieldi","up","up&quot","uparrow","updat","upon","upper","uri","url","us","used&quot","user","user$half","user$varg","user.behaviour","user/cat","user/foo","user/hint","user/launch","user=&gt","usernam","usng","usr/loc","usual","uswitch","utc","util","utmost","vader","vader&quot","val","valid","valu","var","var&#39;","varg","vari","variabl","variad","variat","varieti","variou","var’","vast","vastli","vc","vector","vehicl","ventur","verb","veri","vero","version","via","viabl","vibrant","video","view","vim","virtual","vm","void","w","wait","walk","walkthrough","walmart","want","warn","wasn’t","way","we&#39;v","web","webapp","wednesday","weekli","weird","welcom","well","well–almost","went","we’d","we’ll","we’r","we’v","what","whatev","wherea","whether","while(1&lt;2","whilst","whitespac","who&#39;","whole","whose","wide","widget","wikipedia","window","wing","wise","wish","within","without","won&#39;t","wonder","wondr","word","words.txt&quot","work","workbook","workflow","workshop","workspac","world","world!&quot","world&quot","worri","wors","worth","wrap","wrapper","wrie","write","writen","writer","write–w","written","wrong","x","x&quot","x*=i","x+=1","x+=i","x/=i","x/a","x/ignit","x1","x2","xml","xml/element","xml/pars","xs","xs.length","xs[i","y","y/b","y1","y1][x2","y2","ye","year","yet.&quot","yield","yo","you&#39;ll","you&#39;r","you&#39;v","your","yourself","youtub","you’ll","you’r","z","z0","za","zero","zip","zipper","zulu"],"pipeline":["trimmer","stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","body":"Clojure.practical.li\n\nClojure is a simple, powerful and fun language to develop any and all applications. It has a simple syntax that is quick to learn and a wide range of Clojure libraries to build any kind of apps and services. Its also easy to use any existing Java / JVM Language code or libraries as part of your Clojure apps.\nIn this workshop we take a hands on approach where everyone takes Clojure code and experiments with it using the REPL (interactive runtime environment). You will quickly get a feel for Clojure by evaluating, breaking, fixing and extending code in the REPL, all the while getting instant feedback on what your code is doing.\nAs we work through code we will discuss the concepts behind Clojure, including functional programming, &quot;pure&quot; functions and a stateless approach with persistent data structures, changing state safely, Java interoperability and tooling around Clojure.\n\nSupporting Resources\nWorkshop\n\nGetting started with Clojure\nClojure through code - sample code to support this project\nLighttable Koans - exercises to help you discover Clojure\nClojure Webapp workshop - building server-side webapps in Clojure\n\nLearning Clojure\n\nClojure.org, features and rational\nClojure documentation\nClojure cheetsheet\nOfficial Google group\nCrossClj - cross-referencing the Clojure ecosystem\nBrave Clojure\n\n\nHint There are over 20 excellent books published on Clojure that go into detailed theory behind the language\n\nCommunity\n\nClojure-docs - community docs\nCrossCLJ - cross-referencing the Clojure ecosystem\n4Clojure exercises &amp; 4Clojure Google group\nLondon Clojurians and their Google group\nUncle Bob presents Clojure\n\nThis work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets).\nSpacemacs, Practicalli by John Stevenson is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.Based on a work at Spacemacs, Practicalli on Gitub.Permissions beyond the scope of this license may be available at @jr0cket.\n"},"using-the-workshop/":{"url":"using-the-workshop/","title":"How to use the workshop","body":"How to use the workshop\nIf you are new to Clojure, it is recommended that you follow the workshop in order.\nMost sections of the workshop are independent of each other so if you already know a particular topic you can either skip it or very quickly look at the examples.  Where there are dependencies on previous chapters, the section will indicate this at the start of the section.\nHelp &amp; discussions\nShould you need help or want to discuss anything related to this workshop in more detail, please ask questions in the Practicalli chat room (powered by Gitter.im).\nAll questions are welcome, nothing is to basic to ask and the chat room follows a code of conduct.\n\nPreparing for the workshop\nPlease check the technical requirements for this workshop for this workshop and if you like to have the working code rather than type it all in then clone the code examples for the workshop\n\nTechnical Requirements for this workshop\nCode examples for the workshop\n\n"},"using-the-workshop/requirements.html":{"url":"using-the-workshop/requirements.html","title":"Technical Requirements","body":"Requirements\nThere are just a few requirements for this workshop. Please test you have the following tools working at the version numbers suggested (or greater):\n\nJava runtime environment (JRE) version 1.8 - test with java -version in a command line window\nLeiningen version 2.6 - test with lein version in a command line window\nA Clojure aware editor with REPL support, either:\nLightTable version 8 (recommended for beginners)\nEmacs 24.5.x and Spacemacs 0.105.20\n\n\nA Git client version 2.7.x (optional - to download code examples)\nA Github account - to fork the code examples &amp; submit pull requests (optional)\n\nSetting up your enviornment\nSee the section on Clojure Development Environments for details on how to set these tools up.\n\nHint You may notice that there is no actual Clojure installation.  Clojure is a library that is added to the project, just like any other dependency (ie. in Maven, Gradle, etc).\nThe Clojure library is very small and Leiningen caches it and oll other libraries locally in the same folder structure that Maven uses, eg ~/.m2/repository/\n\n"},"using-the-workshop/code-examples.html":{"url":"using-the-workshop/code-examples.html","title":"Code Examples","body":"Code Examples for the Workshop\nThe code for this workshop is contained in the Github repository Clojure Through Code.\nTo get a copy of the repository, use the following git clone command which creates a new directory called clojure-through-code.\ngit clone https://github.com/practicalli/clojure-example.git\nEach major section of the workbook has example code in a different file (and as you will discover, a different namespace)\nTo try out the example Clojure code, open the project in your favorite Clojure aware editor and start evaluating the code expression by expression.\n\nHint Please note that the current sections of the workbook and sample code are being updated, so there may be some mis-match until this is complete- @jr0cket: Sun  1 May 13:33:41 BST 2016\n\nEnjoy.\n"},"development-environments/":{"url":"development-environments/","title":"Development Environments","body":"Development Environments\nThis workshop encourages LightTable &amp; Leiningen as the development environment, as they are the easiest tools to set up.\nLeiningen is the build automation tool used to manage Clojure projects.  It will create projects from templates and run our Clojure environment (REPL).\nLightTable is a Clojure aware editor that supports the dynamic workflow of Clojure development in a REPL.  LightTable is also written in Clojure (and ClojureScript).\nThe following pages will show you how to set up LightTable and Leiningen.\n"},"development-environments/java.html":{"url":"development-environments/java.html","title":"Java","body":"Java - a host platform for Clojure\n\nYou will need to have a Java Runtime Edition (usually installed on most computers by default) to run any Clojure applications.  Version 8 is recommended (although version 6 &amp; 7 should work).\nTo test if you have Java on your computer, open a command line window and run the command\njava -version\n\nInstalling the Java Runtime Edition\nDownload and install the latest Oracle Java SDK (version 1.8 at time of writing).\nAlternatively, install OpenJDK or Zulu build of OpenJDK\nUbuntu\nThe OpenJDK is available as a package on Ubuntu and can be installed via the Ubuntu software center or via the command line:\nsudo apt-get install openjdk-8-jre\n\nWhy is Java Required\nClojure was designed as a hosted language, which means it is developed and run on top of Java&#39;s Virtual Machine (JVM).  However, its not neccessary to learn the Java language to use Clojure.\nClojure is compiled into Java bytecode when you evaluate the code.  This compilation happens in the background so you dont usually see it happening.  For example, if you are using the Clojure REPL then each time you evaluate an expression it is compiled into Java bytecode and then injected into the running REPL and the results are then returned.  This all happens pretty instantaneously.\nMost of the current Clojure tooling was developed for Clojure on the JVM, for example Leiningen.\nAs Clojure runs on Java you can also use all the other libraries that run on the Java Virtual machine, regardless of whether those libraries were written in Java, Clojure, Scala, JRuby, jython, Groovy, etc.\n"},"development-environments/leiningen.html":{"url":"development-environments/leiningen.html","title":"Leiningen","body":"Leiningen Build tool\n\nleiningen.org (pronounced line-ing-en) is a very powerful build automation tool for automating Clojure projects.  With Leiningen you can:\n\nCreate Clojure Projects with templates\nDefine and manage dependencies\nRun an interactive Clojure environment (REPL)\nRun unit tests using Clojure.test\nRun your Clojure application\nCreate a deployable Clojure application, as Java Jar file\nDeploy a Clojure library to a remote repository\n\n\nInstall Leiningen\nDownload the install script from leiningen.org and run the Leiningen script in a terminal\nOn Linux and MacOSX, make the script executable first\nchmod a+x lein\n./lein\n\n\nHint I put the lein script in ~/bin directory which is part of my operating system execution path ($PATH).  To include the ~/bin directory in the system path, I add the following code to the ~/.profile file\n\n\n\nTesting Leiningen is working\nTest that Leiningen is installed with the following command\nlein version\n\nOutput should look similar to:\nLeiningen 2.6.1 on Java 9-internal OpenJDK 64-Bit Server VM\n\n"},"development-environments/lighttable.html":{"url":"development-environments/lighttable.html","title":"LightTable","body":"LightTable\nLightTable is a simple development tool that supports Clojure, ClojureScript, JavaScript and Python languages.  The tool is open source and written in Clojure &amp; ClojureScript (with a little JavaScript &amp; CSS)\n\nInstall Lighttable\nDownload lighttable.com and follow the suggested instructions:\nMacOSX\n  Install the lighttable.dmg file just as any other MacOSX package\nLinux\n  Extract the contents of the downloaded lighttable file to a suitable directory (/usr/local or ~/apps).  Add LightTable to the system $PATH, or add the following script to the sytem $PATH.\n\n\nWindows\n  Download the windows zip file for LightTable and extract the installer, following the instructions inside the installer.\nLightTable configuration\nLighttable configuration is in the file user.behaviours.  Open the user behaviours file, Ctrl-space and type user behaviors.  When you save the file, Ctrl-s, changes are applied immediately.\nSample User Behaviours file\nHere is a sample of user behaviours file for LightTable\n\n\nUsing LightTable\nLightTable has an online tutorial entitled Getting started with LightTable\nI create a project first with Leiningen, open the project directory in the LightTable workspace and open any files I want to work with.  I then connect the open editor window for the file by pressing Ctrl-Enter at the end of an expression.\n\nHint my approach is documented in the quick demo section of my Clojure &amp; LightTable slides from JAXLondon 2013.\n\n"},"development-environments/other-tools.html":{"url":"development-environments/other-tools.html","title":"Other tools","body":"Other Development tools for Clojure\nThere are several development tools you can use to support your Clojure development.\nMy current choice of development environment is Spacemacs, a feature rich configuration for Emacs.  See my article on Spacemacs for Clojure development\nSome common setups I have seen in use for Clojure development are:\n\nModern - LightTable, Leiningen, Git\nModern Classic - Spacemacs with Clojure layer, Leiningen, magit\nClassic - Emacs with Cider, Leiningen, magit\nJava (InteliJ) - Cursive Clojure\nJava (Eclipse) - Counterclockwise documentation site\nUbiquitous - Vim, nailgun, Leiningen, Git\nSimple - Nightcode, Leiningen, Git\nLightweight - Atom, Protorepl, Leiningen, Git\n\nThere may be many more variations, however you should find a development environment with at minimum the following features:\n\nstarting &amp; using a REPL, with in-line evaluation\nsyntax highlighting &amp; coloured brackets (eg. rainbow-delimiters in Emacs)\nautocomplete of  names (functions, symbols, keywords, etc)\nsnippets / templates\n\nTools for developers with a Java background\nClojure runs on the Java Virtual Machine so its not surprising that there is good support for Clojure in the major Java IDEs.\nEclipse\nCounterclockwise is an Eclipse IDE plugin to provide an integrated development environment for Clojure.  Take a look at the Counterclockwise documentation site for installation instructions\nInteliJ\n\nCursive is a Clojure IDE that aims to understands your code.  Advanced structural editing, refactorings, VCS integration and much more, all out of the box.  It is currently a standalone tool, although will eventually become an IntelliJ plugin.\nLa Clojure is a plugin for IntelliJ IDEA.  Provides Clojure language support: syntax and error highlighting, completion, navigation and refactorings.\nNetbeans\nNetbeans did have great support for Clojure, but unfortunately at the time of writing the Clojure plugin has been unmaintained for so long it is not a viable tool to use for Cojure development.\n"},"overview/":{"url":"overview/","title":"Overview of Clojure","body":"Clojure Overview\nI love Clojure because its powerful, flexible and fun.\nHere are a selection of features which appealed to me when I first looked at Clojure\nDynamic Language &amp; runtime environment (REPL)\n\nquickly explore your problem domain by evaluating code on the fly in the REPL\nnew code is compiled as evaluated, no seperate compile cycle or wait time\nvery small language syntax, extensible via macros\n\n\nA lot of the best programmers and the most productive programmers I know are writing everything in Clojure and swearing by it, and then just producing ridiculously sophisticated things in a very short time. And that programmer productivity matters. Adrian Cockcroft - Battery ventures, formally Cloud Architect, Netflix\n\nPragmatic Functional Programming\n\nencourages an immutable approach that helps keep the code simple\nminimising state changes makes scaling your application easy through parallelism\nbuilt-in persistent data structures (List, Map, Vector, Set) give an efficient way of modifying data without side effects\nConcurrency becomes trivial with pure functions &amp; immutable data\n\nManaged State Changes\n\nReference types atoms &amp; refs for mutable state\nChanges are done safely within Software Transactional Memory (STM), like having an in-memory ACID database managing all state changes under the covers.\n\nHosted language with consise interoperabilty\n\nClojure can run on the Java Virtual Machine (JVM), Microsoft Common Language Runtime (CLR) or JavaScript engines via ClojureScript.\nClojure is compiled to bytecode, giving very high performance (close to Java, C++, etc.)\nSimple syntax to call any other code that runs on the JVM (Java, Scala, JRuby, Jython, etc) or Microsoft CLR.\n\nA modular / component approach to design\nA typical approach with Clojure is to break a big problem space into small libraries, each with a specific perpose.  This helps deconstruct complex systems into smaller, easier to understand code.  This also helps make these Clojure libraries reusable in many other projects, reducing the development effort.\nClojure is\n\na general purpose language that compiles code that runs on the Java Virtual Machine (JVM).\na functional programming language with a data centric approach (mostly pure)\na very small syntax (12 primitives, 4 of which were added for Java interoperability)\na dynamic language in terms of type inference and runtime (REPL)\na fast-feedback approach for development, helping you quickly explore a problem domain\na modern implementation of LISP\na highly extensible language via macros\nan efficient way to manage state changes via persistent data structures &amp; software transactional memory\n\n\nHint In functional programming we avoid changing state as much as possible.  If a function does not change state it is referentially transparent, always returning the same result when given the same input (arguments).  These are refered to as Pure Functions.  Pure functions are truely modular as they do not affect any other part of the system and do not require complex threading for scalability.\n\nClojureScript\nClojureScript is Clojure that compiles to to JavaScript and runs in the browser (JavaScript Engine).  Most of the code and libraries available for Clojure works seamlessly when compiled to JavaScript.\nClojureScript is based heavily on the work done for Google Closures and there is a strong focus on Reactive client side apps.\nThere is a common file extension, .cljc that signifies Clojure code that will run on the JVM and JavaScript engines.\nClojure Community\nThere is a vibrant and highly active community around Clojure.  In London alone there is a regular monthly talk and 3 or 4 coding dojo every month.\nCommunity resources\nClojure. tv and Planet Clojure are the tip of the iceburg to a large amount of Clojure resources available via the Internet.\n"},"overview/purpose.html":{"url":"overview/purpose.html","title":"When to use Clojure","body":"When to use Clojure\nClojure is a general purpose language, so you can use it for any kind of application.\nAreas where Clojure really excels include:\n\ndealing with data\nmost applications take data, do something with it and return it.  The persistent data structures and vast number of data processing functions in Clojure make most of this trivial.\n\n\nhigh scalability\nas Clojure code is encouraged to be immutable and functions to be pure, you can run millions of parallel instances of your application or service for massive processing power.  These features also vastly simplify concurrent programming.\n\n\nreducing complexity\nbreaking down problems into components / microservices\nClojure and its libraries are all great examples of well designed components and the community strongly encourages this approach.\n\n\n\nSo Clojure is great for webapps, data science, big data, finance industry (banking, trading, insurance, etc), devops tools (log analysis, etc) and anything else really.\n\nHint You can also use ClojureScript for Functional Reactive programming ofclient-side apps for browsers and mobile device.\n\n"},"overview/who-uses-clojure.html":{"url":"overview/who-uses-clojure.html","title":"Who uses Clojure","body":"Who uses Clojure\nOver 175 companies have actively advertised their Clojure adoption, and given the broad participation in user groups there are clearly many more organizations using Clojure at some level in their technology stack.\nA quick scan of various job sites shows Clojure positions at companies like Walmart, Facebook, Staples, Consumer Reports, Salesforce, and Amazon. It doesn&#39;t get much more mainstream than that.\nHere is just a small and diverse set of example companies that use Clojure for development.\n\n\n\nCompany\nType of applications\n\n\n\n\nCisco\nMalware analysis &amp; threat intelligence platform (expert system with core.logic)\n\n\nDeuche Bank\nProcessing event streams from Apache Storm\n\n\nAtlassian\nCollaborative editing platform for all their products\n\n\nMail Online\nPublishing pipeline\n\n\nCircle CI\nFrontend of CI server in Clojurescript &amp; test suite\n\n\nLinkedIn\nPowers the LinkedIn social graph\n\n\nWalmart\neReceipts project to process every purchase from 5,000+ stores\n\n\nSwiftKey\nPredictive intelligence platform (possibly used with Microsoft Cortana)\n\n\nRoomkey.com\nHotel booking system to rival Expedia (with a tiny development team)\n\n\nUSwitch\nCreating meaningful data from multiple sources\n\n\nFunding Circle\nAdopting Clojure as their main language (from Ruby, etc)\n\n\nBraintree (Paypal)\nPayment processing pipeline with Kafka\n\n\nCitiGroup\nFinancial Trading\n\n\nNetflix\nMap-Reduce Languges for writing Apps for Hadoop Pig\n\n\nMastodon C\nData centre analysis (Incanta, Storm)\n\n\nThoughtworks\nAgile development for Client projects\n\n\nVero Insurance\nRebuilt policy management system in Clojure with Thoughworks\n\n\nMeta-X\nPerformance art (Overtone, Quil)\n\n\nSalesforce\nUndisclosed\n\n\n\nThere are many more examples of projects on the HackerNews thread: Ask HN: Who&#39;s using Clojure in Production\nTech Radar\nClojure is also defined as a technology that can be adopted since 2014, according to the Thoughtworks technology radar.\n\n"},"overview/syntax.html":{"url":"overview/syntax.html","title":"The syntax","body":"Clojure syntax - brackets everywhere\nClojure is percieved as having an abundance of (), the symbols that represent a list.\nAs Clojure is a LISP (List Processing) language then everything is written in the form of a list.  This makes Clojure very powerful and also easier to read.\nUsing a list structure also demonstrates the data-centric nature of Clojure.  Every item in the list has a value, with the first item evaluated by a function call.\n\nComment The seemingly abundance of () does put some people off until they realise there are fewer &quot;special characters&quot; in Clojure than in other C-based langauges (Java, C#, C, etc).  A good editor will also match brackets for you as you type, making it easy to write Clojure.\nSyntax differences seems a very trivial reason to avoid learning Clojure.  Any Clojure or Lisp aware editor will significantly reduce your typing by automatically closing brakets, eliminating errors due to missing delimiters (ie. no more errors due to missing ; in C-based languages)\n\nPrefix notation\nInstead of having a mix of notations like in many other languages, Clojure uses pre-fix notation entirely.\nIn Clojure operators are applied uniformly and there is no room for ambiguity:\n(+ 1 2 3 5 8 13 21)\n    (+ 1 2 (- 4 1) 5 (* 2 4) 13 (/ 42 2))\n    (str &quot;Clojure&quot; &quot; uses &quot; &quot;prefix notation&quot;)\n\nIn Java and other C-based languages you have to explicitly add operators everywhere and there can be a mixture of notations\n(1 + 2 + 3 + 5 + 8 + 13 + 21);\n    (1 + 2 + (- 4 1) + 5 + (* 2 4) + 13 + (/ 42 2));\n    StringBuffer mystring = new StringBuffer(&quot;C-based languages&quot; + &quot; mix &quot; + &quot;notation&quot;);\n    x+=1; \n    x++; \n    x--; \n    x+=y; \n    x-=y; \n    x*=y; \n    x/=y;\n\n"},"overview/design.html":{"url":"overview/design.html","title":"Design","body":"Clojure Design\nClojure leads to a very component based approach to development.  There are no huge and bloated frameworks in Clojure.  The core is very small.  Hundreds of focused libraries to use in collaboration.\nBoiled down to the most simplest structure, Clojure applications you write typically look like this:\n;; define a namespace\n(ns name-space.name)\n\n;; define one or more immutable data structures - the fewer the better typically\n(def my-data-struture [[{}{}]])\n\n;; define behaviour that acts on data structures inside one or more functions\n(defn my-function [paramter] \n  (my-behaviour parameter))\n\n;; Call those functions to make your application do something  \n(my-behaviour data)\n\n\nHint As functions always evaluate to a value, a function can be used as an argument to another function (or itself if you get recursive !!)\n\nData focused design - Maps &amp; Vectors\nClojure has 4 built in persistent data structures (list, map, vector, set), however the most commonly used for specificaly manipulating data are map and vector or some combination of the two.\nMaps and vectors are two more built-in persistent data structures that are more commonly used to represent data within a Clojure application.\nA vector is similar to an array in that its an indexed collection optomised for random access.  Vectors are a catch all data structure that can hold any type of information, including other data structures and function calls.\nA map is a key value pair, with the keys typically represented with clojure keywords.\nMaps are a collection of key / value pairs that provide an easy way to reference data by keys.  Its common to use a Clojure keyword type as the keys as keywords are self-referential (they point to themselves).  Using keywords in a map means you can use a specific keyword as a function call on the map that returns its associated value.\nSome examples of using these data structures this are:\n;; A map of maps of maps with occasional vectors\n\n{:starwars {\n    :characters {\n      :jedi   [&quot;Luke Skywalker&quot;\n               &quot;Obiwan Kenobi&quot;]\n      :sith   [&quot;Darth Vader&quot;\n               &quot;Darth Sideous&quot;]\n      :droids [&quot;C3P0&quot;\n               &quot;R2D2&quot;]}\n    :ships {\n      :rebel-alliance  [&quot;Millenium Falcon&quot;\n                        &quot;X-wing figher&quot;]\n      :imperial-empire [&quot;Intergalactic Cruser&quot;\n                        &quot;Destroyer&quot;\n                        &quot;Im just making these up now&quot;]}}}\n\nExtensibility via Macros\nYou can extend the language and define your own constructs using Macros.\nThe first example of this you see is from Leiningen.  The defproject function is a macro that helps you easily define the configuration of a Clojure project.\nAn example of a macro that is part of the core Clojure language is defn.  When you define a function with defn it is syntactic sugar for defining a thing that is a function.\n(defn my-function [argument] (my-behaviour argument) )\n\n  (def my-function\n    (fn [argument] (my-behaviour argument)))\n\nSpecial forms - the building blocks of Clojure\nThe following are the building blocks of Clojure, everything else is either a macro or a function\nThe Clojure / LISP special forms\ndef, do, if, let, loop, fn, quote, recur, set!, var\n\nThe forms added for Interoperability with the host platform (mainly Java / JVM)\nmonitor-enter, monitor-exit, \ncatch, dot (&#39;.&#39;), finally, new, throw, try\n\n"},"overview/repl.html":{"url":"overview/repl.html","title":"Read, Evaluate, Print Loop (REPL)","body":"Read, Evaluate Print Loop (REPL)\nThe REPL provides a fast, powerful and fun way to develop code.  Some newer languages have a REPL, but most C-like languages do not, slowing down the development cycle.\nOnce you start using a REPL as part of you developement cycle you will feel lost without one.\nDefinition from BraveClojure.com\nClojure (like all Lisps) has an evaluation model that differs from most other languages: it has a two-phase system where it reads textual source code, producing Clojure data structures. These data structures are then evaluated: Clojure traverses the data structures and performs actions like function application or var lookup based on the type of the data structure.\nFor example, when Clojure reads the text (+ 1 2), the result is a list data structure whose first element is a + symbol, followed by the numbers 1 and 2. This data structure is passed to Clojure’s evaluator, which looks up the function corresponding to + and applies that function to 1 and 2.\n\nThe Reader\nClojure is a homoiconic language, which is a fancy term describing the fact that Clojure programs are represented by Clojure data structures. This is a very important difference between Clojure and most other programming languages.  It means that Clojure is defined in terms of the evaluation of data structures and not in terms of the syntax of character streams/files.\nIt is quite common, and easy, for Clojure programs to manipulate, transform and produce other Clojure programs.\nThat said, most Clojure programs begin life as text files, and it is the task of the reader to parse the text and produce the data structure the compiler will see. This is not merely a phase of the compiler.\nThe reader has syntax defined in terms of characters, and the Clojure language has syntax defined in terms of symbols, lists, vectors, maps etc. The reader is represented by the function read, which reads the next form (not character) from a stream, and returns the object represented by that form.\nThere are also Reader Macros that define special rules on top of the Clojure syntax.  They give the language some additional syntax sugar, making your Clojure code compact.  See the reference section on reader macros for more information\nEvaluator\nThe Evaluator takes a data structure as an argument (from the Reader) and processes it using rules corresponding to the data structure’s type, returning the result.\nTo evaluate a symbol, Clojure looks up what the symbol refers to.\nTo evaluate a list, Clojure looks at the first element of the list and calls a function, macro, or special form.\nAny other values including strings, numbers and keywords simply evaluate to themselves.\n\nHint Read the section on Reading, Evaluation and Macros from BraveClojure to see examples of the REPL process.\n\n"},"overview/all-bytecode-in-the-end.html":{"url":"overview/all-bytecode-in-the-end.html","title":"All bytecode in the end","body":"Its all Bytecode in the end\n\nThe REPL is your compiler\n\n\nAs soon as you evaluate your code in the REPL it is also being compiled in the background into Java Bytecode.  So there is no need for a seperate build and run phase.\nAs you can inject code into the running environment you can easily bug fix or itteratively develop your application.\n"},"overview/features.html":{"url":"overview/features.html","title":"Features in more depth","body":"Features of Clojure\nDynamic language\nA problem space can quickly be explored through code to test your assumptions.  The design of code is easy to change as you are not managing type changes, Clojure is very good at managing data that would otherwise lead to exceptions.\nAs a dynamic language the code is quite terse and developers are encouraged to write very modular code, therefore it is easy to refactor.\nDynamic Development - REPL\nClojure has a REPL (Read Evaluate Print Loop), this is the Clojure run-time environment.  You can define functions and data structures, then evalutate them to run either all your code or just a single expression.  You can even change code and re-evaluate it whilst your application is still running and immediately see the effect that change has.\nSo the REPL is a very fast way to explore your problem domain with code\nYou could even connect to the REPL of a live system and change its behaviour without any down time (unless of course you write code that crashes).\n&#39;Pure&#39; Functional Programming\nFunctions return a value (even if that value is nil) and you can therefore use a function as an argument to another function.  This is termed as first order functions.\nClojure encourages a relatively pure approach to functional programming and Clojure can be considered immutable by default\nImmutability\n\nimmutable data structures at its core, everything is immutable by default\nin imperative programming, we change state where ever we like\nin functional programming we avoid changing state as much as possible\nif a function does not change state it is referentially transparent, always returning the same result when given the same input (arguments) - often returned as a pure function\nimpure functions can affect other functions and therefore has to be very mindful of the changes it makes and when it makes them\npure functions are truely modular as they do not affect any other part of the system\n\nPersistent Data Structures\nList, Map, Vector and Set are all built in data structures that are immutable.\nIf you run a function that seems to change a data structure, its actually returning a new data structure.  Via a shared-memory model, new data structures are created cheaply as they share the common data elements from the original data structure and only include additional elements.\nHomoiconicity\nOne thing that keeps Clojure a small language is the fact that the same syntax is used to represent data and behaviour.  For example, a function call is defined using a list, data structures and functions are defined using a list.  In fact everything is a list, although we use a little syntatic sugar here and there to make the code quicker for a human to parse.\nClojure is an implementation of Lisp\nLisp stands for LISt Processing, so its no surprise that all Clojure code is defined in a list.\nThe open Parenthesis ( denotes the start of a list, the first element of that list is evaluated as a function call, everthing else in the list is data.\nThe evaluation of the first element of a list can be behaviour of ( can be over-ridden using quote or its short form the quote character, &#39;, so the list elements are all treated as data.\nRuntime Polymorphism\nSee Clojure arity and multi-methods for more information\nConcurrent Programming &amp; Parallelism\nConcurrent code is much safer when you data does not change state (eg. immutable values).  Clojure encourages an immutable approach with its built in persistent data structures (list, Map, Vector, Set).  Using Pure Fuctions that are not affected by or cause side effects also make writing concurrent code trivial.\nClojure helps you scale your applications by with a parrallel procssing approach, as you can run functions over immutable datastructures without conflict.\nHosted on the JVM\nClojure is compiled to bytecode that runs on the Java Virtual Machine.  This helps Clojure run at a very high performance (close to Java, C++, etc.)\nClojure has a consise and easy to use Java Interoperability, enabling you to use any libraries that run on the JVM (Java, Groovy, Scala, Jruby, Jython, etc).\n\nmany parts of the Clojure standard library, Clojure.core defer to the Java Standard library, for example for I/O (reading,writing files)\nClojure makes invoking Java very convieninet and provides special primative constructs in the Clojure language to do so (new .javaMethodName javaClassName. etc)\n\n\nClojureScript generated JavaScript that will run in a browser.  ClojureCLR will compile to bytecode that runs on the Microsoft .Net platform.\n\nManaged State Changes\nUsing atoms or refs in clojure you can have mutable data.  Changes are done safely within Software Transactional Memory (STM), like having an in-memory ACID database managing access\nExtend the langugage with Macros\nClojure uses macros\n\n\n\nFixme Review the following content to see if its relevant ?\n\n\n\n** Input &amp; output with functional programming\n\nother fp languages like haskel &amp; Scala use monads to encapsulate data changes whilst appearing stateless to the rest of the program - monads allow us to sneak in impure code into the context of pure code.\nClojure doesnt try and enforce functional purity, so any function can include impure code\nmost functions should be pure though or you loose the benefits of functional programming\nClojure encourages minimal state changes / mutable state - so its up to the developer to keep the ratio of mutalble data small\nClojure uses reference types to manage threads and mutable state.  References provide syncronisation of threads without using locks (notoriusly cumbersome).  See STM\nSupporting concurrency\natoms etc\nautomatic management of state changes via Software transactional memory - like having an ACID database in memory, managing requests to change values over time.\nby having immutable data structures - if your values do not change then its trivial to have massive parallelism.\nA modern LISP\nleaner syntax and not as many brackets as LISP\nclean data structure syntax at the core of the language\nLiSP was the first language to introduce first class functions, garbage collection and dynamic typing, which are common in languages used today\n\nMacros\n\na function that takes in source code and returns source code, replacing the macro code\nuse macros to take out repetition / boilerplate code\nas LISP syntax is extremely simple it is much easier to write macros that work compared to non-LISP languages\n\nClojure emphasizes safety in its type system and approach to parallelism, making it easier to write correct multithreaded programs.\nClojure is very concise, requiring very little code to express complex operations.\nData centric design - a well constructed data structure helps define and clarify the purpose of the code\nModularity - Clojure and its community build things in modules / components that work together (in a similar design approach to the Unix file system, for example).\nIt offers a REPL and dynamic type system: ideal for beginners to experiment with, and well-suited for manipulating complex data structures.\nA consistently designed standard library and full-featured set of core datatypes rounds out the Clojure toolbox.\nClojure is close to the speed of Java\nConstraints\nClojure relies on the JVM so there can be a longer boot time than a scripting language like Javascript.  However, as you can connect to the Clojure runtime (the REPL) of a live system and because Clojure is dynamic, you can make changes to that live system without any downtime.\nIf you require more performance from Clojure, you can specify ahead of time compilation.\n"},"basic-clojure/":{"url":"basic-clojure/","title":"Some Basic Clojure","body":"Some Basic Clojure\nIn this section we will evaluate some code so you can get familiar with the syntax and basic constructs of Clojure.  It will also help ensure that your development environment is working okay.\n\nNote Create a project using the Clojure build tool Leiningen to explore some basic Clojure code\n\nRun the following command to create a project (you can use a different name to playground if you prefer)\nlein new playground\n\n\n\nNote Run a Clojure REPL to have the run-time enviroment for Clojure\n\nlein repl\n\n\nNow you are ready to enter Clojure code...\n"},"basic-clojure/whats-my-environment.html":{"url":"basic-clojure/whats-my-environment.html","title":"Whats my environment","body":"Whats my environment\nClojure has symbols (names that point to values).  Some of these symbols are built into the language and their names start (and usually end with) the * character.\nWhen symbols are evaluated they return the value that they point to.\n\nNote Check the version of Clojure running in your REPL.\n\nEnter the following code into the Clojure REPL:\n*clojure-version*\n\n\nThe full clojure version can be used to check you are running a particular version, major or minor of Clojure core.  This information is represented as a map containing :major, :minor, :incremental and :qualifier keys.    Feature releases may increment :minor and/or :major, bugfix releases will increment :incremental.  Possible values of :qualifier include &quot;GA&quot;, &quot;SNAPSHOT&quot;, &quot;RC-x&quot; &quot;BETA-x&quot;\n\nHint A map in Clojure is a built in data structure represented by { }. A map is a key-value pair and there must be a value for every key for the map to be valid.  Keys are often defined using :keyword, a self-referential pointer that can be used to look up values in a map or other data structures.\n\nViewing the Class path\nClojure compiles to Java bytecode that runs on the JVM, so that code needs to be available in the Java class path.\n\nNote Look at the class path for your project\n\nThe directory where the Clojure compiler will create the .class files for the current project.  All .class files must be on the class path otherwise the Clojure run time environment will not know they exist.\n*compile-path*\n\n\nNamespace\nA namespace in clojure is a way to seperate functions and data structures into logical components (similar to Java packages).  A clojure.lang.Namespace object representing the current namespace.\n\nNote Find out the current namespace\n\n*ns*\n\n\nLast 3 values in the REPL\nYou can also get the 3 most most recent values returned in the REPL.\n\nNote Evaluate the following three expressions in the REPL, then pull out the last three results\n\n(+ 1 2 3)\n\n(+ 1 2 (+ 1 2) (+ 2 3))\n\n(str &quot;Java will be fully functional in version &quot; (+ 10 (rand-int 20))\n\nNow get the last three values returned in the REPL\n(str *1 *2 *3)\n\n\n\nHint You can cycle through previous expressions entered into the REPL using the Shift-UpArrow keyboard shortcut\n\n"},"basic-clojure/reading-project-file.html":{"url":"basic-clojure/reading-project-file.html","title":"Reading project file","body":"Reading your Project configuration\nInformation about our Clojure project is contained within our project.clj file.  We can read in this file and check the project information in that way.\nThe slurp function reads in the contents of a file or content from a web page / URL.\n\nNote Read the Clojure project.clj file using the slurp function\n\n(slurp &quot;project.clj&quot;)\n\nThe output of slurping the project file should similar to the following\n\n\nNote Tidy up the result of the slurp value using the function read-string\n\n(read-string (slurp &quot;project.clj&quot;))\n\n\nJust the project version\nReally we just want to get the project version, not all the information.  As a list is returned from slurp and read-string then we can simply wrap a function around the first two functions to get the value we want\nThe nth funtion takes the data structure as the first argument and the element number (starting from zero) as the second argument.\n\nNote   Use the nth function with read-string and slurp to select the element we actually want.\n\n(nth (read-string (slurp &quot;project.clj&quot;)) 2)\n\n\n"},"basic-clojure/threading-syntactic-sugar.html":{"url":"basic-clojure/threading-syntactic-sugar.html","title":"Threading syntactic sugar","body":"Threading Syntax Sugar\nThe previous code is written in classic Lisp style.  When you come to read Lisp, you start from the inside out.  In this case you start with (slurp ...) and what it returns is used as the argument to (read-string ...) and so on...\nIn our minds we probably constructed the following basic algorithm:\n\nGet the contents of the project.clj file using slurp\nRead the text of that file using read-string\nSelect just the third string using nth 2 (using an index starting at 0)\n\nCan we rewrite our Clojure code to fit the way we think?\nThread first macro\nUsing the thread-first macro -&gt; we can chain Clojure functions together with a terser syntax, passing the result of the first evaluation as the first argument to the next function and so on.  Using this style, we can write code that matches the algorithm in our head.\n\nNote Refactor the Clojure code using the thread-first macro\n\n(-&gt;\n &quot;./project.clj&quot;\n slurp\n read-string\n (nth 2))\n\n\nHint The &quot;project.clj&quot; is a string, so when you evalute it as an expression, it simply returns the same string.  That string is then passed as an argument to any following functions.\n\nUsing the threading macro, the result of every function is passed onto the next function in the list.  This can be seen very clearly usng ,,, to denote where the value is passed to the next function\n(-&gt;\n &quot;project.clj&quot;\n slurp ,,,\n read-string ,,,\n (nth ,,, 2))\n\n\nHint Commas in clojure are treated as whitespace, they are simply ignored when it comes to evaluating code.  Typically commas are rarely used and only to help human readabilty of the code\n\nTo make this really simple lets create a contrived example of the threading macro.  Here we use the str function to join strings together.  Each individual str function joins its own strings together, passing the resuting string as the first argument to the next function.\n(-&gt;\n (str &quot;This&quot; &quot; &quot; &quot;is&quot; &quot; &quot;)\n (str &quot;the&quot; &quot; &quot; &quot;threading&quot; &quot; &quot; &quot;macro&quot;)\n (str &quot;in&quot; &quot; &quot; &quot;action.&quot;))\n\nOutput\n;; =&gt; &quot;This is the threading macro in action&quot;\n\nThread-last macro\nUsing the thread-last macro, -&gt;&gt;, the result of a function is passed as the last argument of the next function call.  So in another simple series of str function calls, our text comes out backwards.\n(-&gt;&gt;\n (str &quot; This&quot;)\n (str &quot; is&quot;)\n (str &quot; backwards&quot;))\n\n;; =&gt; backwards is This&quot;\n\n\nNote Create a new map that contains the project configuration for the current project\n\n(-&gt;&gt; &quot;project.clj&quot;\n     slurp\n     read-string\n     (drop 2)\n     (cons :version)\n     (apply hash-map)\n     (def project-configs))\n\n;; Evalute the new map defined as project\nproject\n\nWe pull out the map of project information using slurp, tidy the text up using read-string and drop the first two elements (defproject playground).  This returns a list that we want to turn into a map, but first we need to add a key to the version number.  Using the cons function we can add an element to the start of the list, in this case the :version keyword\nNow we can successfully convert the list that is returned into a map, with balanced key-value pairs.  Then we simply create a name for this new map, project-configs, so we can refer to it elsewhere in the code.\n\nHint The slurp function holds the contents of the whole file in memory, so it may not be appropriate for very large files.  If you are dealing with a large file, consider wrapping slurp in a lazy evaluation or use Java IO (eg. java.io.BufferedReader, java.io.FileReader.).  See the Clojure I/O cookbook and The Ins &amp; Outs of Clojure for examples.\n\n"},"basic-clojure/show-me-the-docs.html":{"url":"basic-clojure/show-me-the-docs.html","title":"Show me the docs","body":"Show me the docs\nClojure functions are documented by adding a string to the function definition.  This doc string can then be viewed by the function doc.\n\nNote View the documentation for three common functions used in clojure\n\n(doc doc)\n\n(doc apply)\n\n(doc cons)\n\nHere is the doc string for doc\n\nThe doc and source functions are only included in the user namespace, which includes the library core.repl.  If you switch to another namespace or your editor places you in the current namespace of your project, these funcitons will not be available unless you including core.repl in the current namespace.\nFrom the REPL, evaluate the expression:\n(use &#39;clojure.repl)\n\nYou could also require the clojure.repl library in your own code, however if you have a good editor it should provide these features without including this library.\n(ns foobar\n(:require [clojure.repl :refer :all]))\n\n\n\nWriting your own documentation\n(defn my-function \n  &quot;I must practice writing clear and meaningful documentation for my functions&quot;\n  [arguments]\n  (str &quot;I should wrie better functions too&quot;))\n\n\n\n\nAnd the is source code too\nYou can also see the source code of Clojure functions, using the function called source\n(source map)\n\n  (source doc)\n\n  (source source)\n\n\n\nHint As the documentaiton for a function is part of its definition, by looking at the source of a function you also get the documentation.\nAny Clojure aware development tool should also show you at least the syntax of using the function as you type it.\n\n"},"basic-clojure/java-interop.html":{"url":"basic-clojure/java-interop.html","title":"Java Interoperability","body":"Java Interoperability\nClojure provides very clear and simple syntax for Java interoperatility, using the functions such as . new import\nAs Clojure is a hosted language on the JVM, its very easy to include any library from other languages that also run on the JVM, i.e. Java, Groovy, Scala, Jython, JRuby, etc.\nThe Leiningen build tool provides a simple way to include libraries as dependencies, using the :dependencies section of the project.clj file.  Maven Central is one of the default repositories libraries are pulled from, the other being Clojars.org.\nClojure includes the java.lang library automatically, so you can call any methods from that library without having to import them or include any dependencies\nThe syntax\nIts very easy to call Java methods and objects from clojure using the following syntax\n(.instanceMember instance args*)\n(.instanceMember Classname args*)\n(.-instanceField instance)\n(Classname/staticMethod args*)\nClassname/staticField\n\n\nNote Convert a string to upper case &amp; show the approximate version of Pi\n\n(.toUpperCase &quot;I was low, but now I&#39;m up&quot;)\n\n\nMath/PI\n-&gt; 3.141592653589793\n\nGetting the Java environment\nEariler we used Clojure functions to find information about our environment.  We can also used the getProperty() method from the java.lang.System object to ask for the java version and jvm name.\n\nNote Get version of Java &amp; the JVM, returning those values as a meaningful string.  Then get the version of the Clojure project\n\n(str &quot;You are running Java version &quot; (System/getProperty &quot;java.version&quot;) &quot;with the JVM&quot; (System/getProperty &quot;java.vm.name&quot;)) \n\n(str &quot;Latest project version: &quot; (System/getProperty &quot;playground.version&quot;))\n\n\nNote Use System/getenv to return your system&#39;s environment variables as a map\n\n(System/getenv)\n\n\nYou may notice that this is a map data structure that we return, so we can use use destructuring or the maps behaviour itself to pull out information.\n\nHint A full list of properties can be seen in the getProperty() documentation\n\nThere are more examples of Java Interoperability in the next few sections.\n"},"basic-clojure/more-java-fun.html":{"url":"basic-clojure/more-java-fun.html","title":"More Java fun","body":"More Java fun\nLets try some more examples to show how easy it is to use Java methods and objects.  Remember that everything in java.lang is available in your Clojure project by default\nReturning specific types\nClojure has types, after all it runs on the JVM and included java.lang library in ever project.  Types are infered at runtime, saving you the need to design types yourself.\nSometimes you want to ensure a value is of a particular type and you can use Java to do this.\n\nNote Return a string value as an integer\n\n(. Integer &quot;123)\n\n;; Or the more common short-hand form\n\n(Integer. &quot;123&quot;)\n\nThis is the equivalent to the Java code:\nInteger myInt = new Integer(&quot;123&quot;);\n\nThe . function essentially instantiates a new object from the class, in this case Integer, passing any arguments to its constructor.\n\nHint Example: converting the port number read from an environment variable as a string which needs to be passed to the Jetty server as a number.  See the Clojure Webapp workshop an example.\nMore on types in the section a quick look at types\nfixme The following is work in progress\n\nUsing Java date\n\nNote Use java.util.Date to explore date and time\n\n(import java.util.Date)\n\n(Date.)\n\n(def now (Date.))\n\n(str now)\n\n\nIts easy to create a local reference to a Java Date object instance and then call methods on that date object\n(let [date (java.util.Date.)] (.getHours date))\n\nOr using the threading macro, we can make the code a little clearer\n(-&gt; \n   (java.util.Date.)\n   (.getHours))\n\nIts Joda Time\nclj-time is a Clojure wrapper for Joda time.  As this is an external library, you need to add it to your project.clj file as a dependency.  To find the latest version, check the clj-time library on Clojars.org\n\nNote Add the clj-time dependency to your project (restart needed), require the clj-time library in your code and use the functions now, formatters&amp; unparse\n\n(require &#39;[clj-time.core :as time])\n(require &#39;[clj-time.format :as time-format])\n\n(time/now)  \n\n;; ISO 8601 UTC format\n(def time-formatter (time-format/formatters :basic-date-time))  \n(time-format/unparse custom-formatter (date-time 2010 10 3))\n\nSwing coding\nSwing GUI coding in Java feels quite messy to me, however using Swing in Clojure feels much cleaner.  Using the doto function allow you to chain function (Java method) calls together.\n\nNote  Start with the import function to add the neccessary swing libraries.  Then create a button and add it to a panel, adding that panel to a frame.\n\n(import &#39;(javax.swing JFrame JPanel JButton))\n(def button (JButton. &quot;Click Me!&quot;))\n(def panel (doto (JPanel.)\n             (.add button)))\n(def frame (doto (JFrame. &quot;Hello Frame&quot;)\n             (.setSize 200 200)\n             (.setContentPane panel)\n             (.setVisible true)))\n\nLet’s make our button show a message using an JOptionPane/showMessageDialog widget\n(import &#39;javax.swing.JOptionPane)\n(defn say-hello []\n  (JOptionPane/showMessageDialog\n    nil &quot;Hello, World!&quot; &quot;Greeting&quot;\n    JOptionPane/INFORMATION_MESSAGE))\n\nTo connect this function to our button, write a class implementing the ActionListener interface.  Clojure’s proxy feature is the easiest way to do this:\n(import &#39;java.awt.event.ActionListener)\n(def act (proxy [ActionListener] []\n           (actionPerformed [event] (say-hello))))\n\nact is an instance of an anonymous class implementing the actionPerformed method, so attach this class as a listener the button\n(.addActionListener button act)\n\nNow evaluate the say-hello function to see the new button in action.\n(say-hello)\n\n\nHint Seesaw is a really nice library for swing development.  Also talk a look at the Seesaw minesweeper series.\n\nUnderstanding the dot special form\n\nFixme This section onwards needs reworking\n\nAll of these examples (except java.lang.Math/PI) use macros which expand to use the dot special form. In general, you won&#39;t need to use the dot special form unless you want to write your own macros to interact with Java objects and classes. Nevertheless, here is each example followed by its macroexpansion:\n(macroexpand-1 &#39;(.toUpperCase &quot;By Bluebeard&#39;s bananas!&quot;))\n; =&gt; (. &quot;By Bluebeard&#39;s bananas!&quot; toUpperCase)\n\n(macroexpand-1 &#39;(.indexOf &quot;Let&#39;s synergize our bleeding edges&quot; &quot;y&quot;))\n; =&gt; (. &quot;Let&#39;s synergize our bleeding edges&quot; indexOf &quot;y&quot;)\n\n(macroexpand-1 &#39;(Math/abs -3))\n; =&gt; (. Math abs -3)\n\nYou can think of the general form of the dot operator as:\n(. object-expr-or-classname-symbol method-or-member-symbol optional-args*)\n\nThere are a few more details to the dot operator than that, and if you&#39;re interested in exploring it further you can look at clojure.org&#39;s documentation on Java interop.\nInput/output involves resources, be they files, sockets, buffers, or whatever. Java has separate classes for reading a resource&#39;s contents, writings its contents, and for interacting with the resource&#39;s properties.\nFor example, the java.io.File class is used to interact with a file&#39;s properties. Among other things, you can use it to check whether a file exists, to get the file&#39;s read/write/execute permissions, and to get its filesystem path:\n(let [file (java.io.File. &quot;/&quot;)]\n  (println (.exists file))\n  (println (.canWrite file))\n  (println (.getPath file)))\n; =&gt; true\n; =&gt; false\n; =&gt; /\n\nNoticeably missing from this list of capabilities are reading and writing. To read a file, you could use the java.io.BufferedReader class or perhaps java.io.FileReader. Likewise, you can use the java.io.BufferedWriter or java.io.FileWriter class for writing. There are other classes available for reading and writing as well, and which one you choose depends on your specific needs. Reader and Writer classes all have the same base set of methods for their interfaces; readers implement read, close, and more, while writers implement append, write, close, and flush. So, Java gives you a variety of tools for performing IO. A cynical person might say that Java gives you enough rope to hang yourself, and if you find such a person I hope you give them just enough arms to hug them.\nEither way, Clojure makes things easier for you. First, there&#39;s spit and slurp. Spit writes to a resource, and slurp reads from one. Here&#39;s an example of using them to write and read a file:\n(spit &quot;/tmp/hercules-todo-list&quot;\n&quot;- kill dat lion brov\n- chop up what nasty multi-headed snake thing&quot;)\n\n(slurp &quot;/tmp/hercules-todo-list&quot;)\n\n; =&gt; &quot;- kill dat lion brov\n; =&gt;  - chop up what nasty multi-headed snake thing&quot;\n\nYou can also use these functions with objects representing resources other than files. The next example uses a StringWriter, which allows you to perform IO operations on a string:\n(let [s (java.io.StringWriter.)]\n  (spit s &quot;- capture cerynian hind like for real&quot;)\n  (.toString s))\n; =&gt; &quot;- capture cerynian hind like for real&quot;\n\nNaturally, you can also read from a StringReader with slurp:\n(let [s (java.io.StringReader. &quot;- get erymanthian pig what with the tusks&quot;)]\n  (slurp s))\n; =&gt; &quot;- get erymanthian pig what with the tusks&quot;\n\nOf course, you can also use the read and write methods for resources. It doesn&#39;t really make much of a difference which you use; spit and slurp are often convenient because they work with just a string representing a filesystem path or a URL.\nThe with-open macro is another convenience: it implicitly closes a resource at the end of its body. There&#39;s also the reader function, a nice utility which, according to the clojure.java.io api docs, &quot;attempts to coerce its argument to an open java.io.Reader.&quot; This is convenient when you don&#39;t want to use slurp because you don&#39;t want to try to read a resource in its entirety, and you don&#39;t want to figure out which Java class you need to use. You could use it along with with-open and the line-seq function if you&#39;re trying to read a file one line at a time:\n(with-open [todo-list-rdr (clojure.java.io/reader &quot;/tmp/hercules-todo-list&quot;)]\n  (doseq [todo (line-seq todo-list-rdr)]\n    (println todo)))\n; =&gt; - kill dat lion brov\n; =&gt; - chop up what nasty multi-headed snake thing\n\nThat should be enough for you to get started with IO in Clojure. If you&#39;re trying to do something more sophisticated, definitely take a look at the clojure.java.io docs, the java.nio.file package docs, or the java.io package docs.\n\nSummary\n\nIn this chapter, you learned what it means for Clojure to be hosted on the JVM. Clojure programs get compiled to Java bytecode and executed within a JVM process. Clojure programs also have access to Java libraries, and you can easily interact with them using Clojure&#39;s interop facilities.\n\nResources\n\nFrom http://clojure.org/java_interop\n(.instanceMember instance args*)\n(.instanceMember Classname args*)\n(.-instanceField instance)\n\n(.toUpperCase &quot;fred&quot;)\n-&gt; &quot;FRED&quot;\n(.getName String)\n-&gt; &quot;java.lang.String&quot;\n(.-x (java.awt.Point. 1 2))\n-&gt; 1\n(System/getProperty &quot;java.vm.version&quot;)\n-&gt; &quot;1.6.0_07-b06-57&quot;\nMath/PI\n-&gt; 3.141592653589793\n\nThe preferred idiomatic forms for accessing field or method members are given above. The instance member form works for both fields and methods. The instanceField form is preferred for fields and required if both a field and a 0-argument method of the same name exist. They all expand into calls to the dot operator (described below) at macroexpansion time. The expansions are as follows:\n(.instanceMember instance args*) ==&gt; (. instance instanceMember args*)\n(.instanceMember Classname args*) ==&gt;\n    (. (identity Classname) instanceMember args*)\n(.-instanceField instance) ==&gt; (. instance -instanceField)\n(Classname/staticMethod args*) ==&gt; (. Classname staticMethod args*)\nClassname/staticField ==&gt; (. Classname staticField)\n\nThe Dot special form\n(. instance-expr member-symbol)\n(. Classname-symbol member-symbol)\n(. instance-expr -field-symbol)\n(. instance-expr (method-symbol args*)) or\n(. instance-expr method-symbol args*)\n(. Classname-symbol (method-symbol args*)) or\n(. Classname-symbol method-symbol args*)\n\nSpecial form.\nThe &#39;.&#39; special form is the basis for access to Java. It can be considered a member-access operator, and/or read as &#39;in the scope of&#39;.\nIf the first operand is a symbol that resolves to a class name, the access is considered to be to a static member of the named class. Note that nested classes are named EnclosingClass$NestedClass, per the JVM spec. Otherwise it is presumed to be an instance member and the first argument is evaluated to produce the target object.\nIf the second operand is a symbol and no args are supplied it is taken to be a field access - the name of the field is the name of the symbol, and the value of the expression is the value of the field, unless there is a no argument public method of the same name, in which case it resolves to a call to the method. If the second operand is a symbol starting with -, the member-symbol will resolve only as field access (never as a 0-arity method) and should be preferred when that is the intent.\nIf the second operand is a list, or args are supplied, it is taken to be a method call. The first element of the list must be a simple symbol, and the name of the method is the name of the symbol. The args, if any, are evaluated from left to right, and passed to the matching method, which is called, and its value returned. If the method has a void return type, the value of the expression will be nil. Note that placing the method name in a list with any args is optional in the canonic form, but can be useful to gather args in macros built upon the form.\nNote that boolean return values will be turned into Booleans, chars will become Characters, and numeric primitives will become Numbers unless they are immediately consumed by a method taking a primitive.\nThe member access forms given at the top of this section are preferred for use in all cases other than in macros.\n(.. instance-expr member+)\n(.. Classname-symbol member+)\nmember =&gt; fieldName-symbol or (instanceMethodName-symbol args*)\n\nMacro. Expands into a member access (.) of the first member on the first argument, followed by the next member on the result, etc. For instance:\n(.. System (getProperties) (get &quot;os.name&quot;))\n\nexpands to:\n(. (. System (getProperties)) (get &quot;os.name&quot;))\n\nbut is easier to write, read, and understand. See also the -&gt; macro which can be used similarly:\n(-&gt; (System/getProperties) (.get &quot;os.name&quot;))\n\n(doto instance-expr (instanceMethodName-symbol args))\nMacro. Evaluates instance-expr then calls all of the methods/functions with the supplied arguments in succession on the resulting object, returning it.\n(doto (new java.util.HashMap) (.put &quot;a&quot; 1) (.put &quot;b&quot; 2))\n-&gt; {a=1, b=2}\n\nNote the above applies to the latest Clojure SVN revision. If you are using the 20080916 release only method calls are allowed, and the syntax is:\n(doto (new java.util.HashMap) (put &quot;a&quot; 1) (put &quot;b&quot; 2))\n-&gt; {a=1, b=2}\n\n(Classname. args)\n(new Classname args)\nSpecial form.\nThe args, if any, are evaluated from left to right, and passed to the constructor of the class named by Classname. The constructed object is returned.\nAlternative Macro Syntax\nAs shown, in addition to the canonic special form new, Clojure supports special macroexpansion of symbols containing &#39;.&#39;:\n(new Classname args*)\n\ncan be written\n(Classname. args*)\n;; note trailing dot\n\nthe latter expanding into the former at macro expansion time.\n(instance? Class expr)\nEvaluates expr and tests if it is an instance of the class. Returns true or false\n(set! (. instance-expr instanceFieldName-symbol) expr)\n(set! (. Classname-symbol staticFieldName-symbol) expr)\nAssignment special form.\nWhen the first operand is a field member access form, the assignment is to the corresponding field. If it is an instance field, the instance expr will be evaluated, then the expr.\nIn all cases the value of expr is returned.\nNote - you cannot assign to function params or local bindings. Only Java fields, Vars, Refs and Agents are mutable in Clojure.\n(memfn method-name arg-names*)\nMacro. Expands into code that creates a fn that expects to be passed an object and any args and calls the named instance method on the object passing the args. Use when you want to treat a Java method as a first-class fn.\n(map (memfn charAt i) [&quot;fred&quot; &quot;ethel&quot; &quot;lucy&quot;] [1 2 3])\n-&gt; (\\r \\h \\y)\nNote it almost always preferable to do this directly now, with syntax like:\n(map #(.charAt %1 %2) [&quot;fred&quot; &quot;ethel&quot; &quot;lucy&quot;] [1 2 3])\n-&gt; (\\r \\h \\y)\n(bean obj)\nTakes a Java object and returns a read-only implementation of the map abstraction based upon its JavaBean properties.\n(bean [[http://java.awt.Color/black|java.awt.Color/black]])\n-&gt; {:RGB -16777216, :alpha 255, :transparency 1,\n    :class class java.awt.Color, :green 0, :blue 0,\n    :colorSpace java.awt.color.ICC_ColorSpace@c94b51, :red 0}\nSupport for Java in Clojure Library Functions\nMany of the Clojure library functions have defined semantics for objects of Java types. contains? and get work on Java Maps, arrays, Strings, the latter two with integer keys. count works on Java Strings, Collections and arrays. nth works on Java Strings, Lists and arrays. seq works on Java reference arrays, Iterables and Strings. Since much of the rest of the library is built upon these functions, there is great support for using Java objects in Clojure algorithms.\nImplementing Interfaces and Extending Classes\nClojure supports the dynamic creation of objects that implement one or more interfaces and/or extend a class with the proxy macro. The resulting objects are of an anonymous class. You can also generate statically-named classes and .class files with gen-class. As of Clojure 1.2, reify is also available for implementing interfaces.\n( proxy [class-and-interfaces] [args] fs+)\nclass-and-interfaces - a vector of class names\nargs - a (possibly empty) vector of arguments to the superclass constructor.\nf =&gt; (name [params] body) or (name ([params] body) ([params+] body) ...)\nMacro\nExpands to code which creates a instance of a proxy class that implements the named class/interface(s) by calling the supplied fns. A single class, if provided, must be first. If not provided it defaults to Object. The interfaces names must be valid interface types. If a method fn is not provided for a class method, the superclass method will be called. If a method fn is not provided for an interface method, an UnsupportedOperationException will be thrown should it be called. Method fns are closures and can capture the environment in which proxy is called. Each method fn takes an additional implicit first arg, which is bound to this. Note that while method fns can be provided to override protected methods, they have no other access to protected members, nor to super, as these capabilities cannot be proxied.\nArrays\nClojure supports the creation, reading and modification of Java arrays. It is recommended that you limit use of arrays to interop with Java libraries that require them as arguments or use them as return values.\nNote that many other Clojure functions work with arrays such as via the seq library. The functions listed here exist for initial creation of arrays, or to support mutation or higher performance operations on arrays.\nCreate array from existing collection: aclone amap to-array to-array-2d into-array\nMulti-dimensional array support: aget aset to-array-2d make-array\nType-specific array constructors: boolean-array byte-array char-array double-array float-array int-array long-array object-array short-array\nPrimitive array casts: booleans bytes chars doubles floats ints longs shorts\nMutate an array: aset\nProcess an existing array: aget alength amap areduce\nType Hints\nClojure supports the use of type hints to assist the compiler in avoiding reflection in performance-critical areas of code. Normally, one should avoid the use of type hints until there is a known performance bottleneck. Type hints are metadata tags placed on symbols or expressions that are consumed by the compiler. They can be placed on function parameters, let-bound names, var names (when defined), and expressions:\n(defn len [x]\n  (.length x))\n(defn len2 String x\n  (.length x))\nuser=&gt; (time (reduce + (map len (repeat 1000000 &quot;asdf&quot;))))\n&quot;Elapsed time: 3007.198 msecs&quot;\n4000000\nuser=&gt; (time (reduce + (map len2 (repeat 1000000 &quot;asdf&quot;))))\n&quot;Elapsed time: 308.045 msecs&quot;\n4000000\nOnce a type hint has been placed on an identifier or expression, the compiler will try to resolve any calls to methods thereupon at compile time. In addition, the compiler will track the use of any return values and infer types for their use and so on, so very few hints are needed to get a fully compile-time resolved series of calls. Note that type hints are not needed for static members (or their return values!) as the compiler always has the type for statics.\nThere is a warn-on-reflection flag (defaults to false) which will cause the compiler to warn you when it can&#39;t resolve to a direct call:\n(set! warn-on-reflection true)\n-&gt; true\n(defn foo [s] (.charAt s 1))\n-&gt; Reflection warning, line: 2 - call to charAt can&#39;t be resolved.\n-&gt; #user/foo\n(defn foo String s (.charAt s 1))\n-&gt; #user/foo\nFor function return values, the type hint can be placed before the arguments vector:\n(defn hinted\n  (^String [])\n  (^Integer [a])\n  (^java.util.List [a &amp; args]))\n-&gt; #user/hinted\nAliases\nClojure provides aliases for primitive Java types and arrays which do not have typical representations as Java class names. For example, long arrays (long-array []) have a type of &quot;[J&quot;.\nint - A primitive int\nints - An int array\nlong - A primitive long\nlongs - A long array\nfloat - A primitive float\nfloats - A float array\ndouble - A primitive double\ndoubles - A double array\nvoid - A void return\nshort - A primitive short\nshorts - A short array\nboolean - A primitive boolean\nbooleans - A boolean array\nbyte - A primitive byte\nbytes - A byte array\nchar - A primitive character\nchars - A character array\n\nSupport for Java Primitives\nClojure has support for high-performance manipulation of, and arithmetic involving, Java primitive types in local contexts. All Java primitive types are supported: int, float, long, double, boolean, char, short, and byte.\nlet/loop-bound locals can be of primitive types, having the inferred, possibly primitive type of their init-form.\nrecur forms that rebind primitive locals do so without boxing, and do type-checking for same primitive type.\nArithmetic (+,-,*,/,inc,dec,&lt;,&lt;=,&gt;,&gt;= etc) is overloaded for primitive types where semantics are same.\naget/aset are overloaded for arrays of primitives\naclone, alength functions for arrays of primitives\nconstructor functions for primitive arrays: float-array, int-array, etc.\nType hints for primitive arrays - ^ints, ^floats, etc.\nCoercion ops int, float, etc. produce primitives when consumer can take primitive\nThe num coercion function boxes primitives to force generic arithmetic\nArray cast functions ints longs, etc. which produce int[], long[], etc.\nA set of &quot;unchecked&quot; operations for utmost performing, but potentially unsafe, integer (int/long) ops: unchecked-multiply unchecked-dec unchecked-inc unchecked-negate unchecked-add unchecked-subtract unchecked-remainder unchecked-divide\nA dynamic var to automatically swap safe operations with unchecked operations: *unchecked-math*\namap and areduce macros for functionally (i.e. non-destructively) processing one or more arrays in order to produce a new array or aggregate value respectively.\n\nRather than write this Java:\nstatic public float asum(float[] xs){\n  float ret = 0;\n  for(int i = 0; i &lt; xs.length; i++)\n    ret += xs[i];\n  return ret;\n}\nyou can write this Clojure:\n(defn asum floats xs\n  (areduce xs i ret (float 0)\n    (+ ret (aget xs i))))\nand the resulting code is exactly the same speed (when run with java -server).\nThe best aspect of this is that you need not do anything special in your initial coding. Quite often these optimizations are unneeded. Should a bit of code be a bottleneck, you can speed it up with minor adornment:\n(defn foo [n]\n  (loop [i 0]\n    (if (&lt; i n)\n      (recur (inc i))\n      i)))\n(time (foo 100000))\n&quot;Elapsed time: 0.391 msecs&quot;\n100000\n(defn foo2 [n]\n  (let [n (int n)]\n    (loop [i (int 0)]\n      (if (&lt; i n)\n        (recur (inc i))\n        i))))\n(time (foo2 100000))\n&quot;Elapsed time: 0.084 msecs&quot;\n100000\nCoercions\nAt times it is necessary to have a value of a particular primitive type. These coercion functions yield a value of the indicated type as long as such a coercion is possible: bigdec bigint boolean byte char double float int long num short\nSome optimization tips\nAll arguments are passed to Clojure fns as objects, so there&#39;s no point to putting non-array primitive type hints on fn args. Instead, use the let technique shown to place args in primitive locals if they need to participate in primitive arithmetic in the body.\n(let [foo (int bar)] ...) is the correct way to get a primitive local. Do not use ^Integer etc.\nDon&#39;t rush to unchecked math unless you want truncating operations. HotSpot does a good job at optimizing the overflow check, which will yield an exception instead of silent truncation. On a typical example, that has about a 5% difference in speed - well worth it. Also, people reading your code don&#39;t know if you are using unchecked for truncation or performance - best to reserve it for the former and comment if the latter.\nThere&#39;s usually no point in trying to optimize an outer loop, in fact it can hurt you as you&#39;ll be representing things as primitives which just have to be re-boxed in order to become args to the inner call. The only exception is reflection warnings - you must get rid of them in any code that gets called frequently.\nAlmost every time someone presents something they are trying to optimize with hints, the faster version has far fewer hints than the original. If a hint doesn&#39;t improve things in the end - take it out.\nMany people seem to presume only the unchecked- ops do primitive arithmetic - not so. When the args are primitive locals, regular + and * etc do primitive math with an overflow check - fast and safe.\nSo, the simplest route to fast math is to leave the operators alone and just make sure the source literals and locals are primitive. Arithmetic on primitives yields primitives. If you&#39;ve got a loop (which you probably do if you need to optimize) make sure the loop locals are primitives first - then if you accidentally are producing a boxed intermediate result you&#39;ll get an error on recur. Don&#39;t solve that error by coercing your intermediate result, instead, figure out what argument or local is not primitive.\n\nSimple XML Support\nIncluded with the distribution is simple XML support, found in the src/xml.clj file. All names from this file are in the xml namespace.\n(parse source)\nParses and loads the source, which can be a File, InputStream or String naming a URI. Returns a tree of the xml/element struct-map, which has the keys :tag, :attrs, and :content. and accessor fns tag, attrs, and content.\n(xml/parse &quot;/Users/rich/dev/clojure/build.xml&quot;)\n-&gt; {:tag :project, :attrs {:name &quot;clojure&quot;, :default &quot;jar&quot;}, :content [{:tag :description, ...\nCalling Clojure From Java\nThe clojure.java.api package provides a minimal interface to bootstrap Clojure access from other JVM languages. It does this by providing:\n\nThe ability to use Clojure&#39;s namespaces to locate an arbitrary var, returning the var&#39;s clojure.lang.IFn interface.\nA convenience method read for reading data using Clojure&#39;s edn reader\n\nIFns provide complete access to Clojure&#39;s APIs. You can also access any other library written in Clojure, after adding either its source or compiled form to the classpath.\nThe public Java API for Clojure consists of the following classes and interfaces:\nclojure.java.api.Clojure\nclojure.lang.IFn\n\nAll other Java classes should be treated as implementation details, and applications should avoid relying on them.\nTo lookup and call a Clojure function:\nIFn plus = Clojure.var(&quot;clojure.core&quot;, &quot;+&quot;);\nplus.invoke(1, 2);\nFunctions in clojure.core are automatically loaded. Other namespaces can be loaded via require:\nIFn require = Clojure.var(&quot;clojure.core&quot;, &quot;require&quot;);\nrequire.invoke(Clojure.read(&quot;clojure.set&quot;));\nIFns can be passed to higher order functions, e.g. the example below passes plus to read:\nIFn map = Clojure.var(&quot;clojure.core&quot;, &quot;map&quot;);\nIFn inc = Clojure.var(&quot;clojure.core&quot;, &quot;inc&quot;);\nmap.invoke(inc, Clojure.read(&quot;[1 2 3]&quot;));\nMost IFns in Clojure refer to functions. A few, however, refer to non-function data values. To access these, use deref instead of fn:\nIFn printLength = Clojure.var(&quot;clojure.core&quot;, &quot;print-length&quot;);\nIFn deref = Clojure.var(&quot;clojure.core&quot;, &quot;deref&quot;);\nderef.invoke(printLength);\n"},"basic-clojure/quick-look-at-types.html":{"url":"basic-clojure/quick-look-at-types.html","title":"Quick look at Types","body":"A quick look at types\nAs we mentioned before, underneath Clojure lurks Java byte code so there are going to be types in Clojure.  However, Clojure being a dynamic language, most of the time you can just let Clojure manage the types for you.\n\nHint When you run Clojure on a different host platform, eg. .Net or Javascript (via Clojurescript), Clojure will use the types of that host platform.\n\nShould you want to know the type of something you are working on, you can use two functions, type and class.\n\nNote Discover the class or type of some common Clojure code\n\n(class 1)\n(class 1.1)\n(class &quot;&quot;)\n(class true)\n(class false)\n(class nil)\n\n(class ())\n(class (list 1 2 3 4))\n(class (str 2 3 4 5))\n(class (+ 22/7))\n\n(type [1 2 3])\n(type {:a 1 :b 2})\n(type (take 3 (range 10)))\n\n\n\nHint If you cant live without static type checking, look at core.typed, a type system for Clojure all in one library\n\n"},"basic-clojure/strings.html":{"url":"basic-clojure/strings.html","title":"Strings","body":"Strings\nStrings in Clojure are actually Java Strings.\n\nHint  Why do you think this design decision was taken for Clojure?\nIf you think about the state property of String objects, then you realise that String Objects are immutable and cannot be changed.  As this is the default approach for other data structures and values in Clojure it makes sense to use Java Strings instead of writing a Clojure implementation.\n\nAs Clojure strings are Java strings, then you can use all the same functions you can in Java.\n\nNote Use the Java function println to output a string\n\n(println &quot;Hello, whats different with me?  What value do I return&quot;)\n\n\nSomething different happens when you evaluate this expression.  The actual value returned is nil, not the string.  You see the string because println is writing to the console (i.e the REPL).\n\nHint Avoid code that creates side-effects where possible to keep your software less complex to understand.\nYou may be used to using println statements to help you debug your code, however, with the fast feedback you get from developing in the REPL then there is usually no need for them.\n\nStrings the Clojure way\nIts more common to use the str function when working with strings, as this function returns the string as its. value when evaluated.\n(str &quot;Hello, I am returned as a value of this expression&quot;)\n\nNote Join strings together with the function str\n\n(str &quot;I&quot; &quot;like&quot; &quot;to&quot; &quot;be&quot; &quot;close&quot; &quot;together&quot;\n(str &quot;Hello&quot; &quot;, &quot; &quot;Devoxx UK&quot;)\n(str &quot;Hello &quot;  &quot;developers&quot; &quot;, &quot; &quot;welcome&quot; &quot; &quot; &quot;to&quot; &quot; &quot; &quot;HackTheTower UK&quot;)\n\nYou can see that there are no side-effects when using str and the string is returned as the value of the function call.\nUsing Interpose with Strings\nIts easy to join strings together with the str function, however str leaves no spaces between words.\nUsing Regex\nJava Interop for Strings\n\nNote Change the case of strings and other common actions using the String object methods, in the form (.methodName object)\n\n(.toUpperCase &quot;show me the money&quot;)\n\n(.getName String)\n\n(.indexOf &quot;Where is the $ in this string&quot; &quot;$&quot;)\n\n\nHint Look at the API docs for java.lang.String for other methods you can call.\n\n"},"basic-clojure/numbers-maths.html":{"url":"basic-clojure/numbers-maths.html","title":"Numbers & Maths","body":"Maths\n\nFixme Split this into sections ?\n\nWriting some simple mathematics helps you get used to the form of Clojure.  Unlike other languages, Clojure does not have operators for mathematics.  Instead + - * / are all functions in their own right.\nAs Clojure uses pre-fix notation then mathematical expressions are always unambiguous.  There is no need for an operator precedence table in Clojure.\n\nNote Write some simple math to help you get used to the form of Clojure\n\n(+ 1 2 3 4 5 6 7) \n(- 2 1)\n(* 3 7)\n(/ 12 4)\n(/ 500 20)\n(+ 1 1 2489 459 2.)\n(+ 1 2 (* 3 4) (- 5 6 -7))\n\n\nVariable numbers of arguments\nMathematic functions show the flexibility of Clojure, as they take a variable number of arguments (variadic functions).  Its common for Clojure functions to have zero, one or many arguments (many arguments typically represented as a built-in data structure (map, vector, set or list)\n\nNote Write some more maths to show the variadic nature of mathematic (and manu other) functions\n\n(+)\n(*)\n(* 2)\n(+ 4)\n\n(+ 1 2 3)\n(&lt; 1 2 3)\n(&lt; 1 3 8 4)\n\n\n\nNote Explore some number related functions\n\n(rem 22 7)\n(mod 20 12)\n(quot 13 4)\n\n(inc 3)\n(dec 4)\n\n(min 1 2 3 5 8 13)\n(max 1 2 3 5 8 13)\n\n(repeat 4 9)\n\n(range 10)\n(range 18 66)\n(range 2 99 2)\n\nEquality\nEquality is represented by the = function.  Yes, = is a proper function too, not just an operator as with other languages.\n\nNote Explore what equality means in Clojure.  Equality is very useful when your data structures are immutable\n\n(= 1 1) \n(= 2 1) \n\n(identical? &quot;foo&quot; &quot;bar&quot;)\n(identical? &quot;foo&quot; &quot;foo&quot;)\n(= &quot;foo&quot; &quot;bar&quot;)\n(= &quot;foo&quot; &quot;foo&quot;)\n\n(identical? :foo :bar)\n(identical? :foo :foo)\n\n(true)\n(false)\n(not true)\n(true? (= 1 1))\n(false (= 1 -1))\n\nEquality is very efficient when your data structures are immutable.  For example if you have very large data sets, you can simply compare a hash value to see if those data structures are the same.\nOf course you also have the not function for reversing logic too\n(not true) \n\n=&gt; false\n\nTruethy experiments\n;; some truthiness with math functions for you to try\n(+)\n(class (+))\n(*)\n(true? +)\n(false? +)\n(true? *)\n(false? *)\n(true? 1)\n(true? -1)\n(true? true)\n(- 2)\n\nBoolean &amp; Predicates\nPredicates are functions that take a value and return a boolean result (true | false)\n(true? true)\n(true? (not true))\n(true? false)\n(true? (not false))\n(true? nil)\n\nTypes\nClojure uses Java&#39;s object types for booleans, strings and numbers.  Use the class function to inspect them.\n(class 1)\n; Integer literals are java.lang.Long by default\n(class 1.1)    ; Float literals are java.lang.Double\n\n(class &quot;&quot;)\n; Strings always double-quoted, and are java.lang.String\n\n(class false)  ; Booleans are java.lang.Boolean\n(class nil)    ; The &quot;null&quot; value is called nil\n\n(class (list 1 2 3 4))\n\n\n(class true)\n(class ())\n(class (list 1 2 34 5))\n(class (str 2 3 4 5))\n(class (+ 22/7))\n(class 5)\n(class &quot;fish&quot;)\n(type [1 2 3])\n(type {:a 1 :b 2})\n\n(type (take 3 (range 10)))\n\nRatios\nTo help maintain the precision of numbers, Clojure has a type called Ratio.  So when you are dividing numbers you can keep the as a fraction using whole numbers, rather than constrain the result to a approximate\n(/ 2)\n\nA classic example is dividing 22 by 7 which is approximately the value of Pi\n(/ 22 7)\n\n(class (/ 22 7))\n\nIf you want to force Clojure to evaluate this then you can specify one of the numbers with a decimal point\n(class (/ 22 7.0))\n\n"},"basic-clojure/ratios.html":{"url":"basic-clojure/ratios.html","title":"Ratios","body":"Ratios\nIn mathematics you need to ensure that you manage precision of your calculations when you are dividing numbers.  Once you create a decimal number then everything it touches had a greater potential to becoming a decimal.\n\nNote Calculate a rough approximation to Pi by dividing 22 by 7\n\n(/ 22 7)\n(class (/ 22 7))\n(/ (* 22/7 3) 3)\n\n\nIf the result of an integer calculation would be a decimal number, then Clojure holds the value as a Ratio.  This is one example of lazy evaluation.  Rather than calculate the decimal value at some particular precision (number of decimal points).  Clojure is saving the calculation until its needed, at which time the specific precision required should be known.\n\nNote Explore the ratio type further and see how to get a decimal value as the result\n\n(/ 14 4)\n(/ 16 12)\n(/ 2)\n(/ 22 7.0)\n(type (/ 22 7.0))\n(float (/ 22 7))\n(double (/ 22 7))\n\n\nWhen one or more of the numbers in the division is a decimal, then Clojure will return a decimal value.  Or you can coerce a value to a specific decimal type, eg. float or double.\n"},"basic-clojure/assigning-names.html":{"url":"basic-clojure/assigning-names.html","title":"Assigning Names","body":"Assigning Names\nIf we have to type the same values over and over, it would be very hard to write a program. What we need are names for values, so we can refer to them in a way we can remember. We do that using def.\n(def mangoes 3)\n(def oranges 5)\n(+ mangoes oranges)\n\nWhen you assign a name to a value, that name is called a symbol. You can assign more than simple values to symbols. Try the following:\n(def fruit (+ mangoes oranges))\n(def average-fruit-amount (/ fruit 2))\naverage-fruit-amount\n\nLook at the last line, and see how we can use symbols by themselves to refer to a value.\n\nNote Take the Clojure syntax you have learnt to far and write a metric/imperial converter\n\nTake your height in feet and inches and convert it to inches using arithmetic in Clojure.\nThen convert that to centimeters. There are 2.54 centimeters in an inch.\nLastly, ask two people near you for their height in centimeters. Find the average of your heights.\n\nNote Bonus: Convert that average back to feet and inches. The feet and the inches will be separate numbers. (quot x y) will give you the whole number part when dividing two numbers. (mod x y) will give you the remainder when dividing two numbers.\n\n"},"basic-clojure/defining-functions.html":{"url":"basic-clojure/defining-functions.html","title":"Defining Functions","body":"Defining Funtions\nHere is a simple function definition that takes a number and divides it by two\n(defn half-a-number \n      &quot;Divide a given number by 2&quot;\n      [number]\n      (/ number 2))\n\nOnce you have defined a function, you can call it by using the function name as the first element of a list\n(half-a-number 4)\n\nBreaking down the defn syntax\nThe syntax defn is what we call a macro, it is a simpler way to write clojure code that does the same thing.\nYou can think of defining a function with defn as two steps\n1) Give the function a name - using the def syntax\n  2) Define the functions behaviour and arguments it takes - using the fn syntax\nHere is the same function if you typed it out in full\n(def half-a-number\n      (fn [number]\n        (/ number 2)))\n\n\nfixme is it too soon to show macroexpand ?\n\n"},"basic-clojure/namespace.html":{"url":"basic-clojure/namespace.html","title":"Namespace","body":"Namespace\nA namespace in Clojure is used to manage the logical seperation of code, usually along features of the application, service or library you are developing.  A namespace contains data structures and functions, limiting their scope to that function.\nUnless otherwise defined, any function can call any other function in the namespace by just the function name.  The same is true for any naed data structures, they can be called from anywhere in the namespace with just their name.\n\nHint Remember that Clojure is evaluated from top to bottom, so if you are calling a named function or data structure, it must have had its definition evaluated first.\n\nIncluding another namespace\nrequire or :require is used to enable access to the functions &amp; named datastructures in another namespace than the current one.\n(ns my-namespace.core \n  :require [clojure.java.io])\n\n(defn read-the-file [filename]\n  (line-seq (clojure.java.io/reader filename)))\n\n(read-the-file &quot;project.clj&quot;)\n\nThe reader funciton can be accessed, however, we still need to include the fully qualified namespace path, clojure.java.io.\nIf the namespace has a long name, you can provide an alias (please use names that keep the code readable)\n(ns my-namespace.core \n  :require [clojure.java.io :as java-io])\n\n(defn read-the-file [filename]\n  (line-seq (java-io/reader filename)))  \n\n(read-the-file &quot;project.clj&quot;)\n\nOr if you are going to use the function multiple times in the current namespace, you could also include that function directly using :refer, no longer requiring any kind of namespace qualifier\n(ns my-namespace.core \n  :require [clojure.java.io :refer [reader]])\n\n(defn read-the-file [filename]\n  (line-seq (reader filename)))  \n\n(read-the-file &quot;project.clj&quot;)\n\nAdding multiple namespaces\nIf you are going to add multiple namespaces, you can do so with just one :require statement\nHere is an example namespace expression with multiple require statements from the duct web framework template\n(ns duct-test.main\n  (:require [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [duct.middleware.errors :refer [wrap-hide-errors]]\n            [meta-merge.core :refer [meta-merge]]\n            [duct-test.config :as config]\n            [duct-test.system :refer [new-system]]))\n\n\nHint You may see use or :use as an alternative approach.  While this will work, it also includes everything from the other namespace into your current one.  This is seen as a bad practice, especially when writing libraries, as you can end up including a great many unused functions into the namespace.\nAs Clojure is typically composed of many libraries, its prudent to only include the specific things you need from another namespace.  This also helps reduce conflicts when including multiple libraries in your project.\nYou can use the :exclude keyword with :use to avoid including specific functions from the required namespace.\n\nExternal libraries\nTo use a library that is not part of your project you also need to include it as a dependency.  You can do this using the :dependencis section of the  Leiningen project file.\n(defproject duct-test &quot;0.1.0-SNAPSHOT&quot;\n  :description &quot;FIXME: write description&quot;\n  :url &quot;http://example.com/FIXME&quot;\n  :min-lein-version &quot;2.0.0&quot;\n  :dependencies [[org.clojure/clojure &quot;1.7.0&quot;]\n                 [org.clojure/clojurescript &quot;1.7.122&quot;]\n                 [com.stuartsierra/component &quot;0.3.0&quot;]\n                 [compojure &quot;1.4.0&quot;]\n                 [duct &quot;0.4.4&quot;]\n                 [environ &quot;1.0.1&quot;]])\n\n"},"basic-clojure/control-flow.html":{"url":"basic-clojure/control-flow.html","title":"Control flow","body":"Control Flow\nThe following section of functions gives examples of control flow.  Many of these functions will be familiar to other syntax in non-functional programming languages.\nAs you gain more experience with Clojure, you will discover more functional ways to achieve the same (or better) results.\nIf this then that, else the other\nUsing the if funtion you can test if an expression evaluates to true.  If it is true, the first value is returned, if its false the second value is returned.\nHere is a simple example to see if one number is bigger that another\n(if (&gt; 3 2) &quot;Higher&quot; &quot;Lower&quot;)\n\n=&gt; &quot;Higher&quot;\n\n(fn [x]\n      (if (even? x)\n        (inc x)\n        (dec x)))\n\n(doc if)\n(doc if-not)\n\nWhen\n(when (&gt; 3 2)\n      (println &quot;3 is greater than 2&quot;)\n      &quot;Higher&quot;)\n\n=&gt; 3 is greater than 2\n=&gt; &quot;Higher&quot;\n\nYou can use Lighttable to see the docs for a function by placing the cursor over the function name and pressing Cntrl-d - or search the Clojure docs in the command window\n(doc when)\n(doc when-not)\n\nConditional - Case\n(case (inc 3)\n         3 &quot;Uh oh&quot;\n         4 &quot;Yep!&quot;\n         &quot;Not so sure...&quot;)\n\n&quot;Yep!&quot;\n\n(cond\n         (= 4 (inc 2)) &quot;(inc 2) is 4&quot;\n         (= 4 (/ 8 2)) &quot;Cond picks the first correct case&quot;\n     (zero? (- (* 4 2) 8) &quot;This is true, but we won&#39;t get here&quot;\n         :otherwise &quot;None of the above.&quot;\n\n&quot;Cond picks the first correct case&quot;\n\n(doc cond)\n(doc condp)\n\nWhile\nDo something while the condition is true\n(while (condition) \n  (do something))\nHere is a simple while example that uses a (mutable) counter and prints out the results to the repl window.\n;; create a counter using a mutable counter\n(def counter (atom 10))\n\n;; While the counter is positive (is a number greater than zero), print out the current value of the counter.\n(while (pos? @counter)\n  (do\n    (println @counter)\n    (swap! counter dec)))\n\n\nThis example uses mutable state and causes a side effect by printing to the repl.  Both these kinds of things are typically kept to a minimum in Clojure.\n\nLoop &amp; Recur\nThere are also loop and recur functions in Clojure that can be used for control flow, however they are considered low level operations and higher order functions are typically used.\nA common patter is to create a sequence of values (characters in a string, values in a map, vector, set or list) and apply one or more of clojure&#39;s sequence functions (doseq, dorun, take-while, etc.)\nThe following example reads the first username from /etc/passwd on unix like systems.\n(require &#39;[clojure.java [io :as io]])\n\n(defn char-seq\n  &quot;create a lazy sequence of characters from an input stream&quot;\n  [i-stream]\n  (map char \n   (take-while\n    (partial not= -1)\n    (repeatedly #(.read i-stream)))))\n\n;; process the sequence one token at a time\n;; with-open will automatically close the stream for us \n\n(with-open [is (io/input-stream &quot;/etc/passwd&quot;)]\n  (doseq [c (take-while (partial not= \\:) (char-seq is))]\n    ;; your processing is done here\n    (prn c)))\n\n\nExample taken from Stack Overflow http://stackoverflow.com/questions/1053926/clojure-while-loop\n\n"},"data-structures/":{"url":"data-structures/","title":"Data structures","body":"Data structures\nClojure is a very data centric language.  It has many functions for manipulating data structures and has some very powerful built in data structures, refered to as collections (or sequences).\nCollections can take any types of elements and types can be mixed.  Collections can even have other collections as an element.\nCollections\nSo far, we&#39;ve dealt with discrete pieces of data: one number, one string, one value. When programming, it is more often the case that you want to work with groups of data. Clojure has great facilities for working with these groups, or collections, of data. Not only does it provide four different types of collections, but it also provides a uniform way to use all of these collections together.\n\nCollections\nLists - a linked list, sequential access\nVectors - an indexed array\nMaps - key-value pair (hash map)\nSets - a unqiue set of values\n\n\n\nClojure data structure share the following characteristics:\n\nImmutable - once a data structure is defined it cannot be changed.  Any changes you ask for are created in a new data structure which is linked back to the original data structure\nPersistent\nSequences\nShared\ncontains any value, including functions (as they evaluate to a value)\nsame conceptual functions\nbehaviour - you can ask your data structure for values it contains\n\nPersistent data structures\nThe collections in Clojure are immutable, so they initially seem similar to constants rather than variables.  Once a collection is created, it cannot be changed.  Any functions that run on a collection do not change the collection, instead they return a new collection with the respective changes.\nCreating a new collection each time may seem inefficient, however, the persistent collections use a sharing model.  When a new collection is created, it links to all the relevant elements of the original collection and adds any new elements.\n\n\nHint Read the InfoQ article on An In-Depth Look at Clojure Collections.\n\nEverything is a List\nIn Clojure everything is a list, after all Clojure is a language based on LISP (which stands for List Processing).\nAs Clojure is Homoiconic then there is no real distinction between behaviour and data.  Clojure can be thought of as a data driven language.\nEvaluating Lists\nLists are the data structure for the whole language and by default Clojure will use the first element as a function call.\nSo when you just have data in a list, then for all elements to be treated as data when evaluated you add the quote function or its syntactic sugar &#39; syntax.\n(1 2 3 4) ;; =&gt; Error: 1 is not a function (Ifn)\n\n(quote (1 2 3 4))\n&#39;(1 2 3 4)\n\nUsing the quote character is the most common practice.\nVectors are fast with indexed access\nVectors are similar to arrays in other languages in that its an indexed collection.  Therefore random access is fast.\nMaps to categorise the world in key value pairs\nSets when you want more order in your data structure\n"},"data-structures/list.html":{"url":"data-structures/list.html","title":"List","body":"List\nThe list is used extensively in Clojure, it is a List (List Processing) language after all.  The unique thing about lists is that the first element is always evaluated as a function call, therefore lists are most commonly used for defining and calling functions.\nLists are sometimes used as a data structure and have a linear lookup time.  Its more common to use vectors and maps which typically offer quicker access as they can be looked up via an index or key.\n\nNote Explore the list data structure and discover which line of code fails.  Try work out why that line of code fails.\n\n(list 1 2 3 4)\n(list -1 -0.234 0 1.3 8/5 3.1415926)\n(list &quot;cat&quot; &quot;dog&quot; &quot;rabit&quot; &quot;fish&quot;)\n(list :cat 1 &quot;fish&quot; 22/7 (str &quot;fish&quot; &quot;n&quot; &quot;chips&quot;))\n(list 1 2 &quot;three&quot; [4] five &#39;(6 7 8 9))\n(list )\n\n( 1 2 3 4)\n\n(quote (1 2 3 4))\n&#39;(1 2 3 4)\n\n;; Duplicate elements in a list ?\n(list 1 2 3 4 1)\n(list &quot;one&quot; &quot;two&quot; &quot;one&quot;)\n(list :fred :barney :fred)\n\n\nCommnet As you read about the List data structure, remember that in Clojure everything is a list and the first element of a list is evaluated as a function call.\n\nWe can create a list using the list function\n(list 1 2 3 4)\nThis evaluates to (1 2 3 4)\nWe can give this result a name\n(def my-list (list 1 2 3 4))\nThen when we evaluate my-list it will return the list as a result\nHowever, if we create a list directly by using (1 2 3 4), this will fail when evaluated as 1 is not a function.  So when we define a data structure as a list we need to use the quote function or &#39; syntax\n(quote (1 2 3 4))\n&#39;(1 2 3 4)\n\n;; list ()\n;; a general set of elements with a sequential lookup time\n;; you can use the list function to create a new list\n(list 1 2 3 4)\n(list -1 -0.234 0 1.3 8/5 3.1415926)\n(list &quot;cat&quot; &quot;dog&quot; &quot;rabit&quot; &quot;fish&quot;)\n;; you can use any &quot;types&quot; in your list or any other Clojure collection\n(list :cat :dog :rabit :fish)\n;; you can mix types because Clojure is dynamic and it will work it out later,\n;; you can even have functions as elements, because functions always return a value\n(list :cat 1 &quot;fish&quot; 22/7 (str &quot;fish&quot; &quot;n&quot; &quot;chips&quot;))\n;; further examples of mixing types\n(def five 5)\n(list )\n(list 1 2 3 4)\n(list 1 2 &quot;three&quot; [4] five &#39;(6 7 8 9))\n(1 2 3 4)\n&#39;(+ 1 2 3 4)\n(quote (1 2 3 4))\n;; one unique thing about lists is that the first element is always evaluated as a function call,\n;; with the remaining elements as arguments.\n;; So, defining a list just using () will cause an error\n;; This list definition will fail, unless you have defined a function called 1\n(1 2 3 4)  ;;fail\n;; There is a special function called quote that tells Clojure to just treat the\n;; list as data.\n(quote (1 2 3 4))\n;; This syntax is actually more code to type than (list 1 2 3 4),\n;; so there is a shortcut for the quote function using the &#39; character\n&#39;(1 2 3 4)\n&#39;(-1 -0.234 0 1.3 8/5 3.1415926)\n&#39;(&quot;cat&quot; &quot;dog&quot; &quot;rabit&quot; &quot;fish&quot;)\n&#39;(:cat :dog :rabit :fish)\n&#39;(:cat 1 &quot;fish&quot; 22/7 (str &quot;fish&quot; &quot;n&quot; &quot;chips&quot;))\n;; The quote shortcust is uses where ever you have a list that you want to treat just as data.\n;; Another example is when you are including functions from other namespaces\n;;(ns my-namespace.core\n;;  use &#39;my-namespace.library)\n\nProperties of lists\nCommon functions working on lists\nconj\ncons\n"},"data-structures/map.html":{"url":"data-structures/map.html","title":"Map","body":"Map\nA map is a key / value pair data structure.  Keys are usually defined using a keyword, although they can be strings or anything else.\nKeywords point to themselves, so using them for the keys makes it very easy to get values out of the map, or for updating existing values in the map.\n\nNote Explore creating maps\n\n{:key &quot;value&quot;}\n(:key 42)\n{:key :value}\n{&quot;key&quot; &quot;value&quot;}\n(&quot;key&quot; :value)\n{:a 1 :b 2 :c 3}\n{:monday 1 :tuesday 2 :wednesday 3 :thursday 4 :friday 5 :saturday 6 :sunday 7}\n\nMaps of other collections\nIts also quite common to have maps made up of other maps, maps of vectors or vectors of maps.\n\nNote Create a map to represent the world of Starwars, including characters &amp; ships.  Indicate the factions that characters and ships belong to.\n\n{:starwars {\n    :characters {\n      :jedi   [&quot;Luke Skywalker&quot;\n               &quot;Obiwan Kenobi&quot;]\n      :sith   [&quot;Darth Vader&quot;\n               &quot;Darth Sideous&quot;]\n      :droids [&quot;C3P0&quot;\n               &quot;R2D2&quot;]}\n    :ships {\n      :rebel-alliance  [&quot;Millenium Falcon&quot;\n                        &quot;X-wing figher&quot;]\n      :imperial-empire [&quot;Intergalactic Cruser&quot;\n                        &quot;Destroyer&quot;\n                        &quot;Im just making these up now&quot;]}}}\n\nIndividual starwars characters can be defined using a map of maps\n{:luke   {:fullname &quot;Luke Skywarker&quot; :skill &quot;Targeting Swamp Rats&quot;}\n  :vader  {:fullname &quot;Darth Vader&quot;    :skill &quot;Crank phone calls&quot;}\n  :jarjar {:fullname &quot;JarJar Binks&quot;   :skill &quot;Upsetting a generation of fans&quot;}}\n\nTo make the starwars character information easier to use, lets give the collection of characters a name using the def function\n(def starwars-characters\n   {:luke   {:fullname &quot;Luke Skywarker&quot; :skill &quot;Targeting Swamp Rats&quot;}\n    :vader  {:fullname &quot;Darth Vader&quot;    :skill &quot;Crank phone calls&quot;}\n    :jarjar {:fullname &quot;JarJar Binks&quot;   :skill &quot;Upsetting a generation of fans&quot;}})\n\nNow we can refer to the characters using keywords.  Using the get function we return all the information about Luke\n(get starwars-characters :luke)\n(get (get starwars-characters :luke) :fullname)\n\nBy wrapping the get function around our first, we can get a specific piece of information about Luke.  There is also the get-in function that makes the syntax a little easier to read\n(get-in starwars-characters [:luke :fullname])\n(get-in starwars-characters [:vader :fullname])\n\nOr if you want the data driven approach, just talk to the map directly\n(starwars-characters :luke)\n(:fullname (:luke starwars-characters))\n(:skill (:luke starwars-characters))\n\n(starwars-characters :vader)\n(:skill (:vader starwars-characters))\n(:fullname (:vader starwars-characters))\n\nAnd finally we can also use the threading macro to minimise our code further\n(-&gt; starwars-characters\n    :luke)\n\n(-&gt; starwars-characters\n    :luke\n    :fullname)\n\n(-&gt; starwars-characters\n    :luke\n    :skill)\n\nThis technique is called descructuring.  Find out more on Destructuring\nDuplicate keys in a map are not allowed, so the following maps...\n{&quot;fish&quot; &quot;battered&quot; &quot;chips&quot; &quot;fried&quot; &quot;fish&quot; &quot;battered and fried&quot;}\n{:fish &quot;battered&quot; :chips &quot;fried&quot; :fish &quot;battered &amp; fried&quot;}\n\n;; ...throw dupicate key errors\n\n;; Duplicate values are okay though\n{&quot;fish&quot; &quot;battered&quot; &quot;chips&quot; &quot;fried&quot; &quot;cod&quot; &quot;fried&quot;}\n\nUpdating maps\n\nNote  Get the current project information and create a map to hold that information\n\n(-&gt;&gt; &quot;project.clj&quot;\n     slurp\n     read-string\n     (drop 2)\n     (cons :version)\n     (apply hash-map)\n     (def project-configs))\n\n;; Evalute the new map defined as project\nproject\n\nWe pull out the map of project information using slurp, tidy the text up using read-string and drop the first two elements (defproject playground).  This returns a list that we want to turn into a map, but first we need to add a key to the version number.  Using the cons function we can add an element to the start of the list, in this case the :version keyword\nNow we can successfully convert the list that is returned into a map, with balanced key-value pairs.  Then we simply create a name for this new map, project-configs, so we can refer to it elsewhere in the code.\n"},"data-structures/vector.html":{"url":"data-structures/vector.html","title":"Vector","body":"Vector\nVectors are an indexed sequential collections of data, basically the same as arrays in other languages.  However, there are several differences.  The index for a vector starts at 0, just like arrays in other languages.\n\nVectors are written using square brackets [] with any number of pieces of data inside them, separated by spaces.\n\nNote Experiment with creating vectors for your data structures\n\n(vector 1 2 3 4)\n[1 2 3 4 5]\n[56.9 60.2 61.8 63.1 54.3 66.4 66.5 68.1 70.2 69.2 63.1 57.1]\n[]\n\n(def pi 3.1435893)\n[1 2.4 pi 11/4 5.0 6 7]\n[:cat :dog :rabit :fish]\n[{:cat 1} &quot;fish&quot; &quot;potatoes&quot; &quot;oil&quot; (str &quot;who ate my&quot; &quot;fish n chips&quot;)]\n\n;; Include other data structures in vectors, in this example a list is an element of the vector\n[1 2 3 &#39;(4 5 6)]\n\n;; Are duplicate elements allowed ?\n[1 2 3 4 1]\n\n\nNote What can you do with vectors? Vectors are easy to add more items to, delete items from, or pull arbitrary items out of. Here are some functions that operate on vectors.\n\n(vector? [5 10 15])\n(= [] [])\n(= [] [1])\n\n(first [5 10 15])\n(rest [5 10 15])\n(nth [5 10 15] 1)\n(count [5 10 15])\n\n(conj [5 10] 15)\n\nPredicate functions\nWhen a function is effectively asking a question, its refered to as a predicate function.  Its common practice to place a ? at the end of the function name.\nThe next two functions are used to make new vectors. The vector function takes any number of items and puts them in a new vector.\nChanging vectors\nconj takes a vector and an item and returns a new vector with that item added to the end. The function name is taken from the verb &quot;conjugate&quot;, meaning &quot;to join together.\nRemember that  collections in Clojure are immutable, so when we say that a function &quot;adds to&quot; or &quot;removes from&quot; a collection, what we mean is that the function returns a new collection with an item added or removed.\n\nNote Using one or more vectors, create a data structure of the high temperatues for the next 7 days in your area. Use the nth function to get the high temperature for next Friday\n\n"},"data-structures/set.html":{"url":"data-structures/set.html","title":"Set","body":"Set\nA Clojure set is a persistend data structure that holds a unqiue set of elements.  Again the elements can be of any type, however each element must be unique for a valid set.\n\nNote Explore creating sets from existing collections.  Notice what happens if you have duplicate values in the collection.  Define sets directly using the #{} notation and see what happens if there are duplicate values.\n\n(set `(1 2 3 4))\n(set `(1 2 1 2 3 4))\n\n#{1 2 3 4}\n#{:a :b :c :d}\n;; duplicate key error\n#{1 2 3 4 1}\n\nUnique but not ordered\nA set is not ordered by the values it contains.  If you need a sorted set then you can use the sorted-set function when creating a new set.  Or you can run\n(sorted-set 1 4 0 2 9 3 5 3 0 2 7 6 5 5 3 8)\n\n(sort [9 8 7 6 5])\n(sort-by )\n\n"},"using-data-structures/":{"url":"using-data-structures/","title":"Using data structures","body":"Using data structures\nSequence abstractions\nThere are functions that work on all the built in datastructures in Clojure.\nfirst\nsecond\nrest\ncons\n\nFixme This should be an introduction to this topic, with the content below being the different sections of that topic.\n\nGiving a data structure a name\nWe have seen that defining things is as simple as giving a name to a value using the def function.\n(def person &quot;Jane Doe&quot;)\n\n;; Names are of course case sensitive, so Person is not the same as person\n(def Person &quot;James Doh&quot;)\n\nClojure uses dynamic typing, this means its trivial to mix and match different kinds of data.  Here we are defining a name for a vector, which contains numbers, a string and name of another def.\n(def my-data [1 2 3 &quot;frog&quot; person])\n\nmy-data\n\nData structures are immutable, names are mutable\nYou can dynamically re-define a name to points to a different value.\n(def my-data [1 2 3 4 5 &quot;frog&quot; person])\n\nthe original value that defined my-data remains unchanged (its immutable), so anything using that value remains unaffected.  Essentially we are re-mapping my-data to a new value.\nLets define a name to point to a list of numbers\n(def my-list &#39;(1 2 3))\n\nWe are returned that list of numbers when we evaluate the name\nmy-list\n\nWe can use the cons function to add a number to our list, however because lists are immutable, rather than changing the original list, a new one is returned.  So if we want to keep on refering to our &quot;changed&quot; list, we need to give it a name\n(def my-list-updated (cons 4 my-list))\n\nAs you can see we have not changed the original list\nmy-list\n\n;; The new list does have the change though.\nmy-list-updated\n\nYou could therefore give the impression of mutable state by applying a function to data structure and redefining the original name to point to the resulting data structure.\n\nHint In practice, the ability to redifine functions and data structures live helps you develop your application quickly in the REPL.\nIn production you typical do not redefine functions or data structures in a live running application.  That could be part of a new release of your application though.\n\n(def my-list (cons 5 my-list))\n\nSo now when we evaluate the original name, we get the updated list\nmy-list\n\nPractising with lists\n\nNote Create a simple collection of developer events.  First use a list of strings, then try a map with keywords.  For each data structure, pull out some of the event details\n\n(def developer-events-strings &#39;(&quot;Devoxx UK&quot; &quot;Devoxx France&quot; &quot;Devoxx&quot; &quot;Hack the Tower&quot;))\n\n(def developer-events-strings2 (list &quot;Devoxx UK&quot; &quot;Devoxx France&quot; &quot;Devoxx&quot; &quot;Hack the Tower&quot;))\n\ndeveloper-events-strings\n\n(first developer-events-strings)\n\n(def developer-events-vector\n  [:devoxxuk :devoxxfr :devoxx :hackthetower] )\n\nUsing a Clojure Vector data structure seems a little more Clojurey, especially when the vector contains keywords.  Think of a Vector as an Array, although in Clojure it is again immutable in the same way a list is.\n\nNote Create a slightly more involved data structure, holding more data around each developer events.  Suggest using a map, with each key being the unique name of the developer event.\nThe details of each event (the value to go with the event name key) is itself a map as there are several pieces of data associated with each event name.\n\n(def dev-event-details\n  {:devoxxuk     {:URL &quot;http://jaxlondon.co.uk&quot;\n                  :event-type &quot;Conference&quot;\n                  :number-of-attendees 700\n                  :call-for-papers true}\n   :hackthetower {:URL &quot;http://hackthetower.co.uk&quot;\n                  :event-type &quot;hackday&quot;\n                  :number-of-attendees 60\n                  :call-for-papers false}})\n\nLets call the data structre and see what it evaluates too, it should not be a surprise\ndev-event-details\n\nWe can ask for the value of a specific key, and just that value is returned\n(dev-event-details :devoxxuk)\n\nIn our example, the value returned from the :devoxxuk key is also a map, so we can ask for a specific part of that map value by again using its key\n(:URL (dev-event-details :devoxxuk))\n\n\nNote Lets define a simple data structure for stocks data using a vector of maps, as there will be one or more company stocks to track.  Each map represents the stock information for a company.  Get the value of the whole data structure by refering to it by name, ask for a specific element by its position in the array using the nth function.  Then try some of the common functions that work on collections.\n\n(def portfolio [ { :ticker &quot;CRM&quot; :lastTrade 233.12 :open 230.66}\n                 { :ticker &quot;AAPL&quot; :lastTrade 203.25 :open 204.50}\n                 { :ticker &quot;MSFT&quot; :lastTrade 29.12  :open 29.08 }\n                 { :ticker &quot;ORCL&quot; :lastTrade 21.90  :open 21.83 }])\n\nportfolio\n\n(nth portfolio 0)\n\n(nth portfolio 3)\n\n(first portfolio)\n(rest portfolio)\n(last portfolio)\n\nFirst and next are termed as sequence functions in Clojure, unlike other lisps, you can use first and next on other data structures too\nReturn values not what they should be\nIf you run a function over a data structure, you may not always get back the type of value you want.  It easy to wrap a function around to give you the desired value type.\n\nNote Use the str function to get a string from person, rather than a set of characters\n\n(first person)\n(rest person)\n\n(str (first person))\n\n;; How do we return the rest of the string as a string ?\n(str (rest person))\n(map str (rest person))\n(str (map str (rest person)))\n(apply str (rest person))\n\nYou can get the value of this map\n(def luke {:name &quot;Luke Skywarker&quot; :skill &quot;Targeting Swamp Rats&quot;})\n(def darth {:name &quot;Darth Vader&quot;    :skill &quot;Crank phone calls&quot;})\n(def jarjar {:name &quot;JarJar Binks&quot;   :skill &quot;Upsetting a generation of fans&quot;})\n\n(get luke :skill)\n\nSet #{}\nA Set is a collection that contains a unique set of elements.  As with all the other Clojure collections, a set can contain any valid types in Clojure.\n(#{:a :b :c} :c)\n(#{:a :b :c} :z)\n\nYou can pull out data from a Vector\n([1 2 3] 1)\n\n;; ([1 2 3] 1 2)  ;; wrong number of arguments, vectors behaving as a function expect one parameter\n\n;; ((1 2 3) 1) ;; you cant treat lists in the same way, there is another approach - assoc\n\nand there are lots of functions that work on data structures\n(def evil-empire #{&quot;Palpatine&quot; &quot;Darth Vader&quot; &quot;Boba Fett&quot; &quot;Darth Tyranus&quot;})\n\n(contains? evil-empire &quot;Darth Vader&quot;)\n\nScope\nAll def names are publicly available via their namespace.  As def values are immutable, then keeping things private is of less concern than languages built around Object Oriented design.\nPrivate definitions syntax can be used to limit the access to def names to the namespace they are declared in.\nTo limit the scope of a def, add the :private true metadata key value pair.\n(def ^{:private true} some-var :value)\n\n(def ^:private some-var :value)\n\nThe second form is syntax sugar for the first one.\nYou could also define a macro for def-\n(defmacro def- [item value]\n  `(def ^{:private true} ~item ~value)\n)\n\nYou would then use this macro as follows:\n(def- private-definition &quot;This is only accessible in the namespace&quot;)\n\nBe Lazy and get more done\nSeqs are an interface for logical lists, which can be lazy.  &quot;Lazy&quot; means that a seq can define an infinite series, like so:\n(range 4)\n\n(range) ; =&gt; (0 1 2 3 4 ...) (an infinite series)\n\nSo we dont blow up our memory, just get the values we want\n(take 4 (range)) ;  (0 1 2 3)\n\nClojure (and Lisps in general) tend to evaluate at the last possible moment\nUse cons to add an item to the beginning of a list or vector\n(cons 4 [1 2 3]) ; =&gt; (4 1 2 3)\n(cons 4 &#39;(1 2 3)) ; =&gt; (4 1 2 3)\n\nUse conj to add an item to the beginning of a list, or the end of a vector\n(conj [1 2 3] 4) ; =&gt; [1 2 3 4]\n(conj &#39;(1 2 3) 4) ; =&gt; (4 1 2 3)\n\nChanging data structures does not change the original data structure\nLets define a name for a data structure\n(def name1 [1 2 3 4])\n\nwhen we evaluate that name we get the original data we set\nname1\n\nNow we use a function called conj to adds (conjoin) another number to our data structure\n(conj name1 5)\n\nThis returns a new value without changing the original data structre\nname1\n\nWe cant change the original data structure, it is immutable.  Once it is set it cant be changed. However, if we give a name to the resultl of changing the original data structure, we can refer to that new data structure\n(def name2(conj name1 5))\n\nNow name2 is the new data structure, but name1 remains unchanged\nname2\nname1\n\nSo we cannot change the data structure, however we can achieve something that looks like we have changed it.  We can re-assign the original name to the result of changing the original data structure\n(def name2(conj name1 5))\n\nNow name1 and name2 are the same result\nname2\nname1\n\n\nHint An analogy (thanks to Chris Ford)\nYou have the number 2.  If you add 1 to 2, what value is the number 2?\nThe number 2 is still 2 no mater that you add 1 to it, however, you get the value 3 in return\n\nUse concat to add lists or vectors together\n(concat [1 2] &#39;(3 4)) ; =&gt; (1 2 3 4)\n\nUse filter, map to interact with collections\n(map inc [1 2 3]) ; =&gt; (2 3 4)\n(filter even? [1 2 3]) ; =&gt; (2)\n\nUse reduce to reduce them\n(reduce + [1 2 3 4])\n; = (+ (+ (+ 1 2) 3) 4)\n; =&gt; 10\n\nReduce can take an initial-value argument too\n(reduce conj [] &#39;(3 2 1))\n; = (conj (conj (conj [] 3) 2) 1)\n; =&gt; [3 2 1]\n\nDestructuring\nDestructuring is a form of pattern matching that is common in Clojure.  Destructuring allow you to pull out the specific elelments from a collection.\nDestructuring is commonly used with the let method for creating local bindings (locally scoped names).\n(let [[a b c &amp; d :as e] [1 2 3 4 5 6 7]]\n  [a b c d e])\n\n(let [[[x1 y1][x2 y2]] [[1 2] [3 4]]]\n  [x1 y1 x2 y2])\n\n;; with strings\n(let [[a b &amp; c :as str] &quot;asdjhhfdas&quot;]\n  [a b c str])\n\n;; with maps\n(let [{a :a, b :b, c :c, :as m :or {a 2 b 3}}  {:a 5 :c 6}]\n  [a b c m])\n\nIt is often the case that you will want to bind same-named symbols to the map keys. The :keys directive allows you to avoid the redundancy:\n(let [{fred :fred ethel :ethel lucy :lucy} m] )\n\nThis can be written in a shorter form as follows:\n(let [{:keys [fred ethel lucy]} m] )\n\nAs of Clojure 1.6, you can also use prefixed map keys in the map destructuring form:\n(let [m {:x/a 1, :y/b 2}\n      {:keys [x/a y/b]} m]\n  (+ a b))\n\nAs shown above, in the case of using prefixed keys, the bound symbol name will be the same as the right-hand side of the prefixed key. You can also use auto-resolved keyword forms in the :keys directive:\n(let [m {::x 42}\n      {:keys [::x]} m]\n  x)\n\n"},"using-data-structures/applying-functions.html":{"url":"using-data-structures/applying-functions.html","title":"Applying functions","body":"Applying functions to data structures\nApplying a functions behaviour to the elements of a data structure\n"},"using-data-structures/mapping-data-structures.html":{"url":"using-data-structures/mapping-data-structures.html","title":"Mapping functions","body":"Mapping functions over data structures\nMap allows you to work over one or more data sets, appying the function to each element of each of the data structures.\nWhen the data structures are of equal size, then the same sized data structure is returned.\n(map + [1 2 3] [1 2 3])\n\n=&gt; (2 4 6)\nIf one data structure is smaller, then the function is only applied up to the last element of the smallest data structure.\n(map + [1 2 3] [1 2])\n\n=&gt; (2 4)\n(map + [1 2 3] [1])\n\n=&gt; (2)\n(map + [1 2 3] [])\n\n=&gt; ()\n(map + [1 2 3])\n\n=&gt; (1 2 3)\nLets look at another example.  Here we have a pre-defined Fibonnacci sequence up to the first 12 values.\n(def fibonacci-sequence [1 2 3 5 8 13 21 34 55 89 144 278])\n\nIf we just want the first 10 values of the sequence, we can use the take function.\n(take 10 fibonacci-sequence)\n\n=&gt; (1 2 3 5 8 13 21 34 55 89)\nIf we want a calculation using the values of the fibonacci-sequence then we can use map with a function.  In this case we are going to generate a range of Integer numbers from 0-9 using the function range.  That range of numbers is then multiplied element by element with the corresponding element in the fibonacci-sequence.\n(map * (range 10) fibonacci-sequence)\n\n=&gt; (0 2 6 15 32 65 126 238 440 801)\nSo,\n\n0 times 1 is 0,\n1, times 2 is 2,\n2 times 3 is 6, etc.\n\n"},"modifying-data-structures/":{"url":"modifying-data-structures/","title":"Modifying data structures","body":"Modifying data structures\nWait, I thought you said that data structures were immutable!  So how can we change them then?\nYes, lists, vectors, maps and sets are all immutable.  However, you can get a new data structure that has the changes you want. To make this approach efficient, the new data structure contains only the new data and links back to the existing data structure for shared data elements.\nWe will see some of the most common functions that work with data structures in this secion.  In actuality, everything can be considered a function that works on a data structure though, as that is the language design of clojure.\n"},"modifying-data-structures/lists.html":{"url":"modifying-data-structures/lists.html","title":"Lists","body":"Lists\nYou can change lists with the cons function, see (doc cons) for details\n(cons 5 &#39;(1 2 3 4))\nYou will see that cons does not change the existing list, it create a new list that contains the number 5 and a link to all the elements of the existing list.\nYou can also use cons on vectors (cons 5 [1 2 3 4])\n(cons &quot;fish&quot; &#39;(&quot;and&quot; &quot;chips&quot;))\n\n(conj &#39;(1 2 3 4) 5)\n\n(conj [1 2 3 4] 5)\n\n\n;; Lets define a simple list and give it a name\n(def list-one &#39;(1 2 3))\n\n;; the name evaluates to what we expect\nlist-one\n\n;; If we add the number 4 using the cons function, then we\n;; get a new list in return, with 4 added to the front (because thats how lists work with cons)\n(cons 4 list-one)\n\n;; If we want to keep the result of adding to the list, we can assign it a different name\n(def list-two (cons 4 list-one))\n;; and we get the result we want\nlist-two\n\n;; we can also assing the original name we used for the list to the new list\n(def list-one (cons 4 list-one))\n\n;; If we re-evaluate the definition above, then each time we will get an extra\n;; number 4 added to the list.\n\nlist-one\n\n;; Again, this is not changing the original list, we have just moved the name\n;; of the list to point to the new list.\n;; Any other function working with this data structure before reassigning the name\n;; will not be affected by the re-assignment and will use the unchanged list.\n\n"},"modifying-data-structures/maps.html":{"url":"modifying-data-structures/maps.html","title":"Maps","body":"Maps\n(def alphabet-soup {:a 1 :b 2 :c 3})\n\n(assoc alphabet-soup :d 4)\n\n"},"modifying-data-structures/vectors.html":{"url":"modifying-data-structures/vectors.html","title":"Vectors","body":"Vectors\n"},"modifying-data-structures/sets.html":{"url":"modifying-data-structures/sets.html","title":"Sets","body":"Sets\n"},"defining-behaviour-with-functions/":{"url":"defining-behaviour-with-functions/","title":"Defing behaviour with Functions","body":"Defining behaviours with functions\nClojure has functions, rather than methods for defining behaviour / &quot;algorithms&quot;\nClojure design at its most basic comprises:\n\none or more data structures\nfunctions that process those datastructures\n\nThere is a common saying in Clojure: &quot;Its better to have one data structure and many functions, than many data structures and many funcitions&quot;\n"},"defining-behaviour-with-functions/syntax.html":{"url":"defining-behaviour-with-functions/syntax.html","title":"Syntax","body":"Syntax\nDefining functions is done with the fn function\nWe have already seen the def function to assign names to values.  We can also use the same function to give a name to our functions.\n"},"defining-behaviour-with-functions/calling-functions.html":{"url":"defining-behaviour-with-functions/calling-functions.html","title":"Calling functions","body":"Calling Functions\nTo call a function in Clojure you use the name of the function as the first element of a list.\nIn this simple example, a function is defined that takes no arguments, then that function is called.\n(defn my-function []\n  (str &quot;I only return this string&quot;))\n\n(my-function)\n\nFunctions can be defined to take arguments.\nArity\nThis is the term to describe the number of arguments a function takes.  This can be a fixed number or variable number of arguments.\nSimple polymorphism can also be used to have one function take different numbers of arguments, as with the multi-arity function in the examples below.\n(defn single-arity [] \n  (str &quot;I do not take any arguments&quot;))\n\n(defn single-arity [argument] \n  (str &quot;I take 1 argument only&quot;))\n\n(defn triple-arity [argument1 argument2 argument3] \n  (str &quot;I take 3 arguments only&quot;))\n\n(defn multi-arity \n ([argument] \n   (str &quot;I match 1 argument only&quot;))\n ([argument1 argument2]\n   (str &quot;I match when 2 arguments are used&quot;)))\n\n(defn variable-arity [argument &amp; more-arguments]\n  (str &quot;I assign the first argument to argument, \n        all other arguments to more-arguments&quot;))\n\n"},"defining-behaviour-with-functions/examples.html":{"url":"defining-behaviour-with-functions/examples.html","title":"Examples","body":"Examples\n"},"defining-behaviour-with-functions/parameters.html":{"url":"defining-behaviour-with-functions/parameters.html","title":"Parameters","body":"Parameters\n"},"defining-behaviour-with-functions/using-functions-over-data-structures.html":{"url":"defining-behaviour-with-functions/using-functions-over-data-structures.html","title":"Using Functions over data structures","body":"Using Functions over data structures\n"},"defining-functions/":{"url":"defining-functions/","title":"Defining fuctions","body":"Defining fuctions\n"},"defining-functions/let-local-values.html":{"url":"defining-functions/let-local-values.html","title":"let local values","body":"let local values\n\nfixme To confirm - let local variables are primative types, so better for local arithmetic\n\n"},"control-flow/":{"url":"control-flow/","title":"Control flow","body":"if\n"},"control-flow/if.html":{"url":"control-flow/if.html","title":"if","body":"if\n"},"control-flow/cond.html":{"url":"control-flow/cond.html","title":"cond","body":"cond\n"},"control-flow/when.html":{"url":"control-flow/when.html","title":"when","body":"when\n"},"local-assignement/":{"url":"local-assignement/","title":"Local Assignment","body":"Local Assignment\n"},"simple-project/":{"url":"simple-project/","title":"Simple project","body":"Simple project - Salary Calculator\nIn this section we will use Leiningen to create a new Clojure project.  This project will be a simple salary calculator and have the following features:\n\nGiven an annual salary, show the hourly, daily weekly, monthly value\nGiven an hourly rate, show the approximate perminat salary its equivalent to\n  We will use an editor in combination with the REPL to develop the Clojure code, so you will need to start up your prefered editor (eg. LightTable, Emacs, SublimeText, etc.\n\nComplete project also in Git\nIf you prefer not to type in all the code, there is a complete project available at the Devoxx-Clojure-Code Github repository.\nClone the repository with the command git clone https://github.com/jr0cket/devoxx-clojure-code.git\nEach section is committed to a seperate branch so you can see the project incrementally unfold.  Branches can be listed with the command git branch and you switch to a branch using the command git checkout name-of-branch.\nIf you wish to merge a branch into master, checkout the master branch and use the command git merge name-of-branch\n"},"simple-project/create-project.html":{"url":"simple-project/create-project.html","title":"Create a project","body":"Create a project\n\nNote Create a project called salary-calculator using Leinging\n\nlein new salary-calculator\n\nThis creates a new directory with the name of the project.  We did not specify a project template, so Leiningen just used the default template.\n\nViewing the Clojure project structure\nChange into the directory created by Leiningen and view the directory structure (here we use the command tree, you can use a file manager or editor if you prefer).\n\n\nHint Clojure uses Kebab-case for its naming conventions (think of a shish-kebab), however the Java runtime does not like minus symbol, -, in directory or file names.  Therefore as there is a - symbol in the project name, Leiningen automatically changes the directory name to use the underscore _ symbol instead.\n\nVersion the project with Git (optional)\n\nHint If you have already cloned the project from Github, skip this step\n\nEven when experimenting with a new language its good to put your code into version control, so you can experiment freely and go back to alternative ideas.\n\nNote  Run the following Git commands within the root of the Clojure project (the directory containing project.clj)\n\ngit init\n\ngit add .\n\ngit commit -m &quot;Clojure project created with Leiningen default template&quot;\n\nCommand output should look similar to the following:\n\n"},"simple-project/run-the-repl.html":{"url":"simple-project/run-the-repl.html","title":"Run the REPL","body":"Run the REPL\nThe REPL (Read, Evaluate, Print Loop) is the runtime environment for Clojure.  The REPL evaluates your code and returns a result.  You can evaluate a whole project or just a single expression.  An expression is Clojure code contained within ().  You can also evaluate symbols, numbers, strings, etc.\n\nNote From the root of your project directory, run the following command\n\nlein repl\n\nCheck the REPL works with some simple maths. At the REPL prompt, user=&gt;, enter the following code and press the return key\n(+ 1 2 3)\n\nThe Clojure REPL should return the value 6\n\n\nHint The user=&gt; prompt is telling you what namespace the REPL is currently running in, by default this is user.  The =&gt; are characters representing the prompt, just like you get on the command line.\nIf you need to close the REPL at any point, type (exit)\n\n"},"what-is-functional-programming/":{"url":"what-is-functional-programming/","title":"What is Functional Programming","body":"What is Functional Programming\nFunctional programming is quite different from Imperative programming in languages like C, C++ and Java.\nImperative programming languages\nIn Imperative languages code is written that specifies a sequential of instructions that complete a task.  These instructions typically modifies program state until the desired result is achieved.\nVariables typically represent memory addresses that are mutable (can be changed) by default.\n\nFunctional programming languages\nIn functional programming individual tasks are small and achieved by passing data to a function which returns a result.  This function typically does not change the state of the system or other functions.\nFunctions are composed together to form more complex tasks and satify larger business logic.  These composed functions pass the result of their evaluation to the next function, until all functions in the composition have been evaluated.\nThe entire functional program can be thought of as a single function defined in terms of smaller ones.\nProgram execution is an evaluation of expressions, with the nesting structure of function composition determining program flow.\nVariables are typically immutable and represent values (in the mathematical sence).\n\n"},"thinking-functionally/":{"url":"thinking-functionally/","title":"Thinking Functionally","body":"Thinking Functionally\nPlease ask about functional programming and thinking functionally in the Practicalli gitter chat\n\nAn overview of thinking functionally is also covered in the presentation entitled Getting into Functional Programming with Clojure on slideshare and its accompanying youtube video\n    Get into Functional Programming with Clojure  from John Stevenson \n\n\n\n\n"},"thinking-functionally/side-effects.html":{"url":"thinking-functionally/side-effects.html","title":"Side effects","body":"Side effects\nA side effect is something that happens out of the scope of the current code that is being executed.  Side\nUndeterministic - the complexity iceburg\nWhen you have side effects, you cannot reason accurately about a piece of the code.\nIn order to understand a piece of code you must look at all possible side effects created in all lines of code to ensure you fully understand the result of executing your code.\nWith side effects in your system, complexity is hidden, causing a far greater risk of a dangerous situation.\nSide causes - side effects\nYou can think about these effects is in two specific areas, Side Causes and Side Effects\n\nSide Causes - are where other pieces of code (function) or state change affects the behaviour of a function.\nSide Effects - are where the current code (function) affects the rest of the system\n\n\n"},"thinking-functionally/pure-functions.html":{"url":"thinking-functionally/pure-functions.html","title":"Pure functions","body":"Pure functions\nA function is considered pure if it causes no side effects as well as not being affected by other functions.\nWhen you pass arguments to a function and that function returns a value without interacting with any other part of the system, then that function is considered pure.\nShould something from outside a function be allowed to affect the result of evaluating a function, or if that function be allowed to affect the outside world, then its an impure function.\n\nSo lets look at a simple code example\n\nNote Write a pure function that adds two numbers together ?\n\n\n(defn increment-numbers [number1 number2]\n  (+ number1 number2))\n\n(increment-numbers 1 2)\n\nLets look at each line of this suggested answer\n(defn increment-numbers [number1 number2]   ;; function takes 2 arguments\n  (+ number1 number2))                      ;; function uses both arguments for result\n\n(increment-numbers 1 2)                     ;; specific values are passed as arguments\n\n\nAn example with map\n\nNote Define a collection called numbers and write a named function that increments each number of the numbers collection.\nIs your function pure or impure ?\n\n\nImpure function example.\n(def numbers &#39;(5 4 3 2 1))\n\n(defn increment-numbers []\n  (map inc numbers))\n\n(impure-increment-numbers)\n\nThe function takes no arguments and is pulling in a value from outside the function.  This is a trivial example, but if all your code is like this it would be more complex.\nHere is a Pure function example\n(def numbers &#39;(5 4 3 2 1))\n\n(defn increment-numbers [number-collection]\n  (map inc number-collection))\n\n(impure-increment-numbers numbers)\n\nIn this example we are explicitly passing the number collection to the function.  The function works on passed value and returns a predictable result.\n(def numbers &#39;(5 4 3 2 1))\n\n(defn increment-numbers [numbers]\n  (map inc numbers))\n\n(impure-increment-numbers numbers)\n\nIn this example we still have a pure function, as the name numbers in the (map inc numbers) expression uses the value of numbers taken from the argument and not the more global (def numbers ...)\n\nAnother example\n\n(def staff-salaries {:bob 30000 :carol 34000 :jane 42000})\n(defn salary-updates [staff-pay]\n  (map #(+ ... 5000)))\n(salary-updates staff-salaries)\n\n"},"thinking-functionally/impure-functions.html":{"url":"thinking-functionally/impure-functions.html","title":"Impure functions","body":"Impure functions\nWe have seen some simple examples of pure functions, so lets see impure functions as a comparison.\n(def global-value &#39;(5 4 3 2 1))\n\n(defn impure-increment-numbers [number-collection]\n  (map inc global-value))\n\n(impure-increment-numbers &#39;(1 2 3 4 5))\n\nThe above function is using a global value rather than the argument passed makes this function undeterministic\nCalling libraries\nCreate a function that marks a current task complete using the current timestamp.\n(:import java.util.Date)\n\n;; side causes example\n(defn task-complete [task-name]\n  (str &quot;Setting task &quot; task-name &quot; completed on &quot; (java.util.Date.)))\n\n(task-complete &quot;hack clojure&quot;)\n\nIn this example we have called to the outside world to generate a value for us.  Although its easy enough to understand this simple example, by calling the outside world its making the function less clear.\nA more pure approach could be as follows\n(def current-date (java.util.Date.))\n\n(defn task-complete [task-name completed-date]\n  (str &quot;Setting task &quot; task-name &quot; completed on &quot; completed-date))\n\n(task-complete &quot;hack clojure&quot; (current-date))\n\nRequired values can be generated outside a function, in this case in the (def current-date ...), then passed to the function as an argument, keeping the function pure.\n"},"thinking-functionally/first-class-functions.html":{"url":"thinking-functionally/first-class-functions.html","title":"First Class functions","body":"First Class functions\nIdempot - given the same input you get the same output\n\nNote Write an expression to add up the numbers from 1 to 10 and return the overall total.\n\n\n(+ 1 2 3 4 5 6 7 8 9 10)\n\n(range 1 10)\n\n(apply + (range 1 40))\n\n(reduce + (range 1 10))\n\n(reduce + (1 2 3 4 5 6 7 8 9 10))\n\n\n\nNote Create an expression to do the same calculation, but without having to write all the numbers.  Hint: consider the functions called range and reduce.\n\n\nThe range function generates a sequence of numbers and when given arguments it does so from a specific range.  The second number is exclusive, so for 1 to 10 the second argument should be 11.\n(range 1 11)\n\nUnfortunately we cant just add the result of a range, because it returns a lazy sequence  So the following will cause an error\n(+ (range 1 11))\n\nUsing a function called reduce we can calculate a single total value from all the numbers in the collection.\nThe reduce function take 2 arguments, the first is the function to apply to a data structure, the second is the data structure.\n(reduce + (range 1 11))\n\n(reduce + (1 2 3 4 5 6 7 8 9 10))\n\n\n"},"thinking-functionally/homoiconicity.html":{"url":"thinking-functionally/homoiconicity.html","title":"Homoiconicity","body":"Homoiconicity\nClojure is a homoiconic language, which is a term describing the fact that Clojure programs are represented by Clojure data structures.\nIn Clojure you write your business logic as functions.  A function is defined using a list structure.  A function is called using a list structure, as the first element of a list is evaluated as a function call.\n\nHint Everything in Clojure is a List (or vector, map, set).\n\nThis is a very important difference between Clojure (and Common Lisp) and most other programming languages - Clojure is defined in terms of the evaluation of data structures and not in terms of the syntax of character streams/files.\nIt is quite easy for Clojure programs to manipulate, transform and produce other Clojure programs.  This is essentially what macros do in Clojure, they re-write Clojure for you.\n\nHint If you were going to create Skynet, it would be so much easier to do in Clojure\n\n\nAn example\nConsider the following expression:\n(let [x 1] \n    (inc x))\n\nEvaluating the above code in the REPL returns 2 because the repl compiles and executes any code entered into it. But [x 1] is also a literal vector data structure when it appears in a different context.\nAll Clojure code can be interpreted as data in this way. In fact, Clojure is a superset of EDN – Extensible Data Notation, a data transfer format similar to JSON. EDN supports numbers, strings, lists (1 2 3), vectors [1 2 3], maps {&quot;key&quot; &quot;value&quot;}.\nIf this sounds and looks a lot like Clojure syntax, it’s because it is. The relationship between Clojure and EDN is similar to that of Javascript and JSON, but much more powerful.\nIn Clojure, unlike JavaScript, all code is written in this data format. We can look at our let statement not as Clojure code, but an EDN data structure. Let’s take a closer look:\n(let [x 1] \n    (inc x))\n\nIn this data structure, there are four different types of data.\n\n1 is a literal integer.\nlet, x, and inc are symbols. A symbol is an object representing a name – think a string, but as an atomic object and not a sequence of characters.\n[x 1] is a vector containing two elements: symbol, x, and an integer, 1. Square brackets always signify vectors when talking about EDN data structures.\n(inc x) is a list (a linked list data structure) containing two symbols, inc and x.\n\nWhen thinking about a piece of Clojure code as a data structure, we say we are talking about the form. Clojure programmers don’t normally talk about EDN, there are just two ways to think about any bit of Clojure: 1) as code that will execute or 2) as a form, a data structure composed of numbers, symbols, keywords, strings, vectors, lists, maps, etc.\nSymbols are particularly important. They are first class names. In Clojure, we distinguish between a variable and the name of that variable. When our code is executing, x refers to the variable established by our let binding. But when we deal with that code as a form, x is just a piece of data, it’s a name, which in Clojure is called a symbol.\nThis is why Clojure is homoiconic. Code forms are data structures and data structures can be thought of as forms and executed as code. This transformation is quite literal, and two core operations, quote and eval are key ingredients to this potion.\nReferences\n\nThe Reader - Clojure. org\nHomoiconicity - Wikipedia\nIs Clojure Homoiconic - muhuk.com\nUnderstanding Homoiconicity in Clojure - Drew Colthorp\n\n"},"thinking-functionally/higher-order-functions.html":{"url":"thinking-functionally/higher-order-functions.html","title":"Higher Order functions","body":"Higher Order functions\nFunctions can be used as an arguments to other functions.  This is possible because a function always evaluates to a value.\nIt is also stated that higher order functions should return a function, usually when thinking in typed lambda calculus although some dispute this requirement.\n\nNote Create a named function as a higher order function, which adds a value to a number twice\n\n\n(defn twice [function x]\n  (function (function x)))\n\n(twice #(+ % 3) 7) ;13\n\n\n\nNote Return the even numbers from 1 to 10\n\n\n(filter\n even?\n (range 1 10))\n\n\n"},"thinking-functionally/chaining-functions.html":{"url":"thinking-functionally/chaining-functions.html","title":"Chaining functions","body":"Chaining functions\nWe have discussed how functional programs are essentially a number of functions that work together, this is often called chaining\n(let [calculated-value (* 10 (reduce +  (map inc (range 5))))]\n  calculated-value)\n\nThis expression is common in the Lisp &amp; Clojure languages.  Occasionally the chain of functions becomes challenging to read.  To overcome this parsing complexity, developers often break down a more complex expression into its parts.\n\nNote Brake down the above example into each expression that gives a value\n\n\n(range 5)\n\n(map inc (range 5))\n\n(reduce +  (map inc (range 5)))\n\n(* 10 (reduce +  (map inc (range 5))))\n\n(let [calculated-value (* 10 (reduce +  (map inc (range 5))))]\n  calculated-value)\n\nPass Binding\nEvaluate each form and pass the result as the value of te name in the next form.  Returns the result of the last form.\n(as-&gt; 4 x (list 3 x)) ; returns (3 4)\n\n(as-&gt; &quot;a&quot; x\n      (list 1 x)\n      (list 2 x)\n      (list 3 x)\n      (list 4 x)\n      (list 5 x))\n\n;; returns\n;; (5 (4 (3 (2 (1 &quot;a&quot;)))))\n\n\n"},"thinking-functionally/threading-macros.html":{"url":"thinking-functionally/threading-macros.html","title":"Threading macros","body":"Threading macros\nThe following code is written in classic Lisp style.\n(nth (read-string (slurp &quot;project.clj&quot;)) 2)\n\nWhen you come to read Lisp, you start from the inside out.  In this case you start with (slurp ...) and what it returns is used as the argument to (read-string ...) and so on...\nIn our minds we probably constructed the following basic algorithm:\n\nGet the contents of the project.clj file using slurp\nRead the text of that file using read-string\nSelect just the third string using nth 2 (using an index starting at 0)\n\nCan we rewrite our Clojure code to fit the way we think?\nThread first macro\nUsing the thread-first macro -&gt; we can chain Clojure functions together with a terser syntax, passing the result of the first evaluation as the first argument to the next function and so on.  Using this style, we can write code that matches the algorithm in our head.\nFor example\n(-&gt;\n (clojure.string/lower-case &quot;HELLO&quot;)\n (str &quot;, Clojure world&quot;))\n\nThe value hello is converted to lower case and that result is passed as the first argument to the next function.  The string function is then evaluated with this new argument and the final &quot;hello, Clojure world&quot; string is returned as the result.\n\nNote Refactor the Clojure code using the thread-first macro\n\n\n(-&gt;\n &quot;./project.clj&quot;\n slurp\n read-string\n (nth 2))\n\n\nHint The &quot;project.clj&quot; is a string, so when you evalute it as an expression, it simply returns the same string.  That string is then passed as an argument to any following functions.\n\nUsing the threading macro, the result of every function is passed onto the next function in the list.  This can be seen very clearly usng ,,, to denote where the value is passed to the next function\n(-&gt;\n &quot;project.clj&quot;\n slurp ,,,\n read-string ,,,\n (nth ,,, 2))\n\n\nHint Commas in clojure are treated as whitespace, they are simply ignored when it comes to evaluating code.  Typically commas are rarely used and only to help human readabilty of the code\n\nTo make this really simple lets create a contrived example of the threading macro.  Here we use the str function to join strings together.  Each individual str function joins its own strings together, passing the resuting string as the first argument to the next function.\n(-&gt;\n (str &quot;This&quot; &quot; &quot; &quot;is&quot; &quot; &quot;)\n (str &quot;the&quot; &quot; &quot; &quot;threading&quot; &quot; &quot; &quot;macro&quot;)\n (str &quot;in&quot; &quot; &quot; &quot;action.&quot;))\n\nOutput\n;; =&gt; &quot;This is the threading macro in action&quot;\n\nThread-last macro\nUsing the thread-last macro, -&gt;&gt;, the result of a function is passed as the last argument of the next function call.  So in another simple series of str function calls, our text comes out backwards.\n(-&gt;&gt;\n (str &quot; This&quot;)\n (str &quot; is&quot;)\n (str &quot; backwards&quot;))\n\n;; =&gt; backwards is This&quot;\n\n\n"},"thinking-functionally/example-hitchhikers-guide.html":{"url":"thinking-functionally/example-hitchhikers-guide.html","title":"Example: Hitchhikers Guide","body":"Example: Hitchhikers Guide\n;; Example of threading macros and the use of a connected REPL to give fast feedback\n;; as you are developing code.\n\nNote Write functions that will give a list of the most used words used in a book, excluding the common English words like &quot;the, and, it, I&quot;.  Join those functions with a threading macro.\n\nSuggest you use the assumed perfectly legal copy of the Hitchhickers book text using the slurp function\nApproximate algorithm\n\nUse a regular expression to create a collection of individual words - eg. #&quot;[a-zA-Z0-9|&#39;]+&quot;\nConvert all the words to lower case so they match with common words source - clojure.string/lower-case\nRemove the common English words used in the book, leaving more context specific words\nCalculate the frequencies of the remaining words, returning a map of word &amp; word count pairs\nSort-by word count values in the map\nReverse the collection so the most commonly used word is the first element in the map\n\n\n(def book (slurp &quot;http://clearwhitelight.org/hitch/hhgttg.txt&quot;))\n\n(def common-english-words\n  (-&gt; (slurp &quot;http://www.textfixer.com/resources/common-english-words.txt&quot;)\n      (clojure.string/split #&quot;,&quot;)\n      set))\n\n;; using a function to pull in any book\n(defn get-book [book-url]\n  (slurp book-url))\n\n\n(defn -main [book-url]\n  (-&gt;&gt; (get-book book-url)\n       (re-seq #&quot;[a-zA-Z0-9|&#39;]+&quot;)\n       (map #(clojure.string/lower-case %) ,,,)\n       (remove common-english-words ,,,)\n       frequencies ,,,\n       (sort-by val ,,,)\n       reverse ,,,))\n\n;; Call the program \n\n(-main &quot;http://clearwhitelight.org/hitch/hhgttg.txt&quot;)\n\n\nHint In Spacemacs / Emacs, the keybinding C-c C-p show the output in a seperate buffer.  Very useful when the function returns a large results set.\n\nOff-line sources of Hitchhickers book and common English words\n(def book (slurp &quot;./hhgttg.txt&quot;))\n\n(def common-english-words\n  (-&gt; (slurp &quot;common-english-words.txt&quot;)\n      (clojure.string/split #&quot;,&quot;)\n      set))\n\nOriginal concept from Misophistful: Understanding thread macros in clojure\n\nHint The slurp function holds the contents of the whole file in memory, so it may not be appropriate for very large files.  If you are dealing with a large file, consider wrapping slurp in a lazy evaluation or use Java IO (eg. java.io.BufferedReader, java.io.FileReader.).  See the Clojure I/O cookbook and The Ins &amp; Outs of Clojure for examples.\n\n\n"},"thinking-functionally/immutable.html":{"url":"thinking-functionally/immutable.html","title":"Immutability","body":"Immutability\n"},"thinking-functionally/copying-collections.html":{"url":"thinking-functionally/copying-collections.html","title":"Copying collections","body":"Copying collections\nAs we have discussed, immutable data structure cannot be changes.  So when you run a function over a collection a copy of that collection is returned.\n\nNote Using the map function, increment all the elements in a vector\n\n\n(map inc [1 2 3 4 5])\n\nThe above map funciton is roughly equivalent to\n(conj [] (inc 1) (inc 2) (inc 3) (inc 4) (inc 5))\n\n\n"},"thinking-functionally/persistent-data-structures.html":{"url":"thinking-functionally/persistent-data-structures.html","title":"Persistent data structures","body":"Persistent data structures\n"},"thinking-functionally/list-comprehension.html":{"url":"thinking-functionally/list-comprehension.html","title":"List Comprehension","body":"List Comprehension\nIn general terms, list comprehensions should:\n\nbe distinct from (nested) for loops and the use of map &amp; filter functions within the syntax of the language.\nreturn either a list or an iterator (an iterating being something that returns successive members of a collection, in order),\n\nIn Clojure, list comprehension is via the for function.  This is different to the for in other langauges as you will see.\n(for [number [1 2 3]] (* number 2))\n\nThe for function should be read as follows:\n&quot;for each number in the collection [1 2 3], apply the function (* number 2)&quot;\nCouldnt we just do this with map?  Yes, we could.\n(map #(* % 2) [1 2 3])\n\nSo why to we need for function?  It really shows its value when you are working with multiple collections\n(for [number [1 2 3]\n      letter [:a :b :c]]\n  (str number letter))\n\nAgain we could use map function for this as follows\n(mapcat (fn [number] (map (fn [letter] (str number letter)))))\n\nSo with the for function we can do the same calculation with much easier code to reason about.\nFiltering results with predicates\nWith the for funciton we can add a filter on the results by using a predicate, to test if a condition is true or false.  Any values that meet the condition as true are returned, values that are false are ommitted.\n(for [x (range 10) :when (odd? x)] x)\n\n(for [x (range 10) :while (even? x)] x)\n\nTo do this kind of filtering with maps would be possible, however the code would be more harder for humans to parse and understand.\n\nNote Create a 3-tumbler combination padlock, with each tumbler having a range of 0 to 9. Count the number of possible combinations.  Then add a predicate that filters out some of the combinations\n\n\nLets just model all the possible combinations\n(for [tumbler-1 (range 10)\n      tumbler-2 (range 10)\n      tumbler-3 (range 10)]\n [tumbler-1 tumbler-2 tumbler-3])\n\nNow lets count the combinations\n(count (for [tumbler-1 (range 10)\n             tumbler-2 (range 10)\n             tumbler-3 (range 10)]\n         [tumbler-1 tumbler-2 tumbler-3]))\n\nNow add a predicate using :when to filter out the combinations that do not match.\n(count (for [tumbler-1 (range 10)\n             tumbler-2 (range 10)\n             tumbler-3 (range 10)\n             :when (or (= tumbler-1 tumbler-2)\n                       (= tumbler-2 tumbler-3)\n                       (= tumbler-3 tumbler-1))]\n         [tumbler-1 tumbler-2 tumbler-3]))\n\n\n\nNote Create a 2 character prefix for tickets, using capital letters from the English alphabet.  However, exclude I and O as they can be mistakend for numbers\n\n\nLets just model all the possible combinations\n(for [letter-1 capital-letters\n      letter-2 capital-letters\n      :when (and (not (blacklisted letter-1))\n                 (not (blacklisted letter-2)))]\n  (str letter-1 letter-2))\n\n\n"},"thinking-functionally/lazy-evaluation.html":{"url":"thinking-functionally/lazy-evaluation.html","title":"Lazy Evaluation","body":"Lazy Evaluation\n"},"thinking-functionally/sequences.html":{"url":"thinking-functionally/sequences.html","title":"Sequences","body":"Sequences\n"},"thinking-functionally/sequence-abstractions.html":{"url":"thinking-functionally/sequence-abstractions.html","title":"Sequence-abstraction","body":"Sequence-abstraction\n"},"thinking-functionally/functors.html":{"url":"thinking-functionally/functors.html","title":"Functors","body":"Functors\n\nFrom Wikipedia\nIn mathematics, a functor is a type of mapping between categories which is applied in category theory. Functors can be thought of as homomorphisms between categories. In the category of small categories, functors can be thought of more generally as morphisms.\n\nPut simply, a function that takes a value and a function as its arguments, eg map.  The argument pass as a value is most commonly a collection type (vector, map, string, list).\nA functor applies the given function to each element in the the collection by unpacking and each element from the collection and passing it to the function as an argument.  The result from each application of the function from the element of the collection is put into a new collection.  This new collection is returned once all elements of the original collection have been processed.\nThe function, eg. + is applied in turn to each value and returns a structured value as a result,\neg. a list or vector\n(map inc [1 2 3 4 5])\n\n(inc 1 )\n\n"},"thinking-functionally/arity.html":{"url":"thinking-functionally/arity.html","title":"Arity","body":"Arity\n"},"thinking-functionally/pattern-matching.html":{"url":"thinking-functionally/pattern-matching.html","title":"Pattern matching","body":"Pattern matching\n"},"thinking-functionally/polymorphism.html":{"url":"thinking-functionally/polymorphism.html","title":"Polymorphism","body":"Ploymorphism\n"},"thinking-functionally/recursion.html":{"url":"thinking-functionally/recursion.html","title":"Recursion","body":"Recursion\n"},"thinking-functionally/recursion-polymorphism.html":{"url":"thinking-functionally/recursion-polymorphism.html","title":"Recursion & Polymorphism","body":"Recursion &amp; Polymorphism\n"},"thinking-functionally/tail-recursion.html":{"url":"thinking-functionally/tail-recursion.html","title":"Tail recursion","body":"Tail recursion\n"},"thinking-functionally/partial-functions.html":{"url":"thinking-functionally/partial-functions.html","title":"Currying & Partial Functions","body":"Currying &amp; Partial Functions\nClojure does not support automatic currying, (+3) would result in applying + to 3, resulting with number 3 instead of a function that adds 3 as in Haskell. Therefore, in Clojure we use partial that enables the equivalent behavior.\n(map (partial reduce +) [[1 2 3 4] [5 6 7 8]])\n\n\n(defn sum\n  &quot;Sum two numbers together&quot;\n  [number1 number2]\n  (+ number1 number2))\n\n(sum 1 2)\n;; =&gt; 3\n\nIf you try and evaluate sum with a single value then you get an arity exception\n(sum 1)\n;; =&gt; clojure.lang.ArityException\n;; =&gt; Wrong number of args (1) passed to: functional-concepts/sum\n\nIf we did need to call sum with fewer than the required arguments, for example if we are mapping sum over a vector, then we can use partial to help us call the sum function with the right number of arguments.\nLets add the value 2 to each element in our collection\n(map (partial sum 2) [1 3 5 7 9])\n\nCurrying in clojure\nCurrying is the process of taking some function that accepts multiple arguments, and turning it into a sequence of functions, each accepting a single argument.  Or put another way, to transform a function with multiple arguments into a chain of single-argument functions.\nCurrying relies on having fixed argument sizes, whereas Clojure gets a lot of flexibility from variable argument lengths (variable arity).\nClojure therefore has the partial function gives results similar to currying, however the partical function also works with variable functions.\nPartial refers to supplying some number of arguments to a function, and getting back a new function that takes the rest of the arguments and returns the final result\nOne advantage of partial is to avoid having to write your own anonymous functions\nUseful references\n\n{Partial function applications for humans}(http://andrewberls.com/blog/post/partial-function-application-for-humans)\n\n(defn join-strings\n  &quot;join one or more strings&quot;\n  [&amp; args]\n  (apply str args))\n\nThe [&amp; args] argument string says take all the arguments passed and refer to them by the name args.  Its the &amp; character that has the semantic meaning, so any name after the &amp; can be used, although args is common if there is no domain specific context involved.\n(join-strings &quot;Hello&quot; &quot; &quot; &quot;Clojure&quot; &quot; &quot; &quot;world&quot;)\n;; ⇒ &quot;Hello Clojure world&quot;\n\n;; define g. To be partial of f, feeding it 3 as first arg\n(def wrap-join-strings (partial join-strings &quot;Hello&quot; &quot; &quot; &quot;Clojure&quot; &quot; &quot;))\n\n(wrap-join-strings) ; ⇒ &quot;Hello&quot;\n\n(wrap-join-strings &quot;world&quot;) ; ⇒ &quot;Helloworld&quot;\n\n"},"thinking-functionally/anonymous-functions.html":{"url":"thinking-functionally/anonymous-functions.html","title":"Anonymous Functions","body":"Anonymous Functions\n"},"thinking-functionally/naming.html":{"url":"thinking-functionally/naming.html","title":"Naming","body":"Naming\n"},"thinking-functionally/global-definitions.html":{"url":"thinking-functionally/global-definitions.html","title":"Global definitions","body":"Global definitions\n"},"thinking-functionally/local-bindings.html":{"url":"thinking-functionally/local-bindings.html","title":"Local Bindings","body":"Local Bindings\n"},"thinking-functionally/private-functions.html":{"url":"thinking-functionally/private-functions.html","title":"Private functions","body":"Private functions\n"},"thinking-functionally/managing-state-changes.html":{"url":"thinking-functionally/managing-state-changes.html","title":"Managing state changes","body":"Managing state changes\n"},"libraries/":{"url":"libraries/","title":"Libraries","body":"Libraries\n"},"libraries/clojars.html":{"url":"libraries/clojars.html","title":"Clojars","body":"Clojars\n"},"libraries/om.html":{"url":"libraries/om.html","title":"om","body":"om\n"},"libraries/edn.html":{"url":"libraries/edn.html","title":"edn","body":"edn\n"},"testing/":{"url":"testing/","title":"Testing","body":"Testing\n"},"leiningen/":{"url":"leiningen/","title":"Leiningen Configuration","body":"Projects with Leiningen\nLeiningen is the build automation tool for Clojure and is very simple to work with.  This section will guide you through the common tasks you will use Leiningen for when working with Clojure.\n\n"},"leiningen/create-a-project.html":{"url":"leiningen/create-a-project.html","title":"Create a project","body":"Creating a project\nIts easy to create a new Clojure project with Leiningen, simply run the command lein new template-name project-name.  The template-name can be app ... or one of the templates on Clojars (more on this later).\n\nNote Create a new project called practicalli\n\nOpen a terminal window and in a directory where you usually keep your projects, run the following command\nlein new app practicalli\n\nA new directory will be created called practicalli and the contents of the directory should be as follows:\n\nfixme add screenshot of project structure inside the practicalli directory, including the source tree to show the namespace.\nComment The project-name will also be the namespace used for the project.\n\n"},"leiningen/run-the-repl.html":{"url":"leiningen/run-the-repl.html","title":"Run the REPL","body":"Run the REPL\nYou can try out your new project in Clojure&#39;s run time environment, the REPL.\nInside your project directory, practicalli run the following command:\nlein repl\n\nYou will see a REPL prompt, where you can enter Clojure expressions for evaluation.  Lets try some simple Clojure:\n(+ 1 2)\n(str &quot;Hello&quot; &quot; &quot; &quot;Clojure world&quot;)\n(def author &quot;John Stevenson&quot;)\nauthor\n\n\nfixme add some extra examples to try\n\nReload changes from file\nIf you do not have your editor connected to the REPL you can still reload changes made to files by reloading the changed namespace in the REPL.\nEnter the following into the REPL, specifying your namespace\n(use &#39;your.namespace :reload)\n\nYou can also use https://github.com/clojure/tools.namespace, however, as refresh throws away the current namespace you have to enter both lines of code each time\n(use &#39;[clojure.tools.namespace.repl :only (refresh)])\n\n(refresh)\n\n"},"leiningen/profile.html":{"url":"leiningen/profile.html","title":"Profiles overview","body":"Profiles\nYou can run your Clojure project with different profiles, establishing a different set of configuration options when run with Leiningen.\nProfiles can be created in one of the following places:\n\n\n\nProfile name\nFilename\nDescription\n\n\n\n\nProject\nproject.clj\nproject specific profiles used by all developers on the project.\n\n\nUser\nprofiles.clj\nadd or override individual configuration for the project, not typically shared as part of the project.\n\n\nUser-wide\n~/.lein/profiles.clj\ncommon configuration a developer uses across all their Clojure projects.\n\n\n\nProfiles defined with the same name in any of the above files are either merged or over-written in the following order of precedence to form a single configuration map:\n\n\nfixme refactor the rest of the text on profiles to just cover the essentials and link to the official documentation for further details.\nprobably just need a few examples typically added to the different profile files\n\nProject profiles\nDefine one or more profiles specific to the project.  Typically done to seperate configuration for different parts of the development lifecycle, eg. dev, test, production\nThe example below adds a &quot;dummy-data&quot; resources directory during development and a dependency upon &quot;expectations&quot; that&#39;s only used for tests/development.\n(defproject myproject &quot;0.5.0-SNAPSHOT&quot;\n  :description &quot;A project for doing things.&quot;\n  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]]\n  :profiles {:dev {:resource-paths [&quot;dummy-data&quot;]\n                   :dependencies [[expectations &quot;1.4.41&quot;]]}})\n\nUse the lein show-profiles task to list the project&#39;s profiles.\nUser profiles\nUser specific configuration\nCreate / edit the file profiles.clj in the root of the specific Clojure project (the same directory as project.clj)\nUse the lein show-profiles task to list the project&#39;s profiles.\nUser-wide profiles\nAdd  have common configuration you want in all your Clojure projects without having to modify the project.clj file each time.\nCreate / edit the file ~/.lein/profiles.clj\nTypical things are added to your profile include\n\ncommon development tools (lein-ancient, slamhound, etc)\nadditional directories on the classpath (ie. classes used during testing that are not in any jar file yet)\n\nDeclaring Profiles\nProfiles specified in ~/.lein/profiles.clj override profiles in a specific project configuration file, project.clj.\nOverride project configuration without having to change the project.clj file or adding those changes to version control.\nUser-wide profiles can also be specified in ~/.lein/profiles.clj. These will be available in all projects managed by Leiningen, though those profiles will be overridden by profiles of the same name specified in the project. System-wide profiles can be placed in /etc/leiningen/profiles.clj. They are treated the same as user profiles, but with lower precedence.\nYou can also define user-wide profiles within clj-files inside ~/.lein/profiles.d. The semantics within such files differ slightly from other profile files: rather than a map of maps, the profile map is the top-level within the file, and the name of the profile comes from the file itself (without the .clj part). Defining the same user-wide profile in both ~/.lein/profiles.clj and in ~/.lein/profiles.d is considered an error.\nDefault Profiles\nCertain profiles are active by default unless you specify another set of profiles using the with-profiles task. Each of the default profiles have different semantics:\nIf you want to access dependencies or plugins during development time for any project place them in your :user profile. Your ~/.lein/profiles.clj file could look something like this:\n{:user {:plugins [[lein-pprint &quot;1.1.1&quot;]]\n        :dependencies [[slamhound &quot;1.3.1&quot;]]}}\n\nThe :dev profile is used to specify project specific development tooling. Put things here if they are required for builds or tests, rather than just convenience tooling.\nThe :user profile is separate from :dev; the latter is intended to be specified in the project itself. In order to avoid collisions, the project should never define a :user profile, nor should a user-wide :dev profile be defined. Likewise, system profiles should use the :system profile, and define neither :user nor :dev profiles.\nThe :system profile is similar to :user, except it applies system-wide instead of merely to a single user.\nThe :base profile provides dependencies necessary for basic repl functionality, adds dev-resources to the :resources-path, and sets defaults for :jvm-opts, :checkout-deps-share and :test-selectors. It is part of Leiningen itself; you shouldn&#39;t need to change it.\nThe profiles listed above are active during development, but they are unmerged before the jar and pom files are created, making them invisible to code that depends upon your project.\nThe :provided profile is used to specify dependencies that should be available during jar creation, but not propagated to other code that depends on your project. These are dependencies that the project assumes will be provided by whatever environment the jar is used in, but are needed during the development of the project. This is often used for frameworks like Hadoop that provide their own copies of certain libraries.\nThe :default profile specifies the profiles that are active by default when running lein tasks. If not overridden, this is set to :leiningen/default, which is a composite profile with [:base :system :user :provided :dev].\nTask Specific Profiles\nSome tasks automatically merge a profile if specified. Examples of these are the :test profile, when running the test task, and the :repl profile, when running the repl task.\nProfile Metadata\nIf you mark your profile with ^:leaky metadata, then the profile will not be stripped out when the pom and jar files are created.\nIf you mark a profile with ^{:pom-scope :test} metadata, then the profile&#39;s :dependencies will be added with a test scope in the generated pom and jar when active. The :dev, :test, and :base profiles have this set automatically.\nIf you mark a profile with ^{:pom-scope :provided} metadata, then the profile&#39;s :dependencies will be added with a provided scope in the generated pom and jar when active. The :provided profile has this set automatically.\nMerging\nProfiles are merged by taking each key in the project map or profile map, combining the value if it&#39;s a collection and replacing it if it&#39;s not. Profiles specified later take precedence when replacing, just like the clojure.core/merge function. The dev profile takes precedence over user by default. Maps are merged recursively, sets are combined with clojure.set/union, and lists/vectors are concatenated. You can add hints via metadata that a given value should take precedence (:replace) or defer to values from a different profile (:displace) if you want to override this logic:\n{:profiles {:dev {:prep-tasks ^:replace [&quot;clean&quot; &quot;compile&quot;]\n                  :aliases ^:displace {&quot;launch&quot; &quot;run&quot;}}}}\n\nThe exception to this merge logic is that :plugins and :dependencies have custom de-duplication logic since they must be specified as vectors even though they behave like maps (because it only makes sense to have a single version of a given dependency present at once). The replace/displace metadata hints still apply though.\nRemember that if a profile with the same name is specified in multiple locations, only the profile with the highest &quot;priority&quot; is picked – no merging is done. The &quot;priority&quot; is – from highest to lowest – project.clj, profiles.clj, user-wide profiles, and finally system-wide profiles.\nIf you need to enable personal overrides of parts of a profile, you can use a composite profile with common and personal parts - something like :dev [:dev-common :dev-overrides]; you would then have just :dev-overrides {} in project.clj and override it in profiles.clj.\nAnother use of profiles is to test against various sets of dependencies:\n(defproject swank-clojure &quot;1.5.0-SNAPSHOT&quot;\n  :description &quot;Swank server connecting Clojure to Emacs SLIME&quot;\n  :dependencies [[org.clojure/clojure &quot;1.2.1&quot;]\n                 [clj-stacktrace &quot;0.2.4&quot;]\n                 [cdt &quot;1.2.6.2&quot;]]\n  :profiles {:1.3 {:dependencies [[org.clojure/clojure &quot;1.3.0&quot;]]}\n             :1.4 {:dependencies [[org.clojure/clojure &quot;1.4.0-beta1&quot;]]}})\n\nActivating Profiles\nTo activate a different set of profiles for a given task, use the with-profile higher-order task:\n$ lein with-profile 1.3 test :database\n\nMultiple profiles may be combined with commas:\n$ lein with-profile qa,user test :database\n\nMultiple profiles may be executed in series with colons:\n$ lein with-profile 1.3:1.4 test :database\n\nThe above invocations activate the given profiles in place of the defaults. To activate a profile in addition to the defaults, prepend it with a +:\n$ lein with-profile +server run\n\nYou can also use - to deactivate a profile.\nBy default all profiles will share the same :target-path, which can cause problems if settings from one profile leak over into another. It&#39;s recommended to set :target-path to &quot;target/%s&quot;, which will isolate each profile set and prevent anything from bleeding over.\nComposite Profiles\nSometimes it is useful to define a profile as a combination of other profiles. To do this, just use a vector instead of a map as the profile value. This can be used to avoid duplication:\n{:shared {:port 9229, :protocol &quot;https&quot;}\n :qa [:shared {:servers [&quot;qa.mycorp.com&quot;]}]\n :stage [:shared {:servers [&quot;stage.mycorp.com&quot;]}]\n :production [:shared {:servers [&quot;prod1.mycorp.com&quot;, &quot;prod1.mycorp.com&quot;]}]}\n\nDynamic Eval\nOften you want to read an environment variable or execute a function to capture a value to use in your profiles. In order to do such a thing with the profiles.clj you&#39;ll need to use the read-eval syntax.\nHere is an example of such a case:\n{:user {:compile-path  #=(eval (System/getenv &quot;ci.compile-path&quot;)),\n        :target-path #=(eval (System/getenv &quot;ci.target-path&quot;))}}\n\nDebugging\nTo see how a given profile affects your project map, use the lein-pprint plugin:\n$ lein with-profile 1.4 pprint\n{:compile-path &quot;/home/phil/src/leiningen/lein-pprint/classes&quot;,\n :group &quot;lein-pprint&quot;,\n :source-path (&quot;/home/phil/src/leiningen/lein-pprint/src&quot;),\n :dependencies\n ([org.clojure/tools.nrepl &quot;0.0.5&quot; :exclusions [org.clojure/clojure]]\n  [clojure-complete &quot;0.1.4&quot; :exclusions [org.clojure/clojure]]\n  [org.thnetos/cd-client &quot;0.3.3&quot; :exclusions [org.clojure/clojure]]),\n :target-path &quot;/home/phil/src/leiningen/lein-pprint/target&quot;,\n :name &quot;lein-pprint&quot;,\n [...]\n :description &quot;Pretty-print a representation of the project map.&quot;}\n\nIn order to prevent profile settings from being propagated to other projects that depend upon yours, the :default profiles are removed from your project when generating the pom, jar, and uberjar, and an :uberjar profile, if present, is included when creating uberjars. (This can be useful if you want to specify a :main namespace for uberjar use without triggering AOT during regular development.) Profiles activated through an explicit with-profile invocation will be preserved.\nProduction\nLeiningen 2.1.0 onward get a speed boost by disabling optimized compilation (which only benefits long-running processes). This can negatively affect performance in the long run, or lead to inaccurate benchmarking results. If want the JVM to fully optimize, you can you can switch profiles with lein with-profiles production run\n"},"leiningen/adding-a-dev-profile.html":{"url":"leiningen/adding-a-dev-profile.html","title":"Adding a dev profile","body":"Adding a dev profile\n"},"leiningen/templates.html":{"url":"leiningen/templates.html","title":"Templates","body":"Leiningen Templates\nLeiningen has several built in templates and there are many community templates published on Clojars.\nBuilt in templates\n\ndefault - use when no template is specified.  Useful for libraries.\napp - creating standalone applications\ncompojure\nluminus\n\n\nNote Search Clojars to see what additional templates are available:\nhttps://clojars.org/search?q=lein-template\n\n"},"leiningen/create-a-template.html":{"url":"leiningen/create-a-template.html","title":"Create a template","body":"Create a custom template\n\nfixme The following instructions currently reslut in a broken template, missing version, so this section is under investigation.\nNote Create a template that customises the REPL prompt that changes the welcome message you see when the REPL first starts, as well as changing the prompt to output a message followed by the current namespace\n\nCreate a new project as a base for the template\nCreate a new project with leiningen\nlein new app lein-app-custom-prompt\n\nEdit the project.clj file in the root of the new project and add the :repl-optionscustomisation.\n:repl-options {\n    prompt (fn [ns] (str &quot;You are hacking in &quot; ns &quot;=&gt; &quot; ))\n    :welcome (println &quot;Its  REPL time!&quot;)}\n\nWhen you run lein repl inside the project, the prompt should now look like:\n\nCreate a new template\nAdd the Leining plugin called lein-create-template to your user-wide profile by adding the following line to the file ~/.lein/profiles.clj\n{:user {:plugins [[lein-create-template &quot;0.1.1&quot;]]}}\n\nThe file should look similar to the following, depending on which other plugins are already added:\n\nInside the new project you created as a base for you template, run the command\nlein create-template hack-prompt\n\n\nlein install\n\n\nlein new hack-prompt my-new-project\n\n\n\nfixme something has gone wrong with the creation of the template, missing a version number.  Check the files created in the original project and in the ~/.m2 directory.  I wonder if it is because the original project had a snapshot for the version.\nHint I created further customisations to the prompt in the article add colour to your clojure repl\n\n"},"leiningen/plugins.html":{"url":"leiningen/plugins.html","title":"Plugins","body":"Leiningen Plugins\nTo do more with the Leiningen build automation tool you can install a wide range of plugins\nSome interesting plugins to look at include:\n\nlein-ancient - check your project for outdated dependencies\nlein-annotations - display TODO&#39;s and other notes added to your code\nlein-auto - automatically runs a task on file system change\nlein-checkall - runs lint &amp; other code checks\nlein-gitify - version your project with Git &amp; create a Github repo\nlein-speclj - speckle, a BDD/TDD testing framework\nlein-heroku-deploy - use maintenance mode whilst deploying to Heroku\n\nUsing plugins\nAdd to your Leiningen profile.  Edit the file ~/.lein/profiles.clj and add the names of plugins you wish to use as a Clojure vector\n\nComment Each plugin page should give an example of how to add that plugin to your Leiningen profile.\n\n"},"explaining-macros.html":{"url":"explaining-macros.html","title":"Explaining Macros","body":"Explaining Macros\n"},"work-in-progress.html":{"url":"work-in-progress.html","title":"Work in Progress","body":"Work in Progress\nuseful resources\nClojure examples - https://jr0cket@github.com/jr0cket/ClojureProgramming.git\nAbstraction through syntax\nSyntactical abstraction can vary between using functions to abstract away common operations and full fledged DSLs that allow us to express complex tasks with ease.\nUsing threading macros\nClassic lisp gives rise to syntax such as\n(:baz (:bar (:foo my-map)))\n\nUsing the thread first macro in Clojure you can make this much more readable\n(-&gt; my-map\n  (:foo)\n  (:bar)\n  (:baz))\n\nThreading macro converts nested code into sequential code\nMinimise nested statements\nIn this example there are several nested if statements, making the code hard to read and slower to interpret.\n(if :pred-1\n  :result-1\n  (if :pred-2\n    :result-2\n    (if :pred-3\n      :result-3\n      :result-4)))\n\nYou can simplify this by using the cond function instead\n(cond\n  :pred-1 :result-1\n  :pred-2 :result-2\n  :pred-3 :result-3\n  :else :result-4)\n\ncond executes its predicates in turn (:pred-1, :pred-2 ...) until one evaluates to something truthy, then it executes the corresponding result and returns it. Again this is exactly what the if version does, cond is a macro that turns the latter into former.\nRepeated forms\nCreating a local symbol with let and then using that symbol as an if predicate can be replaced by if-let macro:\n(let [data :data]\n  (if data\n    :data-is-bound\n    :no-data))\n(if-let [data :data]\n  :data-is-bound\n  :no-data)\nTo streamline the code even further, we can often use destructuring\n(let [list-items &#39;(3 4)\n      x (clojure.core/nth list-items 0 nil)\n      y (clojure.core/nth ?list 1 nil)]\n  (+ x y))\n(let [[x y] (list 3 4)]\n(+ x y))\nEdn\nedn is an extensible data notation. A superset of edn is used by Clojure to represent programs, and it is used by Datomic and other applications as a data transfer format. This spec describes edn in isolation from those and other specific use cases, to help facilitate implementation of readers and writers in other languages, and for other uses.\nClojure api 1.6 for edn\nhttps://github.com/edn-format/edn\nhttp://www.compoundtheory.com/clojure-edn-walkthrough/\nhttp://www.clojuresphere.com/\nhttp://blog.jenkster.com/2013/12/a-cider-excursion.html\nclojure emacs metaprogramming trick https://www.youtube.com/watch?v=LXhWW1Yqpt0\nhttp://eigenhombre.com/clojure/2014/07/05/emacs-customization-for-clojure/\nhttp://martintrojer.github.io/clojure/2014/10/02/clojure-and-emacs-without-cider/\nhttps://github.com/technomancy/mire\nhttps://github.com/cemerick/drawbridge\nhttps://github.com/technomancy?tab=repositories\nhttps://github.com/jr0cket/kensa-create-clojure\nhttp://christophermaier.name/blog/2011/07/07/writing-elegant-clojure-code-using-higher-order-functions\nhttps://github.com/jamesmacaulay/zelkova\nhttp://www.purelyfunctional.tv/core-async\nhttp://blog.cognitect.com/blog/2014/10/24/analysis-of-the-state-of-clojure-and-clojurescript-survey-2014\nclojure daily - http://paper.li/ajlopez/1291580164\nhttps://github.com/r0man/sablono\nhttps://github.com/swannodette/om/wiki\nhttps://github.com/magomimmo/om-start-template\nclojure at a bank http://www.pitheringabout.com/?p=693\nclojurescript any better http://rrees.me/2014/01/16/clojurescript-is-it-any-better-yet/\nhttps://medium.com/@hlship/clojure-owning-the-language-ec0196871c40\nhttp://cognitect.com/\nCharicteristics\n\nDynamic\ntyped - like Python, Ruby or Groovy\nbecause its a LISP - you can redefine running code\nREPL - a fast way to explore your problem domain with code\nFunctional programming\nin contrast to imperative programing\nimmutable data structures at its core, everything is immutable by default\nif any piece of data can be changed, that is mutable state\nin imperative programming, we change state where ever we like\nin functional programming we avoid changing state as much as possible\nif a function does not change state it is referentially transparent, always returning the same result when given the same input (arguments) - often returned as a pure function\nimpure functions can affect other functions and therefore has to be very mindful of the changes it makes and when it makes them\npure functions are truely modular as they do not affect any other part of the system\n  ** Changing state\nrather than changing a data structure, fp instead creates a new data structure that contains the changes and copies of the existing data.\nto manage the potential overhead of copying data structures, Clojure uses Persistent collections (Lists, Vectors, Maps) which are immutable but provide an efficient way to mutate by sharing common elements (data) \n  ** Input &amp; output with functional programming\nother fp languages like haskel &amp; Scala use monads to encapsulate data changes whilst appearing stateless to the rest of the program - monads allow us to sneak in impure code into the context of pure code.\nClojure doesnt try and enforce functional purity, so any function can include impure code\nmost functoins should be pure though or you loose the benefits of functional programming\nClojure encourages minimal state changes / mutable state - so its up to the developer to keep the ratio of mutalble data small\nClojure uses reference types to manage threads and mutable state.  References provide syncronisation of threads without using locks (notoriusly cumbersome).  See STM\nHosted on the Java Virtual Machine\nwriten for the JVM &amp; heavily integrated, giving beautiful integratoin\nClojure is compiled to Java byte code\nmany parts of the Clojure standard library, Clojure.core defer to the Java Standard library, for example for I/O (reading,writing files)\nClojure makes invoking Java very convieninet and provides special primative constructs in the Clojure language to do so (new .javaMethodName javaClassName. etc)\nSupporting concurrency\natoms etc\nautomatic management of state changes via Software transactional memory - like having an ACID database in memory, managing requests to change values over time.\nby having immutable data structures - if your values do not change then its trivial to have massive parallelism.\nA modern LISP\nleaner syntax and not as many brackets as LISP\nclean data structure syntax at the core of the language\nLiSP was the first language to introduce first class functions, garbage collection and dynamic typing, which are common in languages used today\n\nMacros\n\na function that takes in source code and returns source code, replacing the macro code\nuse macros to take out repetition / boilerplate code\nas LISP syntax is extremely simple it is much easier to write macros that work compared to non-LISP languages\n\n\nfixme assuming you need more, I&#39;ll add to this page, but Clojure is a very powerful language, incredibly flexible and tonnes of fun.  What more do you need ?\nfixme concepts to explore\n\nClojure emphasizes safety in its type system and approach to parallelism, making it easier to write correct multithreaded programs.\nClojure is very concise, requiring very little code to express complex operations.\nData centric design - a well constructed data structure helps define and clarify the purpose of the code\nModularity - Clojure and its community build things in modules / components that work together (in a similar design approach to the Unix file system, for example).\nIt offers a REPL and dynamic type system: ideal for beginners to experiment with, and well-suited for manipulating complex data structures.\nA consistently designed standard library and full-featured set of core datatypes rounds out the Clojure toolbox.\nClojure is close to the speed of Java\nConstraints\nClojure relies on the JVM so there can be a longer boot time than a scripting language like Javascript.  However, as you can connect to the Clojure runtime (the REPL) of a live system and because Clojure is dynamic, you can make changes to that live system without any downtime.\nIf you require more performance from Clojure, you can specify ahead of time compilation.\n"},"where-next.html":{"url":"where-next.html","title":"Where next","body":"Where next\nWorkshop\n\nGetting started with Clojure\nClojure through code - sample code to evaluate in LightTable\nLighttable Koans - exercises to help you discover Clojure\nBrave Clojure\nClojureBridge curiculum\nClojure webapp sample - hello world with Compojure\nGetting started with Clojure on Heroku\n\nClojure\n\nClojure.org, features and rational\nClojure documentation\nClojure cheetsheet\nOfficial Google group\nCrossClj - cross-referencing the Clojure ecosystem\n\nTooling\n\nLeiningen, tutorial, faq, plugins list &amp; sample project file\nLightTable, docs, blog, announcements and discussions.\nEmacs Live discussion group\nGorilla REPL - browser based REPL &amp; tool for creating documents with live running Clojure code\n\nCommunity\n\nClojure-docs - community docs\nCrossCLJ - cross-referencing the Clojure ecosystem\n4Clojure exercises &amp; 4Clojure Google group\nLondon Clojurians and their Google group\nUncle Bob presents Clojure\n\nBooks &amp; Tutorials\n\nClojure cookbook\n\nMusic\n\nOvertone - toolkit for designing synthesizers and collaborating with music\nMeta-x/ignite - live performance music &amp; graphics\n\n"},"reference/":{"url":"reference/","title":"Reference","body":"Reference\n"},"reference/basic-syntax.html":{"url":"reference/basic-syntax.html","title":"Basic Syntax","body":"Reference: Basic Syntax\nNotes from Aphyr\nLet’s write a simple program. The simplest, in fact. Type “nil”, and hit enter.\nuser=&gt; nil\nnil\nnil is the most basic value in Clojure. It represents emptiness, nothing-doing, not-a-thing. The absence of information.\nuser=&gt; true\ntrue\nuser=&gt; false\nfalse\ntrue and false are a pair of special values called Booleans. They mean exactly what you think: whether a statement is true or false. true, false, and nil form the three poles of the Lisp logical system.\nuser=&gt; 0\n0\nThis is the number zero. Its numeric friends are 1, -47, 1.2e-4, 1/3, and so on. We might also talk about strings, which are chunks of text surrounded by double quotes:\nuser=&gt; &quot;hi there!&quot;\n&quot;hi there!&quot;\nnil, true, 0, and &quot;hi there!&quot; are all different types of values; the nouns of programming. Just as one could say “House.” in English, we can write a program like &quot;hello, world&quot; and it evaluates to itself: the string &quot;hello world&quot;. But most sentences aren’t just about stating the existence of a thing; they involve action. We need verbs.\nuser=&gt; inc\n\nThis is a verb called inc–short for “increment”. Specifically, inc is a symbol which points to a verb: #– just like the word “run” is a name for the concept of running.\nThere’s a key distinction here–that a signifier, a reference, a label, is not the same as the signified, the referent, the concept itself. If you write the word “run” on paper, the ink means nothing by itself. It’s just a symbol. But in the mind of a reader, that symbol takes on meaning; the idea of running.\nUnlike the number 0, or the string “hi”, symbols are references to other values. when Clojure evaluates a symbol, it looks up that symbol’s meaning. Look up inc, and you get #.\nCan we refer to the symbol itself, without looking up its meaning?\nuser=&gt; &#39;inc\ninc\nYes. The single quote &#39; escapes a sentence. In programming languages, we call sentences expressions or statements. A quote says “Rather than evaluating this expression’s text, simply return the text itself, unchanged.” Quote a symbol, get a symbol. Quote a number, get a number. Quote anything, and get it back exactly as it came in.\nuser=&gt; &#39;123\n123\nuser=&gt; &#39;&quot;foo&quot;\n&quot;foo&quot;\nuser=&gt; &#39;(1 2 3)\n(1 2 3)\nA new kind of value, surrounded by parentheses: the list. LISP originally stood for LISt Processing, and lists are still at the core of the language. In fact, they form the most basic way to compose expressions, or sentences. A list is a single expression which has multiple parts. For instance, this list contains three elements: the numbers 1, 2, and 3. Lists can contain anything: numbers, strings, even other lists:\nuser=&gt; &#39;(nil &quot;hi&quot;)\n(nil &quot;hi&quot;)\nA list containing two elements: the number 1, and a second list. That list contains two elements: the number 2, and another list. That list contains two elements: 3, and an empty list.\nuser=&gt; &#39;(1 (2 (3 ())))\n(1 (2 (3 ())))\nYou could think of this structure as a tree–which is a provocative idea, because languages are like trees too: sentences are comprised of clauses, which can be nested, and each clause may have subjects modified by adjectives, and verbs modified by adverbs, and so on. “Lindsay, my best friend, took the dog which we found together at the pound on fourth street, for a walk with her mother Michelle.”\nTook\n  Lindsay\n    my best friend\n  the dog\n    which we found together\n      at the pound\n        on fourth street\n    for a walk\n      with her mother\n        Michelle\nBut let’s try something simpler. Something we know how to talk about. “Increment the number zero.” As a tree:\nIncrement\n  the number zero\nWe have a symbol for incrementing, and we know how to write the number zero. Let’s combine them in a list:\nclj=&gt; &#39;(inc 0)\n(inc 0)\nA basic sentence. Remember, since it’s quoted, we’re talking about the tree, the text, the expression, by itself. Absent interpretation. If we remove the single-quote, Clojure will interpret the expression:\nuser=&gt; (inc 0)\n1\nIncrementing zero yields one. And if we wanted to increment that value?\nIncrement\n  increment\n    the number zero\nuser=&gt; (inc (inc 0))\n2\nA sentence in Lisp is a list. It starts with a verb, and is followed by zero or more objects for that verb to act on. Each part of the list can itself be another list, in which case that nested list is evaluated first, just like a nested clause in a sentence. When we type\n(inc (inc 0))\nClojure first looks up the meanings for the symbols in the code:\n(#\n  (#\n    0))\nThen evaluates the innermost list (inc 0), which becomes the number 1:\n(#\n 1)\nFinally, it evaluates the outer list, incrementing the number 1:\n2\nEvery list starts with a verb. Parts of a list are evaluated from left to right. Innermost lists are evaluated before outer lists.\n(+ 1 (- 5 2) (+ 3 4))\n(+ 1 3       (+ 3 4))\n(+ 1 3       7)\n11\nThat’s it.\nThe entire grammar of Lisp: the structure for every expression in the language. We transform expressions by substituting meanings for symbols, and obtain some result. This is the core of the Lambda Calculus, and it is the theoretical basis for almost all computer languages. Ruby, Javascript, C, Haskell; all languages express the text of their programs in different ways, but internally all construct a tree of expressions. Lisp simply makes it explicit.\n"},"reference/naming.html":{"url":"reference/naming.html","title":"Naming","body":"Naming\n"},"reference/naming-conventions.html":{"url":"reference/naming-conventions.html","title":"Naming Conventions","body":"Naming Conventions\nKebab-case\nKebab-case is the naming convention for all Clojure function names than contain more than one word\nExamples\nclj-time\nstring-parser\ndisplay-name\n\nPredicates\nExamples of predicate naming conventions from clojure.core\ncontains?\nempty?\nevery?\nnot-empty?\nnull?\n\nConverting functions\nWhen a function takes values in one format or type and converts them to another\nExamples\nmd-&gt;html\n\nmap-&gt;Record-name  ; map factory function of a record -- creates a new record from a map\n-&gt;Record-name     ; positional factory function of a record -- creates a new record from a list of values\n\n"},"reference/functions.html":{"url":"reference/functions.html","title":"Functions","body":"Reference: Functions\nWe left off last chapter with a question: what are verbs, anyway? When you evaluate (type :mary-poppins), what really happens?\nuser=&gt; (type :mary-poppins)\nclojure.lang.Keyword\nTo understand how type works, we’ll need several new ideas. First, we’ll expand on the notion of symbols as references to other values. Then we’ll learn about functions: Clojure’s verbs. Finally, we’ll use the Var system to explore and change the definitions of those functions.\nLet bindings\nWe know that symbols are names for things, and that when evaluated, Clojure replaces those symbols with their corresponding values. +, for instance, is a symbol which points to the verb #.\nuser=&gt; +\n\nWhen you try to use a symbol which has no defined meaning, Clojure refuses:\nuser=&gt; cats\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: cats in this context, compiling:(NO_SOURCE_PATH:0:0)\nBut we can define a meaning for a symbol within a specific expression, using let.\nuser=&gt; (let [cats 5] (str &quot;I have &quot; cats &quot; cats.&quot;))\n&quot;I have 5 cats.&quot;\nThe let expression first takes a vector of bindings: alternating symbols and values that those symbols are bound to, within the remainder of the expression. “Let the symbol cats be 5, and construct a string composed of &quot;I have &quot;, cats, and &quot; cats&quot;.\nLet bindings apply only within the let expression itself. They also override any existing definitions for symbols at that point in the program. For instance, we can redefine addition to mean subtraction, for the duration of a let:\nuser=&gt; (let [+ -] (+ 2 3))\n-1\nBut that definition doesn’t apply outside the let:\nuser=&gt; (+ 2 3)\n5\nWe can also provide multiple bindings. Since Clojure doesn’t care about spacing, alignment, or newlines, I’ll write this on multiple lines for clarity.\nuser=&gt; (let [person   &quot;joseph&quot;\n             num-cats 186]\n         (str person &quot; has &quot; num-cats &quot; cats!&quot;))\n&quot;joseph has 186 cats!&quot;\nWhen multiple bindings are given, they are evaluated in order. Later bindings can use previous bindings.\nuser=&gt; (let [cats 3\n             legs (* 4 cats)]\n         (str legs &quot; legs all together&quot;))\n&quot;12 legs all together&quot;\nSo fundamentally, let defines the meaning of symbols within an expression. When Clojure evaluates a let, it replaces all occurrences of those symbols in the rest of the let expression with their corresponding values, then evaluates the rest of the expression.\nFunctions\nWe saw in chapter one that Clojure evaluates lists by substituting some other value in their place:\nuser=&gt; (inc 1)\n2\ninc takes any number, and is replaced by that number plus one. That sounds an awful lot like a let:\nuser=&gt; (let [x 1] (+ x 1))\n2\nIf we bound x to 5 instead of 1, this expression would evaluate to 6. We can think about inc like a let expression, but without particular values provided for the symbols.\n(let [x] (+ x 1))\nWe can’t actually evaluate this program, because there’s no value for x yet. It could be 1, or 4, or 1453. We say that x is unbound, because it has no binding to a particular value. This is the nature of the function: an expression with unbound symbols.\nuser=&gt; (fn [x] (+ x 1))\n\nDoes the name of that function remind you of anything?\nuser=&gt; inc\n\nAlmost all verbs in Clojure are functions. Functions represent unrealized computation: expressions which are not yet evaluated, or incomplete. This particular function works just like inc: it’s an expression which has a single unbound symbol, x. When we invoke the function with a particular value, the expressions in the function are evaluated with x bound to that value.\nuser=&gt; (inc 2)\n3\nuser=&gt; ((fn [x] (+ x 1)) 2)\n3\nWe say that x is this functions argument, or parameter. When Clojure evaluates (inc 2), we say that inc is called with 2, or that 2 is passed to inc. The result of that function invocation is the function’s return value. We say that (inc 2) returns 3.\nFundamentally, functions describe the relationship between arguments and return values: given 1, return 2. Given 2, return 3, and so on. Let bindings describe a similar relationship, but with a specific set of values for those arguments. let is evaluated immediately, whereas fn is evaluated later, when bindings are provided.\nThere’s a shorthand for writing functions, too: #(+ % 1) is equivalent to (fn [x] (+ x 1)). % takes the place of the first argument to the function. You’ll sometime see %1, %2, etc. used for the first argument, second argument, and so on.\nuser=&gt; (let [burrito #(list &quot;beans&quot; % &quot;cheese&quot;)]\n         (burrito &quot;carnitas&quot;))\n(&quot;beans&quot; &quot;carnitas&quot; &quot;cheese&quot;)\nSince functions exist to defer evaluation, there’s no sense in creating and invoking them in the same expression as we’ve done here. What we want is to give names to our functions, so they can be recombined in different ways.\nuser=&gt; (let [twice (fn [x] (* 2 x))]\n         (+ (twice 1)\n            (twice 3)))\n8\nCompare that expression to an equivalent, expanded form:\nuser=&gt; (+ ( 2 1)\n          ( 2 3))\nThe name twice is gone, and in its place is the same sort of computation–(* 2 something)–written twice. While we could represent our programs as a single massive expression, it’d be impossible to reason about. Instead, we use functions to compact redundant expressions, by isolating common patterns of computation. Symbols help us re-use those functions (and other values) in more than one place. By giving the symbols meaningful names, we make it easier to reason about the structure of the program as a whole; breaking it up into smaller, understandable parts.\nThis is core pursuit of software engineering: organizing expressions. Almost every programming language is in search of the right tools to break apart, name, and recombine expressions to solve large problems. In Clojure we’ll see one particular set of tools for composing programs, but the underlying ideas will transfer to many other languages.\nVars\nWe’ve used let to define a symbol within an expression, but what about the default meanings of +, conj, and type? Are they also let bindings? Is the whole universe one giant let?\nWell, not exactly. That’s one way to think about default bindings, but it’s brittle. We’d need to wrap our whole program in a new let expression every time we wanted to change the meaning of a symbol. And moreover, once a let is defined, there’s no way to change it. If we want to redefine symbols for everyone–even code that we didn’t write–we need a new construct: a mutable variable.\nuser=&gt; (def cats 5)\n&#39;user/cats\nuser=&gt; (type #&#39;user/cats)\nclojure.lang.Var\ndef defines a type of value we haven’t seen before: a var. Vars, like symbols, are references to other values. When evaluated, a symbol pointing to a var is replaced by the var’s corresponding value:\nuser=&gt; user/cats\n5\ndef also binds the symbol cats (and its globally qualified equivalent user/cats) to that var.\nuser=&gt; user/cats\n5\nuser=&gt; cats\n5\nWhen we said in chapter one that inc, list, and friends were symbols that pointed to functions, that wasn’t the whole story. The symbol inc points to the var #&#39;inc, which in turn points to the function #. We can see the intermediate var with resolve:\nuser=&gt; &#39;inc\ninc ; the symbol\nuser=&gt; (resolve &#39;inc)\n&#39;clojure.core/inc ; the var\nuser=&gt; (eval &#39;inc)\n ; the value\nWhy two layers of indirection? Because unlike the symbol, we can change the meaning of a Var for everyone, globally, at any time.\nuser=&gt; (def astronauts [])\n&#39;user/astronauts\nuser=&gt; (count astronauts)\n0\nuser=&gt; (def astronauts [&quot;Sally Ride&quot; &quot;Guy Bluford&quot;])\n&#39;user/astronauts\nuser=&gt; (count astronauts)\n2\nNotice that astronauts had two distinct meanings, depending on when we evaluated it. After the first def, astronauts was an empty vector. After the second def, it had one entry.\nIf this seems dangerous, you’re a smart cookie. Redefining names in this way changes the meaning of expressions everywhere in a program, without warning. Expressions which relied on the value of a Var could suddenly take on new, possibly incorrect, meanings. It’s a powerful tool for experimenting at the REPL, and for updating a running program, but it can have unexpected consequences. Good Clojurists use def to set up a program initially, and only change those definitions with careful thought.\nTotally redefining a Var isn’t the only option. There are safer, controlled ways to change the meaning of a Var within a particular part of a program, which we’ll explore later.\nDefining functions\nArmed with def, we’re ready to create our own named functions in Clojure.\nuser=&gt; (def half (fn [number] (/ number 2)))\n&#39;user/half\nuser=&gt; (half 6)\n3\nCreating a function and binding it to a var is so common that it has its own form: defn, short for def fn.\nuser=&gt; (defn half [number] (/ number 2))\n&#39;user/half\nFunctions don’t have to take an argument. We’ve seen functions which take zero arguments, like (+).\nuser=&gt; (defn half [] 1/2)\n&#39;user/half\nuser=&gt; (half)\n1/2\nBut if we try to use our earlier form with one argument, Clojure complains that the arity–the number of arguments to the function–is incorrect.\nuser=&gt; (half 10)\nArityException Wrong number of args (1) passed to: user$half  clojure.lang.AFn.throwArity (AFn.java:437)\nTo handle multiple arities, functions have an alternate form. Instead of an argument vector and a body, one provides a series of lists, each of which starts with an argument vector, followed by the body.\nuser=&gt; (defn half\n         ([]  1/2)\n         ([x] (/ x 2)))\nuser=&gt; (half)\n1/2\nuser=&gt; (half 10)\n5\nMultiple arguments work just like you expect. Just specify an argument vector of two, or three, or however many arguments the function takes.\nuser=&gt; (defn add\n         [x y]\n         (+ x y))\n&#39;user/add\nuser=&gt; (add 1 2)\n3\nSome functions can take any number of arguments. For that, Clojure provides &amp;, which slurps up all remaining arguments as a list:\nuser=&gt; (defn vargs\n         [x y &amp; more-args]\n         {:x    x\n          :y    y\n          :more more-args})\n&#39;user/vargs\nuser=&gt; (vargs 1)\nArityException Wrong number of args (1) passed to: user$vargs  clojure.lang.AFn.throwArity (AFn.java:437)\nuser=&gt; (vargs 1 2)\n{:x 1, :y 2, :more nil}\nuser=&gt; (vargs 1 2 3 4 5)\n{:x 1, :y 2, :more (3 4 5)}\nNote that x and y are mandatory, though there don’t have to be any remaining arguments.\nTo keep track of what arguments a function takes, why the function exists, and what it does, we usually include a docstring. Docstrings help fill in the missing context around functions, to explain their assumptions, context, and purpose to the world.\n(defn launch\n  &quot;Launches a spacecraft into the given orbit by initiating a\n   controlled on-axis burn. Does not automatically stage, but\n   does vector thrust, if the craft supports it.&quot;\n  [craft target-orbit]\n  &quot;OK, we don&#39;t know how to control spacecraft yet.&quot;)\nDocstrings are used to automatically generate documentation for Clojure programs, but you can also access them from the REPL.\nuser=&gt; (doc launch)\nuser/launch\n([craft target-orbit])\n   Launches a spacecraft into the given orbit by initiating a\n   controlled on-axis burn. Does not automatically stage, but\n   does vector thrust, if the craft supports it.\nnil\ndoc tells us the full name of the function, the arguments it accepts, and its docstring. This information comes from the #&#39;launch var’s metadata, and is saved there by defn. We can inspect metadata directly with the meta function:\n(meta #&#39;launch)\n{:arglists ([craft target-orbit]), :ns #, :name launch!, :column 1, :doc &quot;Launches a spacecraft into the given orbit.&quot;, :line 1, :file &quot;NO_SOURCE_PATH&quot;}\nThere’s some other juicy information in there, like the file the function was defined in and which line and column it started at, but that’s not particularly useful since we’re in the REPL, not a file. However, this does hint at a way to answer our motivating question: how does the type function work?\nHow does type work?\nWe know that type returns the type of an object:\nuser=&gt; (type 2)\njava.lang.long\nAnd that type, like all functions, is a kind of object with its own unique type:\nuser=&gt; type\n\nuser=&gt; (type type)\nclojure.core$type\nThis tells us that type is a particular instance, at memory address 39bda9b9, of the type clojure.core$type. clojure.core is a namespace which defines the fundamentals of the Clojure language, and $type tells us that it’s named type in that namespace. None of this is particularly helpful, though. Maybe we can find out more about the clojure.core$type by asking what its supertypes are:\nuser=&gt; (supers (type type))\n{clojure.lang.AFunction clojure.lang.IMeta java.util.concurrent.Callable clojure.lang.Fn clojure.lang.AFn java.util.Comparator java.lang.Object clojure.lang.RestFn clojure.lang.IObj java.lang.Runnable java.io.Serializable clojure.lang.IFn}\nThis is a set of all the types that include type. We say that type is an instance of clojure.lang.AFunction, or that it implements or extends java.util.concurrent.Callable, and so on. Since it’s a member of clojure.lang.IMeta it has metadata, and since it’s a member of clojure.lang.AFn, it’s a function. Just to double check, let’s confirm that type is indeed a function:\nuser=&gt; (fn? type)\ntrue\nWhat about its documentation?\nuser=&gt; (doc type)\nclojure.core/type\n([x])\n  Returns the :type metadata of x, or its Class if none\nnil\nAh, that’s helpful. type can take a single argument, which it calls x. If it has :type metadata, that’s what it returns. Otherwise, it returns the class of x. Let’s take a deeper look at type’s metadata for more clues.\nuser=&gt; (meta #&#39;type)\n{:ns #, :name type, :arglists ([x]), :column 1, :added &quot;1.0&quot;, :static true, :doc &quot;Returns the :type metadata of x, or its Class if none&quot;, :line 3109, :file &quot;clojure/core.clj&quot;}\nLook at that! This function was first added to Clojure in version 1.0, and is defined in the file clojure/core.clj, on line 3109. We could go dig up the Clojure source code and read its definition there–or we could ask Clojure to do it for us:\nuser=&gt; (source type)\n(defn type \n  &quot;Returns the :type metadata of x, or its Class if none&quot;\n  {:added &quot;1.0&quot;\n   :static true}\n  [x]\n  (or (get (meta x) :type) (class x)))\nnil\nAha! Here, at last, is how type works. It’s a function which takes a single argument x, and returns either :type from its metadata, or (class x).\nWe can delve into any function in Clojure using these tools:\nuser=&gt; (source +)\n(defn +\n  &quot;Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +&#39;&quot;\n  {:inline (nary-inline &#39;add &#39;unchecked_add)\n   :inline-arities &gt;1?\n   :added &quot;1.2&quot;}\n  ([] 0)\n  ([x] (cast Number x))\n  ([x y] (. clojure.lang.Numbers (add x y)))\n  ([x y &amp; more]\n     (reduce1 + (+ x y) more)))\nnil\nAlmost every function in a programming language is made up of other, simpler functions. +, for instance, is defined in terms of cast, add, and reduce1. Sometimes functions are defined in terms of themselves. + uses itself twice in this definition; a technique called recursion.\nAt the bottom, though, are certain fundamental constructs below which you can go no further. Core axioms of the language. Lisp calls these &quot;special forms”. def and let are special forms (well–almost: let is a thin wrapper around let*, which is a special form) in Clojure. These forms are defined by the core implementation of the language, and are not reducible to other Clojure expressions.\nuser=&gt; (source def)\nSource not found\nSome Lisps are written entirely in terms of a few special forms, but Clojure is much less pure. Many functions bottom out in Java functions and types, or, for CLJS, in terms of Javascript. Any time you see an expression like (. clojure.lang.Numbers (add x y)), there’s Java code underneath. Below Java lies the JVM, which might be written in C or C++, depending on which one you use. And underneath C and C++ lie more libraries, the operating system, assembler, microcode, registers, and ultimately, electrons flowing through silicon.\nA well-designed language isolates you from details you don’t need to worry about, like which logic gates or registers to use, and lets you focus on the task at hand. Good languages also need to allow escape hatches for performance or access to dangerous functionality, as we saw with Vars. You can write entire programs entirely in terms of Clojure, but sometimes, for performance or to use tools from other languages, you’ll rely on Java. The Clojure code is easy to explore with doc and source, but Java can be more opaque–I usually rely on the java source files and online documentation.\nReview\nWe’ve seen how let associates names with values in a particular expression, and how Vars allow for mutable bindings which apply universally. and whose definitions can change over time. We learned that Clojure verbs are functions, which express the general shape of an expression but with certain values unbound. Invoking a function binds those variables to specific values, allowing evaluation of the function to proceed.\nFunctions decompose programs into simpler pieces, expressed in terms of one another. Short, meaningful names help us understand what those functions (and other values) mean.\nFinally, we learned how to introspect Clojure functions with doc and source, and saw the definition of some basic Clojure functions. The Clojure cheatsheet gives a comprehensive list of the core functions in the language, and is a great starting point when you have to solve a problem but don’t know what functions to use.\nWe’ll see a broad swath of those functions in Chapter 4: Sequences.\n"},"reference/sequences.html":{"url":"reference/sequences.html","title":"Sequences","body":"Reference: Clojure from the ground up: sequences\nIn Chapter 3, we discovered functions as a way to abstract expressions; to rephrase a particular computation with some parts missing. We used functions to transform a single value. But what if we want to apply a function to more than one value at once? What about sequences?\nFor example, we know that (inc 2) increments the number 2. What if we wanted to increment every number in the vector [1 2 3], producing [2 3 4]?\nuser=&gt; (inc [1 2 3])\nClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.Number  clojure.lang.Numbers.inc (Numbers.java:110)\nClearly inc can only work on numbers, not on vectors. We need a different kind of tool.\nA direct approach\nLet’s think about the problem in concrete terms. We want to increment each of three elements: the first, second, and third. We know how to get an element from a sequence by using nth, so let’s start with the first number, at index 0:\nuser=&gt; (def numbers [1 2 3])\n&#39;user/numbers\nuser=&gt; (nth numbers 0)\n1\nuser=&gt; (inc (nth numbers 0))\n2\nSo there’s the first element incremented. Now we can do the second:\nuser=&gt; (inc (nth numbers 1))\n3\nuser=&gt; (inc (nth numbers 2))\n4\nAnd it should be straightforward to combine these into a vector…\nuser=&gt; [(inc (nth numbers 0)) (inc (nth numbers 1)) (inc (nth numbers 2))]\n[2 3 4]\nSuccess! We’ve incremented each of the numbers in the list! How about a list with only two elements?\nuser=&gt; (def numbers [1 2])\n&#39;user/numbers\nuser=&gt; [(inc (nth numbers 0)) (inc (nth numbers 1)) (inc (nth numbers 2))]\nIndexOutOfBoundsException   clojure.lang.PersistentVector.arrayFor (PersistentVector.java:107)\nShoot. We tried to get the element at index 2, but couldn’t, because numbers only has indices 0 and 1. Clojure calls that “index out of bounds”.\nWe could just leave off the third expression in the vector; taking only elements 0 and 1. But the problem actually gets much worse, because we’d need to make this change every time we wanted to use a different sized vector. And what of a vector with 1000 elements? We’d need 1000 (inc (nth numbers ...)) expressions! Down this path lies madness.\nLet’s back up a bit, and try a slightly smaller problem.\nRecursion\nWhat if we just incremented the first number in the vector? How would that work? We know that first finds the first element in a sequence, and rest finds all the remaining ones.\nuser=&gt; (first [1 2 3])\n1\nuser=&gt; (rest [1 2 3])\n(2 3)\nSo there’s the pieces we’d need. To glue them back together, we can use a function called cons, which says “make a list beginning with the first argument, followed by all the elements in the second argument”.\nuser=&gt; (cons 1 [2])\n(1 2)\nuser=&gt; (cons 1 [2 3])\n(1 2 3)\nuser=&gt; (cons 1 [2 3 4])\n(1 2 3 4)\nOK so we can split up a sequence, increment the first part, and join them back together. Not so hard, right?\n(defn inc-first [nums]\n  (cons (inc (first nums))\n        (rest nums)))\nuser=&gt; (inc-first [1 2 3 4])\n(2 2 3 4)\nHey, there we go! First element changed. Will it work with any length list?\nuser=&gt; (inc-first [5])\n(6)\nuser=&gt; (inc-first [])\nNullPointerException   clojure.lang.Numbers.ops (Numbers.java:942)\nShoot. We can’t increment the first element of this empty vector, because it doesn’t have a first element.\nuser=&gt; (first [])\nnil\nuser=&gt; (inc nil)\nNullPointerException   clojure.lang.Numbers.ops (Numbers.java:942)\nSo there are really two cases for this function. If there is a first element in nums, we’ll increment it as normal. If there’s no such element, we’ll return an empty list. To express this kind of conditional behavior, we’ll use a Clojure special form called if:\nuser=&gt; (doc if)\nif\n  (if test then else?)\nSpecial Form\n  Evaluates test. If not the singular values nil or false,\n  evaluates and yields then, otherwise, evaluates and yields else. If\n  else is not supplied it defaults to nil.\nPlease see http://clojure.org/special_forms#if\nTo confirm our intuition:\nuser=&gt; (if true :a :b)\n:a\nuser=&gt; (if false :a :b)\n:b\nSeems straightforward enough.\n(defn inc-first [nums]\n  (if (first nums)\n    ; If there&#39;s a first number, build a new list with cons\n    (cons (inc (first nums))\n          (rest nums))\n    ; If there&#39;s no first number, just return an empty list\n    (list)))\nuser=&gt; (inc-first [])\n()\nuser=&gt; (inc-first [1 2 3])\n(2 2 3)\nSuccess! Now we can handle both cases: empty sequences, and sequences with things in them. Now how about incrementing that second number? Let’s stare at that code for a bit.\n(rest nums)\nHang on. That list–(rest nums)–that’s a list of numbers too. What if we… used our inc-first function on that list, to increment its first number? Then we’d have incremented both the first and the second element.\n(defn inc-more [nums]\n  (if (first nums)\n    (cons (inc (first nums))\n          (inc-more (rest nums)))\n    (list)))\nuser=&gt; (inc-more [1 2 3 4])\n(2 3 4 5)\nOdd. That didn’t just increment the first two numbers. It incremented all the numbers. We fell into the complete solution entirely by accident. What happened here?\nWell first we… yes, we got the number one, and incremented it. Then we stuck that onto (inc-first [2 3 4]), which got two, and incremented it. Then we stuck that two onto (inc-first [3 4]), which got three, and then we did the same for four. Only that time around, at the very end of the list, (rest [4]) would have been empty. So when we went to get the first number of the empty list, we took the second branch of the if, and returned the empty list.\nHaving reached the bottom of the function calls, so to speak, we zip back up the chain. We can imagine this function turning into a long string of cons calls, like so:\n(cons 2 (cons 3 (cons 4 (cons 5 &#39;()))))\n(cons 2 (cons 3 (cons 4 &#39;(5))))\n(cons 2 (cons 3 &#39;(4 5)))\n(cons 2 &#39;(3 4 5))\n&#39;(2 3 4 5)\nThis technique is called recursion, and it is a fundamental principle in working with collections, sequences, trees, or graphs… any problem which has small parts linked together. There are two key elements in a recursive program:\nSome part of the problem which has a known solution\nA relationship which connects one part of the problem to the next\nIncrementing the elements of an empty list returns the empty list. This is our base case: the ground to build on. Our inductive case, also called the recurrence relation, is how we broke the problem up into incrementing the first number in the sequence, and incrementing all the numbers in the rest of the sequence. The if expression bound these two cases together into a single function; a function defined in terms of itself.\nOnce the initial step has been taken, every step can be taken.\nuser=&gt; (inc-more [1 2 3 4 5 6 7 8 9 10 11 12])\n(2 3 4 5 6 7 8 9 10 11 12 13)\nThis is the beauty of a recursive function; folding an unbounded stream of computation over and over, onto itself, until only a single step remains.\nGeneralizing from inc\nWe set out to increment every number in a vector, but nothing in our solution actually depended on inc. It just as well could have been dec, or str, or keyword. Let’s parameterize our inc-more function to use any transformation of its elements:\n(defn transform-all [f xs]\n  (if (first xs)\n    (cons (f (first xs))\n          (transform-all f (rest xs)))\n    (list)))\nBecause we could be talking about any kind of sequence, not just numbers, we’ve named the sequence xs, and its first element x. We also take a function f as an argument, and that function will be applied to each x in turn. So not only can we increment numbers…\nuser=&gt; (transform-all inc [1 2 3 4])\n(2 3 4 5)\n…but we can turn strings to keywords…\nuser=&gt; (transform-all keyword [&quot;bell&quot; &quot;hooks&quot;])\n(:bell :hooks)\n…or wrap every element in a list:\nuser=&gt; (transform-all list [:codex :book :manuscript])\n((:codex) (:book) (:manuscript))\nIn short, this function expresses a sequence in which each element is some function applied to the corresponding element in the underlying sequence. This idea is so important that it has its own name, in mathematics, Clojure, and other languages. We call it map.\nuser=&gt; (map inc [1 2 3 4])\n(2 3 4 5)\nYou might remember maps as a datatype in Clojure, too–they’re dictionaries that relate keys to values.\n{:year  1969\n :event &quot;moon landing&quot;}\nThe function map relates one sequence to another. The type map relates keys to values. There is a deep symmetry between the two: maps are usually sparse, and the relationships between keys and values may be arbitrarily complex. The map function, on the other hand, usually expresses the same type of relationship, applied to a series of elements in fixed order.\nBuilding sequences\nRecursion can do more than just map. We can use it to expand a single value into a sequence of values, each related by some function. For instance:\n(defn expand [f x count]\n  (if (pos? count)\n    (cons x (expand f (f x) (dec count)))))\nOur base case is x itself, followed by the sequence beginning with (f x). That sequence in turn expands to (f (f x)), and then (f (f (f x))), and so on. Each time we call expand, we count down by one using dec. Once the count is zero, the if returns nil, and evaluation stops. If we start with the number 0 and use inc as our function:\nuser=&gt; user=&gt; (expand inc 0 10)\n(0 1 2 3 4 5 6 7 8 9)\nClojure has a more general form of this function, called iterate.\nuser=&gt; (take 10 (iterate inc 0))\n(0 1 2 3 4 5 6 7 8 9)\nSince this sequence is infinitely long, we’re using take to select only the first 10 elements. We can construct more complex sequences by using more complex functions:\nuser=&gt; (take 10 (iterate (fn [x] (if (odd? x) (+ 1 x) (/ x 2))) 10))\n(10 5 6 3 4 2 1 2 1 2)\nOr build up strings:\nuser=&gt; (take 5 (iterate (fn [x] (str x &quot;o&quot;)) &quot;y&quot;))\n(&quot;y&quot; &quot;yo&quot; &quot;yoo&quot; &quot;yooo&quot; &quot;yoooo&quot;)\niterate is extremely handy for working with infinite sequences, and has some partners in crime. repeat, for instance, constructs a sequence where every element is the same.\nuser=&gt; (take 10 (repeat :hi))\n(:hi :hi :hi :hi :hi :hi :hi :hi :hi :hi)\nuser=&gt; (repeat 3 :echo)\n(:echo :echo :echo)\nAnd its close relative repeatedly simply calls a function (f) to generate an infinite sequence of values, over and over again, without any relationship between elements. For an infinite sequence of random numbers:\nuser=&gt; (rand)\n0.9002678382322784\nuser=&gt; (rand)\n0.12375594203332863\nuser=&gt; (take 3 (repeatedly rand))\n(0.44442397843046755 0.33668691162169784 0.18244875487846746)\nNotice that calling (rand) returns a different number each time. We say that rand is an impure function, because it cannot simply be replaced by the same value every time. It does something different each time it’s called.\nThere’s another very handy sequence function specifically for numbers: range, which generates a sequence of numbers between two points. (range n) gives n successive integers starting at 0. (range n m) returns integers from n to m-1. (range n m step) returns integers from n to m, but separated by step.\nuser=&gt; (range 5)\n(0 1 2 3 4)\nuser=&gt; (range 2 10)\n(2 3 4 5 6 7 8 9)\nuser=&gt; (range 0 100 5)\n(0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95)\nTo extend a sequence by repeating it forever, use cycle:\nuser=&gt; (take 10 (cycle [1 2 3]))\n(1 2 3 1 2 3 1 2 3 1)\nTransforming sequences\nGiven a sequence, we often want to find a related sequence. map, for instance, applies a function to each element–but has a few more tricks up its sleeve.\nuser=&gt; (map (fn [n vehicle] (str &quot;I&#39;ve got &quot; n &quot; &quot; vehicle &quot;s&quot;))\n         [0 200 9]\n         [&quot;car&quot; &quot;train&quot; &quot;kiteboard&quot;])\n(&quot;I&#39;ve got 0 cars&quot; &quot;I&#39;ve got 200 trains&quot; &quot;I&#39;ve got 9 kiteboards&quot;)\nIf given multiple sequences, map calls its function with one element from each sequence in turn. So the first value will be (f 0 &quot;car&quot;), the second (f 200 &quot;train&quot;), and so on. Like a zipper, map folds together corresponding elements from multiple collections. To sum three vectors, column-wise:\nuser=&gt; (map + [1 2 3]\n              [4 5 6]\n              [7 8 9])\n(12 15 18)\nIf one sequence is bigger than another, map stops at the end of the smaller one. We can exploit this to combine finite and infinite sequences. For example, to number the elements in a vector:\nuser=&gt; (map (fn [index element] (str index &quot;. &quot; element))\n            (iterate inc 0)\n            [&quot;erlang&quot; &quot;ruby&quot; &quot;haskell&quot;])\n(&quot;0. erlang&quot; &quot;1. ruby&quot; &quot;2. haskell&quot;)\nTransforming elements together with their indices is so common that Clojure has a special function for it: map-indexed:\nuser=&gt; (map-indexed (fn [index element] (str index &quot;. &quot; element))\n                    [&quot;erlang&quot; &quot;ruby&quot; &quot;haskell&quot;])\n(&quot;0. erlang&quot; &quot;1. ruby&quot; &quot;2. haskell&quot;)\nYou can also tack one sequence onto the end of another, like so:\nuser=&gt; (concat [1 2 3] [:a :b :c] [4 5 6])\n(1 2 3 :a :b :c 4 5 6)\nAnother way to combine two sequences is to riffle them together, using interleave.\nuser=&gt; (interleave [:a :b :c] [1 2 3])\n(:a 1 :b 2 :c 3)\nAnd if you want to insert a specific element between each successive pair in a sequence, try interpose:\nuser=&gt; (interpose :and [1 2 3 4])\n(1 :and 2 :and 3 :and 4)\nTo reverse a sequence, use reverse.\nuser=&gt; (reverse [1 2 3])\n(3 2 1)\nuser=&gt; (reverse &quot;woolf&quot;)\n(\\f \\l \\o \\o \\w)\nStrings are sequences too! Each element of a string is a character, written \\f. You can rejoin those characters into a string with apply str:\nuser=&gt; (apply str (reverse &quot;woolf&quot;))\n&quot;floow&quot;\n…and break strings up into sequences of chars with seq.\nuser=&gt; (seq &quot;sato&quot;)\n(\\s \\a \\t \\o)\nTo randomize the order of a sequence, use shuffle.\nuser=&gt; (shuffle [1 2 3 4])\n[3 1 2 4]\nuser=&gt; (apply str (shuffle (seq &quot;abracadabra&quot;)))\n&quot;acaadabrrab&quot;\nSubsequences\nWe’ve already seen take, which selects the first n elements. There’s also drop, which removes the first n elements.\nuser=&gt; (range 10)\n(0 1 2 3 4 5 6 7 8 9)\nuser=&gt; (take 3 (range 10))\n(0 1 2)\nuser=&gt; (drop 3 (range 10))\n(3 4 5 6 7 8 9)\nAnd for slicing apart the other end of the sequence, we have take-last and drop-last:\nuser=&gt; (take-last 3 (range 10))\n(7 8 9)\nuser=&gt; (drop-last 3 (range 10))\n(0 1 2 3 4 5 6)\ntake-while and drop-while work just like take and drop, but use a function to decide when to cut.\nuser=&gt; (take-while pos? [3 2 1 0 -1 -2 10])\n(3 2 1)\nIn general, one can cut a sequence in twain by using split-at, and giving it a particular index. There’s also split-with, which uses a function to decide when to cut.\n(split-at 4 (range 10))\n[(0 1 2 3) (4 5 6 7 8 9)]\nuser=&gt; (split-with number? [1 2 3 :mark 4 5 6 :mark 7])\n[(1 2 3) (:mark 4 5 6 :mark 7)]\nNotice that because indexes start at zero, sequence functions tend to have predictable numbers of elements. (split-at 4) yields four elements in the first collection, and ensures the second collection begins at index four. (range 10) has ten elements, corresponding to the first ten indices in a sequence. (range 3 5) has two (since 5 - 3 is two) elements. These choices simplify the definition of recursive functions as well.\nWe can select particular elements from a sequence by applying a function. To find all positive numbers in a list, use filter:\nuser=&gt; (filter pos? [1 5 -4 -7 3 0])\n(1 5 3)\nfilter looks at each element in turn, and includes it in the resulting sequence only if (f element) returns a truthy value. Its complement is remove, which only includes those elements where (f element) is false or nil.\nuser=&gt; (remove string? [1 &quot;turing&quot; :apple])\n(1 :apple)\nFinally, one can group a sequence into chunks using partition, partition-all, or partition-by. For instance, one might group alternating values into pairs:\nuser=&gt; (partition 2 [:cats 5 :bats 27 :crocodiles 0])\n((:cats 5) (:bats 27) (:crocodiles 0))\nOr separate a series of numbers into negative and positive runs:\n(user=&gt; (partition-by neg? [1 2 3 2 1 -1 -2 -3 -2 -1 1 2])\n((1 2 3 2 1) (-1 -2 -3 -2 -1) (1 2))\nCollapsing sequences\nAfter transforming a sequence, we often want to collapse it in some way; to derive some smaller value. For instance, we might want the number of times each element appears in a sequence:\nuser=&gt; (frequencies [:meow :mrrrow :meow :meow])\n{:meow 3, :mrrrow 1}\nOr to group elements by some function:\nuser=&gt; (pprint (group-by :first [{:first &quot;Li&quot;    :last &quot;Zhou&quot;}\n                                 {:first &quot;Sarah&quot; :last &quot;Lee&quot;}\n                                 {:first &quot;Sarah&quot; :last &quot;Dunn&quot;}\n                                 {:first &quot;Li&quot;    :last &quot;O&#39;Toole&quot;}]))\n{&quot;Li&quot;    [{:last &quot;Zhou&quot;, :first &quot;Li&quot;}   {:last &quot;O&#39;Toole&quot;, :first &quot;Li&quot;}],\n &quot;Sarah&quot; [{:last &quot;Lee&quot;, :first &quot;Sarah&quot;} {:last &quot;Dunn&quot;, :first &quot;Sarah&quot;}]}\nHere we’ve taken a sequence of people with first and last names, and used the :first keyword (which can act as a function!) to look up those first names. group-by used that function to produce a map of first names to lists of people–kind of like an index.\nIn general, we want to combine elements together in some way, using a function. Where map treated each element independently, reducing a sequence requires that we bring some information along. The most general way to collapse a sequence is reduce.\nuser=&gt; (doc reduce)\nclojure.core/reduce\n([f coll] [f val coll])\n  f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\nThat’s a little complicated, so we’ll start small. We need a function, f, which combines successive elements of the sequence. (f state element) will return the state for the next invocation of f. As f moves along the sequence, it carries some changing state with it. The final state is the return value of reduce.\nuser=&gt; (reduce + [1 2 3 4])\n10\nreduce begins by calling (+ 1 2), which yields the state 3. Then it calls (+ 3 3), which yields 6. Then (+ 6 4), which returns 10. We’ve taken a function over two elements, and used it to combine all the elements. Mathematically, we could write:\n1 + 2 + 3 + 4\n    3 + 3 + 4\n        6 + 4\n           10\nSo another way to look at reduce is like sticking a function between each pair of elements. To see the reducing process in action, we can use reductions, which returns a sequence of all the intermediate states.\nuser=&gt; (reductions + [1 2 3 4])\n(1 3 6 10)\nOftentimes we include a default state to start with. For instance, we could start with an empty set, and add each element to it as we go along:\nuser=&gt; (reduce conj #{} [:a :b :b :b :a :a])\n{:a :b}\nReducing elements into a collection has its own name: into. We can conj [key value] vectors into a map, for instance, or build up a list:\nuser=&gt; (into {} [[:a 2] [:b 3]])\n{:a 2, :b 3}\nuser=&gt; (into (list) [1 2 3 4])\n(4 3 2 1)\nBecause elements added to a list appear at the beginning, not the end, this expression reverses the sequence. Vectors conj onto the end, so to emit the elements in order, using reduce, we might try:\nuser=&gt; (reduce conj [] [1 2 3 4 5])\n(reduce conj [] [1 2 3 4 5])\n[1 2 3 4 5]\nWhich brings up an interesting thought: this looks an awful lot like map. All that’s missing is some kind of transformation applied to each element.\n(defn my-map [f coll]\n  (reduce (fn [output element]\n            (conj output (f element)))\n          []\n          coll))\nuser=&gt; (my-map inc [1 2 3 4])\n[2 3 4 5]\nHuh. map is just a special kind of reduce. What about, say, take-while?\n(defn my-take-while [f coll]\n  (reduce (fn [out elem]\n            (if (f elem)\n              (conj out elem)\n              (reduced out)))\n          []\n          coll))\nWe’re using a special function here, reduced, to indicate that we’ve completed our reduction early and can skip the rest of the sequence.\nuser=&gt; (my-take-while pos? [2 1 0 -1 0 1 2])\n[2 1]\nreduce really is the uberfunction over sequences. Almost any operation on a sequence can be expressed in terms of a reduce–though for various reasons, many of the Clojure sequence functions are not written this way. For instance, take-while is actually defined like so:\nuser=&gt; (source take-while)\n(defn take-while\n  &quot;Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.&quot;\n  {:added &quot;1.0&quot;\n   :static true}\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n       (when (pred (first s))\n         (cons (first s) (take-while pred (rest s)))))))\nThere’s a few new pieces here, but the structure is essentially the same as our initial attempt at writing map. When the predicate matches the first element, cons the first element onto take-while, applied to the rest of the sequence. That lazy-seq construct allows Clojure to compute this sequence as required, instead of right away. It defers execution to a later time.\nMost of Clojure’s sequence functions are lazy. They don’t do anything until needed. For instance, we can increment every number from zero to infinity:\nuser=&gt; (def infseq (map inc (iterate inc 0)))\n&#39;user/infseq\nuser=&gt; (realized? infseq)\nfalse\nThat function returned immediately. Because it hasn’t done any work yet, we say the sequence is unrealized. It doesn’t increment any numbers at all until we ask for them:\nuser=&gt; (take 10 infseq)\n(1 2 3 4 5 6 7 8 9 10)\nuser=&gt; (realized? infseq)\ntrue\nLazy sequences also remember their contents, once evaluated, for faster access.\nPutting it all together\nWe’ve seen how recursion generalizes a function over one thing into a function over many things, and discovered a rich landscape of recursive functions over sequences. Now let’s use our knowledge of sequences to solve a more complex problem: find the sum of the products of consecutive pairs of the first 1000 odd integers.\nFirst, we’ll need the integers. We can start with 0, and work our way up to infinity. To save time printing an infinite number of integers, we’ll start with just the first 10.\nuser=&gt; (take 10 (iterate inc 0))\n(0 1 2 3 4 5 6 7 8 9)\nNow we need to find only the ones which are odd. Remember, filter pares down a sequence to only those elements which pass a test.\nuser=&gt; (take 10 (filter odd? (iterate inc 0)))\n(1 3 5 7 9 11 13 15 17 19)\nFor consecutive pairs, we want to take [1 3 5 7 ...] and find a sequence like ([1 3] [3 5] [5 7] ...). That sounds like a job for partition:\nuser=&gt; (take 3 (partition 2 (filter odd? (iterate inc 0))))\n((1 3) (5 7) (9 11))\nNot quite right–this gave us non-overlapping pairs, but we wanted overlapping ones too. A quick check of (doc partition) reveals the step parameter:\nuser=&gt; (take 3 (partition 2 1 (filter odd? (iterate inc 0))))\n((1 3) (3 5) (5 7))\nNow we need to find the product for each pair. Given a pair, multiply the two pieces together… yes, that sounds like map:\nuser=&gt; (take 3 (map (fn [pair] (* (first pair) (second pair)))\n                    (partition 2 1 (filter odd? (iterate inc 0)))))\n(3 15 35)\nGetting a bit unwieldy, isn’t it? Only one final step: sum all those products. We’ll adjust the take to include the first 1000, not the first 3, elements.\nuser=&gt; (reduce +\n               (take 1000\n                     (map (fn [pair] (* (first pair) (second pair)))\n                          (partition 2 1\n                                    (filter odd?\n                                            (iterate inc 0)))))\n1335333000\nThe sum of the first thousand products of consecutive pairs of the odd integers starting at 0. See how each part leads to the next? This expression looks a lot like the way we phrased the problem in English–but both English and Lisp expressions are sort of backwards, in a way. The part that happens first appears deepest, last, in the expression. In a chain of reasoning like this, it’d be nicer to write it in order.\nuser=&gt; (-&gt;&gt; 0\n            (iterate inc)\n            (filter odd?)\n            (partition 2 1)\n            (map (fn [pair]\n                   (* (first pair) (second pair))))\n            (take 1000)\n            (reduce +))\n1335333000\nMuch easier to read: now everything flows in order, from top to bottom, and we’ve flattened out the deeply nested expressions into a single level. This is how object-oriented languages structure their expressions: as a chain of function invocations, each acting on the previous value.\nBut how is this possible? Which expression gets evaluated first? (take 1000) isn’t even a valid call–where’s its second argument? How are any of these forms evaluated?\nWhat kind of arcane function is -&gt;&gt;?\nAll these mysteries, and more, in Chapter 5: Macros.\nProblems\nWrite a function to find out if a string is a palindrome–that is, if it looks the same forwards and backwards.\nFind the number of ‘c’s in “abracadabra”.\nWrite your own version of filter.\nFind the first 100 prime numbers: 2, 3, 5, 7, 11, 13, 17, ….\n"},"reference/control-flow.html":{"url":"reference/control-flow.html","title":"Control Flow","body":"Control Flow\n"},"reference/persistent-data-structures.html":{"url":"reference/persistent-data-structures.html","title":"Persistent Data Structures","body":"Persistent Data Structures\n"},"reference/changing-state.html":{"url":"reference/changing-state.html","title":"Changing State","body":"Changing State\n"},"reference/reader-macros.html":{"url":"reference/reader-macros.html","title":"Reader Macros","body":"Reader Macros\nThis is a collection of reader macros (think syntactic sugar) that are valid in Clojure.  These macros are useful for commenting out expressions, defining sets, ...\nAll reader macros start with the character #, which is infact the Dispatch macro that tells the Clojure reader (the thing that takes a file of Clojure text and parses it for consumption in the compiler) to go and look at another read table for the definition of the next character - in essence this allows extending default reader behaviour.\n\n#_ - Discard macro - ignore the next expression.  Often used to comment out code, especially when nested inside other expressions\n\n#&#39; - Var macro - returns the reference to the var.  Used to pass the definition of something rather than the result of evaluating it.\n\n\nThere is a nice list of reader macros in the article: The weird and wondreful characters of Clojure by @kouphax.\n\nHint Reader macros are part of the Clojure language specification, so are different to macros, which can be defined by anyone.\n\n"},"reference/core-async.html":{"url":"reference/core-async.html","title":"Core.async","body":"Core.async\n"},"reference/prasmatic-schema.html":{"url":"reference/prasmatic-schema.html","title":"Prasmatic Schema","body":"Prasmatic Schema\n"},"reference/books.html":{"url":"reference/books.html","title":"Books on Clojure","body":"Books on Clojure\n"},"lighttable/":{"url":"lighttable/","title":"Lighttable","body":"Lighttable\n"},"lighttable/configure-keyboard-mappings.html":{"url":"lighttable/configure-keyboard-mappings.html","title":"Configure Keyboard mappings","body":"Configure Lighttable keyboard mappings\nLightTable/User/user.keymap\nEmacs\nAdd a keybinding to kill a line\nSuggested configuration\n[:editor &quot;ctrl-k&quot; (:editor.line-start)\n                      (:editor.kill-line)\n                      (:editor.delete-char-left)]\n\n\nneed to test this\n\n"},"GLOSSARY.html":{"url":"GLOSSARY.html","body":"Arity\nThe number of arguments a function takes.  This can be a fixed number or variable number of arguments.  Simple polymorphism can also be used to have one function take different numbers of arguments.\n(defn single-arity [argument] \n  (str &quot;I take 1 argument only&quot;))\n\n(defn triple-arity [argument1 argument2 argument3] \n  (str &quot;I take 3 arguments only&quot;))\n\n(defn multi-arity \n ([argument] \n   (str &quot;I match 1 argument only&quot;))\n ([argument1 argument2]\n   (str &quot;I match when 2 arguments are used&quot;)))\n\n(defn variable-arity [argument &amp; more-arguments]\n  (str &quot;I assign the first argument to argument, \n        all other arguments to more-arguments&quot;))\n\nHigher Order Functions\n\nA function for which both the input and the output are functions.\n\nlet greet = (name) =&gt; () =&gt; `Hello ${name}!`;\n\ngreet(&quot;HOF&quot;)(); // Hello HOF!\n\nPartial Application\n\nThe process of getting a function with lesser arity compared to the original\nfunction by fixing the number of arguments is known as partial application.\n\nlet sum = (a, b) =&gt; a + b;\n\n// partially applying `a` to `40`\nlet partial = sum.bind(null, 40);\n\n// Invoking it with `b`\npartial(2); //=&gt; 42\n\nCurrying\n\nThe process of converting a function with multiple arity into the same function with less arity.\n\nlet sum = (a,b) =&gt; a+b;\n\nlet curriedSum = function(a) {\n    return function(b) {\n        return a + b;\n    };\n};\n\ncurriedSum(40)(2) // 42.\n\nPurity\n\nA function is said to be pure if the return value is only determined by its\ninput values, without any side effects.\n\nlet greet = &quot;yo&quot;;\n\ngreet.toUpperCase(); // YO;\n\ngreet // yo;\n\nSide effects\nIdempotency\n\nA function is said to be idempotent if it has no side-effects on multiple\nexecutions with the the same input parameters.\n\nf(f(x)) = f(x)\nMath.abs(Math.abs(10))\nContracts\nGuarded Functions\nCategories\nFunctor\n\nStructure that can be mapped over.\n\nSimplest functor in javascript is an Array\n[2,3,4].map( function(n) {\n  return n + 2;\n}); // [4,6,8]\n\nReferential Transparency\n\nAn expression that can be replaced with its value without changing the\nbehaviour of the program is said to be referential transparent.\n\nSay we have function greet:\nlet greet = () =&gt; &quot;Hello World!&quot;;\n\nAny invocation of greet() can be replaced with Hello World! hence greet is\nreferential transparent.\nLazy evalution\n\naka call-by-need is an evaluation machanism which delays the evaluation of an expression until its value is needed.\n\nlet rand = function*() {\n    while(1&lt;2) {\n        yield Math.random();\n    }\n}\n\nlet randIter = random();\nrandIter.next(); // Each exectuion gives a random value, expression is evluated on need.\n\nMonoid\nMonad\nComonad\nApplicative Functor\nMorphism\nSetoid\nSemigroup\nChain\n"}}}